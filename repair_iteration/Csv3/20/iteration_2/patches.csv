bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	10	None	replace
2	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	10	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  Float.MIN_VALUE;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	10	40	replace
4	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MIN_VALUE;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  Float.MIN_VALUE;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	10	40	replace
5	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
6	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	308	None	replace
7	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
8	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
9	[BUG]  [BUGGY]  c  =  in.read();  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	308	None	replace
10	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	308	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
12	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
14	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  ==  commmentStart;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	39	replace
16	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  commmentStart;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  commmentStart;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	39	replace
17	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
18	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
19	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
20	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
21	[BUG]  [BUGGY]  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
22	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  int  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
23	[BUG]  [BUGGY]  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
24	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  int  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
25	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  int  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
26	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	334	48	replace
27	[BUG]  [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	334	48	replace
28	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
29	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
30	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
31	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
32	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
33	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
34	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
35	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
36	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
37	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
38	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
39	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
40	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
41	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	4	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
43	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  LF;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  >=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	51	replace
45	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	51	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
47	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c!=  LF;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	51	replace
49	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c!=  LF;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c!=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	51	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  >=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
51	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  CR;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
53	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  CR;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  CR;	  return    c    >>    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	126	40	replace
54	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	21	None	add
55	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
56	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
57	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	21	None	add
58	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
59	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
60	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	21	None	add
61	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
62	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	313	None	replace
63	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
64	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
65	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	313	None	replace
66	[BUG]  [BUGGY]  if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	313	None	replace
67	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
68	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
69	[BUG]  [BUGGY]  c  ==  LF  &&  c  >=  CR;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  LF  &&  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
70	[BUG]  [BUGGY]  c  >>  LF  &&  c  >=  CR;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >>  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >>  LF  &&  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
71	[BUG]  [BUGGY]  c  >=  LF  &&  c  >=  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
72	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
73	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
74	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	77	None	replace
75	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	77	None	replace
76	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	77	None	replace
77	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	77	None	replace
78	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
80	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
81	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >>  CR;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >>  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >>  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	142	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	51	replace
83	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  CR;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	51	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  >=  DISABLED;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
85	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  DISABLED;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  >=  DISABLED;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
86	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
87	[BUG]  [BUGGY]  c  ==  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
88	[BUG]  [BUGGY]  c  >>  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >>  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >>  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
89	[BUG]  [BUGGY]  c!=  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c!=  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c!=  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
90	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c!=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c!=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c!=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
91	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
92	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  LF  &&  c  >=  CR;	  return    c    <    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	158	40	replace
94	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  >=  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  >=  CR;	  return    c    <    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	158	40	replace
95	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  LF  &&  c  >=  LF;	  return    c    <    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	158	6	replace
96	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  >=  LF;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  >=  LF;	  return    c    <    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	158	6	replace
97	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	326	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	326	51	replace
99	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	326	51	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  0  ||  c  ==  0;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  0  ||  c  ==  0;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	326	43	replace
101	[BUG]  [BUGGY]  return  c  <  0  ||  c  ==  0;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  0  ||  c  ==  0;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  0  ||  c  ==  0;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	326	43	replace
102	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	326	None	replace
103	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	326	None	replace
104	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	326	None	replace
105	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	99	None	add
106	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	99	None	add
107	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	99	None	add
108	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
109	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
110	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
111	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
112	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
113	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
114	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
115	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
116	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
117	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
118	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
119	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
120	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
121	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
122	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  LF;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
123	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
124	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  LF;  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
125	[BUG]  [BUGGY]  c  =  c  >=  DISABLED;  [CE]  incompatible  types  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  >=  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	85	None	replace
126	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'e'  &&  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	40	replace
128	[BUG]  [BUGGY]  return  c  ==  'e'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'e'  &&  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	40	replace
129	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	301	None	replace
130	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  IllegalArgumentException  	301	53	replace
131	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  IllegalArgumentException  	301	53	replace
132	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  IllegalStateException  	301	53	replace
133	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  IllegalStateException  	301	53	replace
134	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
135	[BUG]  [BUGGY]  return  c!=  'e'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
136	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	301	None	replace
137	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	66	None	add
138	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	66	None	add
139	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	66	None	add
140	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	66	None	add
141	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  ==  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  ==  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c  ==  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	66	None	add
142	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	66	None	add
143	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	66	None	add
144	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  ||  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    ||  c  ==  DISABLED;	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
145	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
147	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
148	[BUG]  [BUGGY]  int  len  =  in.read();  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  len  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  len  =  in.read();	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	120	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readShort();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readShort();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readShort();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	replace
150	[BUG]  [BUGGY]  Character  commmentStart  =  in.read();  if(commmentStart  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  com  [CE]  ')'  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Character  commmentStart  =  in.read();  if(commmentStart  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  com  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Character  commmentStart  =  in.read();  if(commmentStart  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  com	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
151	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
152	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
153	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
154	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
155	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
156	[BUG]  [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
157	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	114	None	replace
158	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	114	None	replace
159	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
160	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	114	None	replace
161	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
162	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	114	None	replace
163	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
164	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
165	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
166	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
167	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
168	[BUG]  [BUGGY]  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	338	None	replace
169	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	338	None	replace
170	[BUG]  [BUGGY]  c  =  c!=  DISABLED  ||  c  ==  DISABLED;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	338	None	replace
171	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	338	None	replace
172	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	64	None	add
173	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  ==  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  ==  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    c  ==  CR  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	64	None	add
174	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  >=  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  >=  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    c  >=  CR  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	64	None	add
175	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c!=  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c!=  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    c!=  CR  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	64	None	add
176	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  >>  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  c  >>  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    c  >>  CR  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	64	None	add
177	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	64	None	add
178	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	add
179	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentEnd  >  0)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentEnd  >  0)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c  ==  DISABLED)  {  int  commmentStart  =  in.read();  if(commmentEnd  >  0)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	add
180	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    c  <  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	236	None	add
181	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	236	None	add
182	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	236	None	add
183	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	236	None	add
184	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    c  <  DISABLED  ||  c  ==  CR;	  	non-compiled	[CE]  >  expected	236	None	add
185	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  >=  DISABLED;  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    c  <  DISABLED  ||  c  >=  DISABLED;	  	non-compiled	[CE]  >  expected	236	None	add
186	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	236	None	add
187	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  	non-compiled	[CE]  unreachable  statement	236	None	add
188	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_END  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_END  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_END  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	306	None	replace
189	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_END;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_END;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	306	None	replace
190	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_END  &&  c  ==  CR;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_END  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_END  &&  c  ==  CR;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	306	None	replace
191	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC_END;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC_END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DETERMINISTIC_END;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	306	None	replace
192	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_END  ||  c  ==  DETERMINISTIC_END;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_END  ||  c  ==  DETERMINISTIC_END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_END  ||  c  ==  DETERMINISTIC_END;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	306	None	replace
193	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	40	None	add
194	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	40	None	add
195	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	40	None	add
196	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	40	None	add
197	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	40	None	add
198	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	40	None	add
199	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	add
200	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
206	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	101	None	add
207	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	101	None	add
208	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	101	None	add
209	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
210	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
211	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
212	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
213	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'n'  ||  c  >  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
215	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  >  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'n'  ||  c  >  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'n'  ||  c  >=  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
217	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  >=  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'n'  ||  c  >=  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'n'  ||  c!=  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
219	[BUG]  [BUGGY]  return  c  <  'n'  ||  c!=  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'n'  ||  c!=  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	182	51	replace
220	[BUG]  [BUGGY]  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Integer  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	253	None	replace
221	[BUG]  [BUGGY]  Enum.int  c  =  in.read();  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Enum.int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Enum.int  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  <identifier>  expected	253	None	replace
222	[BUG]  [BUGGY]  Enumeration  c  =  in.read();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Enumeration  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Enumeration  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	253	None	replace
223	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	16	None	replace
224	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	16	None	replace
225	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	16	None	replace
226	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	16	None	replace
227	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	16	None	replace
228	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	16	None	replace
229	[BUG]  [BUGGY]  in.read();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	248	None	replace
230	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	248	None	replace
231	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	248	None	replace
232	[BUG]  [BUGGY]  if(c  <  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF)  {  return  c  >=  LF;  }  else  {  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	248	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c!=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c!=  DISABLED  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	265	50	replace
234	[BUG]  [BUGGY]  in.read();  return  c!=  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c!=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c!=  DISABLED  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	265	50	replace
235	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	265	None	replace
236	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	265	None	replace
237	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	265	None	replace
238	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	265	None	replace
239	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
240	[BUG]  [BUGGY]  char  c  =  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	129	None	replace
241	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
242	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
243	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
244	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
245	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
246	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  char  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
247	[BUG]  [BUGGY]  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
248	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
249	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
250	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
251	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	297	None	replace
252	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  int  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	297	None	replace
253	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  else  {  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  else  {  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  else  {  int  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
254	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
255	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
256	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	318	None	replace
257	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
258	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
259	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
260	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT;  [CE]  cannot  find  symbol  COMMENT  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT	331	None	replace
261	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  c  <  DISABLED  ||  c  >  CR;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  c  <  DISABLED  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    c  <  DISABLED  ||  c  >  CR;	  	non-compiled	[CE]  >  expected	324	None	add
262	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	324	None	add
263	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	324	None	add
264	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	324	None	add
265	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
266	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
267	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
268	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
269	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
270	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
271	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
272	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
273	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
274	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
275	[BUG]  [BUGGY]  c  =  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  incompatible  types	286	None	replace
276	[BUG]  [BUGGY]  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	286	None	replace
277	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
278	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
279	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
280	[BUG]  [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
281	[BUG]  [BUGGY]  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
282	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
283	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
284	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
285	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
286	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
287	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	112	None	replace
288	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	112	None	replace
289	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	112	None	replace
290	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	112	None	replace
291	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  <  'n'  ||  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  <  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    c  <  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  illegal  start  of  type	181	None	add
292	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	181	None	add
293	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	181	None	add
294	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	181	None	add
295	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	181	None	add
296	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	181	None	add
297	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	181	None	add
298	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  <  'n'  ||  c  >=  DISABLED;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  c  <  'n'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    c  <  'n'  ||  c  >=  DISABLED;	  	non-compiled	[CE]  illegal  start  of  type	181	None	add
299	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
300	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	32	None	replace
301	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
302	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
303	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
304	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
305	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
306	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  CR;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	42	replace
307	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  CR;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	42	replace
308	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DR;  [CE]  cannot  find  symbol  DR  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DR;	  return    c    ==    'n'    ||    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  DR	321	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  &&  c  ==  LF;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	40	replace
310	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  LF;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  &&  c  ==  LF;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	40	replace
311	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
312	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
313	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
314	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
315	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
316	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
317	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
318	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	36	None	add
319	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	36	None	add
320	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
321	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
322	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	36	None	add
323	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
324	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
325	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
326	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
327	[BUG]  [BUGGY]  c  =  c!=  DISABLED;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c!=  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	3	None	replace
328	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  LF;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  LF;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  LF;  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
329	[BUG]  [BUGGY]  c  =  c  ==  DISABLED;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	3	None	replace
330	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  in.read();  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    char  commmentStart  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	46	None	add
331	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  c  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	46	None	add
332	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	46	None	add
333	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }	  	non-compiled	[CE]  unreachable  statement	46	None	add
334	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }	  	non-compiled	[CE]  unreachable  statement	46	None	add
335	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	46	None	add
336	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	add
337	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  commmentStart  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  commmentStart  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    commmentStart  =  in.read();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  commmentStart	46	None	add
338	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	19	None	add
339	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	19	None	add
340	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	19	None	add
341	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
342	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	19	None	add
343	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
344	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
345	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
346	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	287	None	replace
347	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_END;  [CE]  cannot  find  symbol  COMMENT_END  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_END;	  return    c    ==    DISABLED    ||    c    ==    CF;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_END	56	None	replace
348	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_CHAR;  [CE]  cannot  find  symbol  COMMENT_CHAR  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_CHAR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_CHAR;	  return    c    ==    DISABLED    ||    c    ==    CF;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_CHAR	56	None	replace
349	[BUG]  [BUGGY]  char  c  =  c.charAt(c);  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c.charAt(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c.charAt(c);	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	340	None	replace
350	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	200	None	add
351	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	200	None	add
352	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	200	None	add
353	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
354	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
355	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	200	None	add
356	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
357	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  LF  ||  c  >  DISABLED;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	43	replace
359	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >  DISABLED;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	43	replace
360	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  LF  &&  c  >  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	40	replace
361	[BUG]  [BUGGY]  return  c  <  LF  &&  c  >  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  &&  c  >  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	40	replace
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  LF  ||  c  >=  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
363	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  CR;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >=  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
364	[BUG]  [BUGGY]  return  c  <  =  LF  ||  c  >  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  ||  c  >  CR;	  return    c    <    LF    ||    c    >    CR;    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  LF  ||  c!=  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
366	[BUG]  [BUGGY]  return  c  <  LF  ||  c!=  CR;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c!=  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  LF  ||  c  >  CR  +  1;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
368	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR  +  1;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >  CR  +  1;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
369	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
370	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
371	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
372	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
373	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
374	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
375	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	256	None	replace
376	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	113	50	replace
377	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	113	50	replace
378	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	113	None	replace
379	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	113	None	replace
380	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	295	None	replace
381	[BUG]  [BUGGY]  if(c  >=  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	295	None	replace
382	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalArgumentException  	295	53	replace
383	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalArgumentException  	295	53	replace
384	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	295	None	replace
385	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
386	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
387	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
388	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
389	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
390	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
391	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
392	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	62	None	add
393	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	62	None	add
394	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	62	None	add
395	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
396	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
397	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
398	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
399	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	62	None	add
400	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	239	None	replace
401	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	239	None	replace
402	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	239	None	replace
403	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
404	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
405	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	239	None	replace
406	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
407	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
408	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  true;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
409	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
410	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  true;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
411	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
412	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c!=  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
413	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	149	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	149	40	replace
415	[BUG]  [BUGGY]  return  c  ==  DISABLED;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	149	40	replace
416	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	187	None	replace
417	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	187	None	replace
418	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
419	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  FINAL;  [CE]  cannot  find  symbol  FINAL  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  FINAL;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  FINAL;	  return    c    ==    DISABLED    ||    c    ==    COMMENTStart;    	non-compiled	[CE]  cannot  find  symbol  FINAL	202	None	replace
420	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c  >=  LF;	  return    c    >=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	63	40	replace
421	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  >=  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  >=  LF;	  return    c    >=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	63	40	replace
422	[BUG]  [BUGGY]  return  c  >>  DISABLED  &&  c  >=  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  &&  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  &&  c  >=  LF;	  return    c    >=    LF    &&    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	63	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  LF  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	63	40	replace
424	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	63	40	replace
425	[BUG]  [BUGGY]  int  commmentStart  =  in.read();  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  commmentStart  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  missing  return  statement	254	None	replace
426	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	254	None	replace
427	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	254	None	replace
428	[BUG]  [BUGGY]  char  c  =  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c  ==  DISABLED;  int  commmentStart  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	254	None	replace
429	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	254	None	replace
430	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  System.arraycopy(c,  0,  commmentStart,  c);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  System.arraycopy(c,  0,  commmentStart,  c);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  System.arraycopy(c,  0,  commmentStart,  c);  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	254	None	replace
431	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  commmentStart  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  commmentStart  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  commmentStart	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  not  a  statement	254	None	replace
432	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	300	None	add
433	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	300	None	add
434	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	300	None	add
435	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
436	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
437	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
438	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  'e'  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
439	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  'e'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
440	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	132	None	replace
441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	50	replace
442	[BUG]  [BUGGY]  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	50	replace
443	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	132	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	50	replace
445	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	50	replace
446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  'n';	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	44	replace
447	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n';  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  'n';	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	132	44	replace
448	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
449	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
450	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
451	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	227	None	replace
452	[BUG]  [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	227	None	replace
453	[BUG]  [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
454	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }  [CE]  illegal  start  of  expression  [FE]                                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
455	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	70	None	add
456	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  >=  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	70	None	add
457	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  ==  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  ==  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  ==  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	70	None	add
458	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  CR  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  CR  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  >=  CR  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	70	None	add
459	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >>  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >>  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  >>  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	70	None	add
460	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	70	None	add
461	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  <  LF  ||  c  ==  CR;	  	non-compiled	[CE]  >  expected	70	None	add
462	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  <  LF  ||  c  >=  CR;  [CE]  >  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  <  LF  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  <  LF  ||  c  >=  CR;	  	non-compiled	[CE]  >  expected	70	None	add
463	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	76	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	76	40	replace
465	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	76	40	replace
466	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	177	None	add
467	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	177	None	add
468	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	177	None	add
469	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	177	None	add
470	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
471	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	add
472	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	177	None	add
473	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  'n'  ||  c  ==  DISABLED  +  1);  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
474	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
475	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
476	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
477	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
478	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  unreachable  statement	299	None	replace
479	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	320	None	add
480	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
481	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
482	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	320	None	add
483	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
484	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
485	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
486	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
487	[BUG]  [BUGGY]  return  c  >>  'n'  ||  c  ==  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  'n'  ||  c  ==  DISABLED;	  return    c    >=    'n'    ||    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	107	None	replace
488	[BUG]  [BUGGY]  return  c  [Delete]  'n'  ||  c  ==  DISABLED;  [CE]  ';'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  [Delete]  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  [Delete]  'n'  ||  c  ==  DISABLED;	  return    c    >=    'n'    ||    c    ==    DISABLED;    	non-compiled	[CE]  ';'  expected	107	None	replace
489	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	148	None	replace
490	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
491	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
492	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
493	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	148	None	replace
494	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	148	None	replace
495	[BUG]  [BUGGY]  char  commmentStart  =  in.read();  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  commmentStart  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	249	None	replace
496	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  missing  return  statement	249	None	replace
497	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  missing  return  statement	249	None	replace
498	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  int  commmentStart  =  in.read();  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  missing  return  statement	249	None	replace
499	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	249	None	replace
500	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	188	None	replace
501	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	188	None	replace
502	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
503	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
504	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  ignoreSurroundingSpaces)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
505	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  true;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	188	None	replace
506	[BUG]  [BUGGY]  return  c  <  =  LC  ||  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LC  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LC  ||  c  ==  DISABLED;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
507	[BUG]  [BUGGY]  return  c  <  =  LC  &&  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LC  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LC  &&  c  ==  CR;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
508	[BUG]  [BUGGY]  return  c  ==  LC  ||  c  ==  CR;  [CE]  cannot  find  symbol  LC  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LC  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LC  ||  c  ==  CR;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  LC	289	None	replace
509	[BUG]  [BUGGY]  return  c  <  =  CR  ||  c  ==  LC;  [CE]  illegal  start  of  expression  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  CR  ||  c  ==  LC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  CR  ||  c  ==  LC;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
510	[BUG]  [BUGGY]  return  c  <  =  LC  ||  c  >  CR;  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LC  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LC  ||  c  >  CR;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
511	[BUG]  [BUGGY]  return  c  >=  LC  ||  c  ==  CR;  [CE]  cannot  find  symbol  LC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LC  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LC  ||  c  ==  CR;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  LC	289	None	replace
512	[BUG]  [BUGGY]  return  c  <  =  LC  ||  c  >=  DISABLED;  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LC  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LC  ||  c  >=  DISABLED;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	289	None	replace
513	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
514	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
515	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	105	None	replace
516	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
517	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
518	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
519	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
520	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
521	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
522	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
523	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
524	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	131	None	replace
525	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	131	None	replace
526	[BUG]  [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	131	None	replace
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	18	40	replace
528	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	18	40	replace
529	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  <  =  CR;	  return    c    ==    DISABLED    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
530	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	291	None	replace
531	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENT_START;  [CE]  cannot  find  symbol  COMMENT_START  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENT_START;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  COMMENT_START;	  return    c    ==    DISABLED    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	45	None	replace
532	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  <  =  LF;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  <  =  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  <  =  LF;	  return    c    ==    DISABLED    &&    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
533	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	124	None	add
534	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	124	None	add
535	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
536	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
537	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
538	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
539	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
540	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	124	None	add
541	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	138	None	add
542	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
543	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
544	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
545	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	138	None	add
546	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
547	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
548	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
549	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	290	None	replace
550	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	290	None	replace
551	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	290	None	replace
552	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    c  <  LF  &&  c  ==  CR;	  	non-compiled	[CE]  >  expected	157	None	add
553	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
554	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
555	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
556	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  CR  &&  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    c  <  CR  &&  c  ==  CR;	  	non-compiled	[CE]  >  expected	157	None	add
557	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  LF  &&  c  >=  CR;  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  c  <  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    c  <  LF  &&  c  >=  CR;	  	non-compiled	[CE]  >  expected	157	None	add
558	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
559	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	157	None	add
560	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	312	None	replace
561	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
562	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	312	None	replace
563	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	312	None	replace
564	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
565	[BUG]  [BUGGY]  if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	343	40	replace
567	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	343	40	replace
568	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	343	None	replace
569	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	343	40	replace
570	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	343	40	replace
571	[BUG]  [BUGGY]  char  c  =  c.charAt(0);  return  c!=  DISABLED  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c.charAt(0);  return  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c.charAt(0);  return  c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	339	None	replace
572	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  >>  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  >>  LF;	  return    c    >=    LF    &&    c!=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	125	None	replace
573	[BUG]  [BUGGY]  return  c  ==  LINE  &&  c  ==  DISABLED;  [CE]  cannot  find  symbol  LINE  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LINE  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LINE  &&  c  ==  DISABLED;	  return    c    ==    LINE    &&    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  LINE	25	None	replace
574	[BUG]  [BUGGY]  return  c  ==  END  &&  c  ==  CR;  [CE]  cannot  find  symbol  END  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  END  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  END  &&  c  ==  CR;	  return    c    ==    LINE    &&    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  END	25	None	replace
575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  CR  &&  c  ==  CR;	  return    c    ==    LINE    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	25	37	replace
576	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  CR;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  CR;	  return    c    ==    LINE    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	25	37	replace
577	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c!=  CR;	  return    c    ==    DISABLED    ||    c!=    CR;    	compilable	  [FE]  AssertionError  	139	51	replace
578	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c!=  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c!=  CR;	  return    c    ==    DISABLED    ||    c!=    CR;    	compilable	  [FE]  AssertionError  	139	51	replace
579	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c!=  CR;	  return    c    ==    DISABLED    ||    c!=    CR;    	compilable	  [FE]  AssertionError  	139	40	replace
580	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c!=  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c!=  CR;	  return    c    ==    DISABLED    ||    c!=    CR;    	compilable	  [FE]  AssertionError  	139	40	replace
581	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
582	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
583	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
584	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
585	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  &&  c  >=  DISABLED;	  return    c    ==    'n'    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	180	40	replace
586	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  >=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  &&  c  >=  DISABLED;	  return    c    ==    'n'    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	180	40	replace
587	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  &&  c!=  DISABLED;	  return    c    ==    'n'    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	180	44	replace
588	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  &&  c!=  DISABLED;	  return    c    ==    'n'    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	180	44	replace
589	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	302	None	add
590	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	302	None	add
591	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  'r'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	302	None	add
592	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	302	None	add
593	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  in.read();  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    char  r  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	302	None	add
594	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	302	None	add
595	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  c.charAt(c);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  c.charAt(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    char  r  =  c.charAt(c);	  	non-compiled	[CE]  int  cannot  be  dereferenced	302	None	add
596	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	302	None	add
597	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	234	None	add
598	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	234	None	add
599	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	234	None	add
600	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	234	None	add
601	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	234	None	add
602	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	234	None	add
603	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	234	None	add
604	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	234	None	add
605	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	17	None	add
606	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
607	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	17	None	add
608	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	17	None	add
609	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
610	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
611	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
612	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
613	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
614	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
615	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	243	None	replace
616	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  LF)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  unreachable  statement	243	None	replace
617	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
618	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
619	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
620	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
621	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
622	[BUG]  [BUGGY]  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
623	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  in.lookAhead()  ==  LF;  }  [CE]  missing  return  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  in.lookAhead()  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)  {  return  in.lookAhead()  ==  LF;  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  missing  return  statement	279	None	replace
624	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	194	None	replace
625	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	194	None	replace
626	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	194	None	replace
627	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	194	None	replace
628	[BUG]  [BUGGY]  char  c  =  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	194	None	replace
629	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	283	40	replace
630	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	283	40	replace
631	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();	  return    c!=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	186	None	replace
632	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c!=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	186	None	replace
633	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  String  c  =  in.read();	  return    c!=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	186	None	replace
634	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  char  c  =  in.read();	  return    c!=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	186	None	replace
635	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	c  =  in.read();  return  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	292	49	replace
636	[BUG]  [BUGGY]  c  =  in.read();  return  c  >=  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();  return  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	292	49	replace
637	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	292	None	replace
638	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	292	None	replace
639	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  DISABLED;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  DISABLED;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
640	[BUG]  [BUGGY]  return  c  >  LF  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  <  =  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
641	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  LF  &&  c!=  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	compilable	  [FE]  AssertionError  	192	51	replace
642	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c!=  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	compilable	  [FE]  AssertionError  	192	51	replace
643	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  <  =  DISABLED;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  <  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  <  =  DISABLED;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
644	[BUG]  [BUGGY]  return  c  >=  CR  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  CR  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  CR  &&  c  <  =  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
645	[BUG]  [BUGGY]  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
646	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
647	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
648	[BUG]  [BUGGY]  c  >>  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >>  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >>  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
649	[BUG]  [BUGGY]  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
650	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
651	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
652	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
653	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
654	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
655	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
656	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  else  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  else  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	327	40	replace
658	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  else  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  else  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  else  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	327	40	replace
659	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	327	50	replace
660	[BUG]  [BUGGY]  in.read();  return  c  <  LF  ||  c  ==  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	327	50	replace
661	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	282	None	replace
662	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	282	None	replace
663	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
664	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
665	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
666	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	75	None	replace
667	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
668	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
669	[BUG]  [BUGGY]  Encoder  c  =  in.read();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Encoder  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Encoder  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    Integer    c    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
670	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	141	None	add
671	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
672	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
673	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
674	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
675	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
676	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
677	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	141	None	add
678	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
679	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
680	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  &&  c  >  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
681	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  >  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  &&  c  >  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
682	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >  DISABLED;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
683	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >  DISABLED;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
684	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c!=  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
685	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c!=  CR;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c!=  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
686	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >  CR  +  1;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
687	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR  +  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >  CR  +  1;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
688	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  >  CR;  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  >  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	non-compiled	[CE]  illegal  start  of  expression	325	None	replace
689	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	328	None	replace
690	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	328	None	replace
691	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
692	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
693	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
694	[BUG]  [BUGGY]  return  c  ==  FINAL  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  FINAL  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  FINAL  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
695	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
696	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  DISABLED;	  return    c    <    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	237	51	replace
697	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  DISABLED;	  return    c    <    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	237	51	replace
698	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED!=  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  DISABLED!=  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	51	replace
699	[BUG]  [BUGGY]  return  DISABLED!=  c  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED!=  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  DISABLED!=  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	51	replace
700	[BUG]  [BUGGY]  return  DISABLED  >>  c  ||  c  ==  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED  >>  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  DISABLED  >>  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	307	None	replace
701	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED  ==  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  DISABLED  ==  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	40	replace
702	[BUG]  [BUGGY]  return  DISABLED  ==  c  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED  ==  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  DISABLED  ==  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	40	replace
703	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED  >=  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  DISABLED  >=  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	51	replace
704	[BUG]  [BUGGY]  return  DISABLED  >=  c  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  DISABLED  >=  c  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  DISABLED  >=  c  ||  c  ==  DISABLED;	  return    c    >>    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	307	51	replace
705	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	133	None	replace
706	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	133	None	replace
707	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	133	None	replace
708	[BUG]  [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
709	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
710	[BUG]  [BUGGY]  String  c  =  'n'  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  c  =  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  c  =  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
711	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	29	None	replace
712	[BUG]  [BUGGY]  char  c  =  'n';  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  'n';  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  'n';  int  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
713	[BUG]  [BUGGY]  char  c  =  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  DISABLED;  int  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
714	[BUG]  [BUGGY]  char  c  =  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
715	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  char  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	14	None	replace
716	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  String  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	14	None	replace
717	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	14	None	replace
718	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
719	[BUG]  [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  c  <  =  LF  ||  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  c  <  =  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  ||  c  ==  CR;  c  <  =  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
720	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
721	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
722	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  ||  c  ==  CR;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
723	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >  CR;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
724	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
725	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
726	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >=  DISABLED;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
727	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c!=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	281	51	replace
728	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c!=  DISABLED;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c!=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	281	51	replace
729	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	281	50	replace
730	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	281	50	replace
731	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
732	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
733	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
734	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  CR;  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  CR;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
735	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  c  ==  CR  &&  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
736	[BUG]  [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  c  ==  -1  ||  c  ==  -1;  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  c  ==  -1  ||  c  ==  -1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  -1  ||  c  ==  LF;  c  ==  -1  ||  c  ==  -1;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
737	[BUG]  [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  &&  c  ==  LF;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
738	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	92	None	replace
739	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	208	50	replace
740	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	208	50	replace
741	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
742	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
743	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  LF;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
744	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
745	[BUG]  [BUGGY]  Char  c  =  in.read();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Char  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
746	[BUG]  [BUGGY]  Character  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Character  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Character  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	211	None	replace
747	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	94	None	replace
748	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	94	None	replace
749	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
750	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	310	None	replace
751	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
752	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	310	None	replace
753	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
754	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
755	[BUG]  [BUGGY]  c  <  LF  &&  c  >=  CR;  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  LF  &&  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
756	[BUG]  [BUGGY]  c  <  =  LF  &&  c  >=  CR;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
757	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
758	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
759	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
760	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
761	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
762	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	110	None	replace
763	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
764	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  <  LF  ||  c  >  CR;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  <  LF  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    c  <  LF  ||  c  >  CR;	  	non-compiled	[CE]  >  expected	155	None	add
765	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	155	None	add
766	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	155	None	add
767	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
768	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
769	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
770	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  >=  0;  c++)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
771	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
772	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
773	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
774	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
775	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
776	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	123	None	replace
777	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c!=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	51	replace
778	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c!=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	51	replace
779	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  >=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	40	replace
780	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >=  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	40	replace
781	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c!=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	40	replace
782	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c!=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	152	40	replace
783	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  ==  LF;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    c  <  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  >  expected	218	None	add
784	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	218	None	add
785	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    c  <  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	218	None	add
786	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	218	None	add
787	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	218	None	add
788	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	218	None	add
789	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  >=  LF;  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  c  <  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    c  <  DISABLED  ||  c  >=  LF;	  	non-compiled	[CE]  >  expected	218	None	add
790	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	218	None	add
791	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
792	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
793	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
794	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
795	[BUG]  [BUGGY]  return  c  ==  DEFINITION  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DEFINITION  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DEFINITION  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DEFINITION  ||  c  ==  DISABLED;	  return    c    ==    DEFINITION    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DEFINITION	199	None	replace
796	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DEFINITION;  [CE]  cannot  find  symbol  DEFINITION  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DEFINITION;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DEFINITION;	  return    c    ==    DEFINITION    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DEFINITION	199	None	replace
797	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DEFINITION;  [CE]  cannot  find  symbol  DEFINITION  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DEFINITION;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DEFINITION;	  return    c    ==    DEFINITION    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DEFINITION	199	None	replace
798	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    c  >  LF  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	127	None	add
799	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	127	None	add
800	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	127	None	add
801	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	127	None	add
802	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	127	None	add
803	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >  LF  &&  c  >=  CR;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    c  >  LF  &&  c  >=  CR;	  	non-compiled	[CE]  not  a  statement	127	None	add
804	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	127	None	add
805	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  in.read();  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  in.read();  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
806	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	91	None	replace
807	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	91	None	replace
808	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
809	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
810	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
811	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
812	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
813	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	15	None	replace
814	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	15	None	replace
815	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	15	None	replace
816	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	15	None	replace
817	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
818	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENTS;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  COMMENTS  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENTS;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENTS;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  COMMENTS	15	None	replace
819	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	251	None	replace
820	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	251	None	replace
821	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	251	None	replace
822	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	251	None	replace
823	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	190	None	replace
824	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	190	None	replace
825	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
826	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
827	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	190	None	replace
828	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	190	None	replace
829	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	60	None	add
830	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	60	None	add
831	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
832	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
833	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	60	None	add
834	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
835	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
836	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	60	None	add
837	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
838	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC  &&  c  ==  CR;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC  &&  c  ==  CR;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
839	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
840	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
841	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	34	None	add
842	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	34	None	add
843	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	34	None	add
844	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	34	None	add
845	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	34	None	add
846	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	34	None	add
847	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();	  return    c!=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	89	None	replace
848	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	74	None	replace
849	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
850	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
851	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
852	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  incompatible  types  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  incompatible  types	205	None	replace
853	[BUG]  [BUGGY]  return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
854	[BUG]  [BUGGY]  return  c  ==  DR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  DR  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DR  ||  c  ==  DISABLED;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  DR	205	None	replace
855	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
856	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
857	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Document  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Document  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Document  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
858	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
859	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	271	50	replace
860	[BUG]  [BUGGY]  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	271	50	replace
861	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	271	None	replace
862	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	271	None	replace
863	[BUG]  [BUGGY]  return  c!=  LF  &&  c  <  =  DISABLED;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  <  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  <  =  DISABLED;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
864	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  LF  &&  c  >=  CR;	  return    c!=    LF    &&    c    <    =    CR;    	compilable	  [FE]  AssertionError  	261	51	replace
865	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  >=  CR;	  return    c!=    LF    &&    c    <    =    CR;    	compilable	  [FE]  AssertionError  	261	51	replace
866	[BUG]  [BUGGY]  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Integer  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
867	[BUG]  [BUGGY]  int  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
868	[BUG]  [BUGGY]  char  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
869	[BUG]  [BUGGY]  Enum.int  c  =  in.readInt();  [CE]  <identifier>  expected  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Enum.int  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Enum.int  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  <identifier>  expected	164	None	replace
870	[BUG]  [BUGGY]  Encoder  c  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Encoder  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Encoder  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
871	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
872	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
873	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	135	None	replace
874	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	135	None	replace
875	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  >=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  >=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  >=  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	135	None	replace
876	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DR;  [CE]  cannot  find  symbol  DR  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DR;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DR	97	None	replace
877	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  READY;  [CE]  cannot  find  symbol  READY  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  READY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  READY;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  READY	97	None	replace
878	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  READ;  [CE]  cannot  find  symbol  READ  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  READ;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  READ;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  READ	97	None	replace
879	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
880	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
881	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  >=  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  >=  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  >=  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
882	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  <  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  <  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  if(c  <  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
883	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
884	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
885	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
886	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
887	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
888	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	49	None	add
889	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	49	None	add
890	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	49	None	add
891	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	49	None	add
892	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
893	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
894	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
895	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >=  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  ')'  expected	81	None	replace
896	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
897	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
898	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
899	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
900	[BUG]  [BUGGY]  return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c!=  DISABLED;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
901	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Encoder.getInstance().readEndOfLine(c);  }  [CE]  cannot  find  symbol  Encoder  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Encoder.getInstance().readEndOfLine(c);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Encoder.getInstance().readEndOfLine(c);  }	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
902	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
903	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
904	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
905	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
906	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  &&  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
907	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	78	None	replace
908	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	78	None	replace
909	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	78	None	replace
910	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  DISABLED  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    c  <  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	153	None	add
911	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	153	None	add
912	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	153	None	add
913	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	153	None	add
914	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  DISABLED  ||  c  >=  DISABLED;  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    c  <  DISABLED  ||  c  >=  DISABLED;	  	non-compiled	[CE]  >  expected	153	None	add
915	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	add
916	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	153	None	add
917	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
918	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
919	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
920	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
921	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
922	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
923	[BUG]  [BUGGY]  return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
924	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
925	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
926	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
927	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
928	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
929	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
930	[BUG]  [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
931	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  RD;  [CE]  cannot  find  symbol  RD  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  RD;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  RD;	  return    c    ==    DR    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  RD	140	None	replace
932	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	51	replace
933	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	51	replace
934	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  <  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  <  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	43	replace
935	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  <  LF;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  <  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  <  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	43	replace
936	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  <  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  ||  c  <  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	43	replace
937	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  <  LF;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  <  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  <  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	43	replace
938	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  >=  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	51	replace
939	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  LF;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  >=  LF;	  return    c    <    LF    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	154	51	replace
940	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >>  LF;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >>  LF;	  return    c    <    LF    ||    c    >=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	160	None	replace
941	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	315	None	replace
942	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	315	None	replace
943	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	315	None	replace
944	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  <  DISABLED  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	242	51	replace
945	[BUG]  [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  <  DISABLED  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	242	51	replace
946	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  in.read();  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	242	None	replace
947	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  <  DISABLED  ||  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	242	51	replace
948	[BUG]  [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  <  DISABLED  ||  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	242	51	replace
949	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
950	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	317	None	replace
951	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreSurroundingSpaces)  {  return  false;  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&!ignoreSurroundingSpaces)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	317	None	replace
952	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	317	None	replace
953	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	317	None	replace
954	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
955	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c!=  DISABLED;  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
956	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  CR  &&  c  ==  LF;  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
957	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  DISABLED  &&  c  ==  CR;	  return    c    >    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	323	40	replace
958	[BUG]  [BUGGY]  return  c  >  DISABLED  &&  c  ==  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  DISABLED  &&  c  ==  CR;	  return    c    >    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	323	40	replace
959	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  DISABLED  ||  c  ==  DISABLED;	  return    c    >    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	323	40	replace
960	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  DISABLED  ||  c  ==  DISABLED;	  return    c    >    DISABLED    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	323	40	replace
961	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  >=  LF;  [CE]  illegal  start  of  expression  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  >=  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
962	[BUG]  [BUGGY]  return  c  <  =  CR  ||  c  >=  DISABLED;  [CE]  illegal  start  of  expression  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  CR  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  CR  ||  c  >=  DISABLED;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
963	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  ||  c  >=  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
964	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  >=  LF;  [FE]  AssertionError  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  >=  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
965	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  >>  LF;  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  >>  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
966	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	213	None	replace
967	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	80	50	replace
968	[BUG]  [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [FE]  AssertionError  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	80	50	replace
969	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_EmptyLines;  [CE]  cannot  find  symbol  COMMENT_EmptyLines  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_EmptyLines;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_EmptyLines;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_EmptyLines	51	None	replace
970	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENT_SURroundingSpaces;  [CE]  cannot  find  symbol  COMMENT_SURroundingSpaces  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENT_SURroundingSpaces;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  COMMENT_SURroundingSpaces;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_SURroundingSpaces	51	None	replace
971	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  ignoreEmptyLines;  [CE]  incomparable  types:  int  and  boolean  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  ignoreEmptyLines;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  ignoreEmptyLines;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  incomparable  types:  int  and  boolean	51	None	replace
972	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentEnd;  [CE]  cannot  find  symbol  commmentEnd  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentEnd;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentEnd;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  commmentEnd	51	None	replace
973	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
974	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
975	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
976	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
977	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  LF;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  LF;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  LF;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
978	[BUG]  [BUGGY]  c  >=  LF  &&  c  >=  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  >=  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  >=  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
979	[BUG]  [BUGGY]  c  >>  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >>  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >>  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
980	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	216	None	add
981	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	216	None	add
982	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	216	None	add
983	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	216	None	add
984	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	216	None	add
985	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	216	None	add
986	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	216	None	add
987	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	216	None	add
988	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
989	[BUG]  [BUGGY]  return  expected  result(c)  ==  CR  ||  c  ==  LF;  [CE]  ';'  expected  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  expected  result(c)  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  expected  result(c)  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  ';'  expected	206	None	replace
990	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Records  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Records  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Records  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
991	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
992	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
993	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
994	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
995	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
996	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
997	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
998	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'n'  &&  c  ==  DISABLED;	  return    c!=    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	104	40	replace
999	[BUG]  [BUGGY]  return  c!=  'n'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'n'  &&  c  ==  DISABLED;	  return    c!=    'n'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	104	40	replace
1000	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n';  }  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n';  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n';  }	  return    c!=    'n'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	104	None	replace
1001	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1002	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1003	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1004	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [CE]  ';'  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
1005	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1006	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	316	40	replace
1007	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  {  return  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	316	40	replace
1008	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	263	None	replace
1009	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	263	None	replace
1010	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	263	None	replace
1011	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c!=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    c;    	compilable	  [FE]  AssertionError  	53	51	replace
1012	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c!=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    c;    	compilable	  [FE]  AssertionError  	53	51	replace
1013	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  ==  CR;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    c  <  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  >  expected	183	None	add
1014	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	183	None	add
1015	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	183	None	add
1016	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  >=  CR;  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    c  <  DISABLED  &&  c  >=  CR;	  	non-compiled	[CE]  >  expected	183	None	add
1017	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  ||  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    c  <  DISABLED  ||  c  ==  CR;	  	non-compiled	[CE]  >  expected	183	None	add
1018	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
1019	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
1020	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	183	None	add
1021	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  LF  ||  c  ==  DISABLED;	  return    c    >=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	71	51	replace
1022	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  ||  c  ==  DISABLED;	  return    c    >=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	71	51	replace
1023	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  LF  ||  c  ==  CR;	  return    c    >=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	71	51	replace
1024	[BUG]  [BUGGY]  return  c  >  LF  ||  c  ==  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  ||  c  ==  CR;	  return    c    >=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	71	51	replace
1025	[BUG]  [BUGGY]  return  c  <  =  DISABLED  &&  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  &&  c  ==  CR;	  return    c    <    DISABLED    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	184	None	replace
1026	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
1027	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
1028	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
1029	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  CR)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	175	None	replace
1030	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLE  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
1031	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	103	None	add
1032	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	103	None	add
1033	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	103	None	add
1034	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
1035	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
1036	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	103	None	add
1037	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
1038	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
1039	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	90	51	replace
1040	[BUG]  [BUGGY]  in.read();  return  c!=  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	90	51	replace
1041	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	232	None	replace
1042	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	232	None	replace
1043	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	232	None	replace
1044	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	232	None	replace
1045	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	270	50	replace
1046	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	270	50	replace
1047	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	270	50	replace
1048	[BUG]  [BUGGY]  in.read();  return  c  ==  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	270	50	replace
1049	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	270	None	replace
1050	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	270	None	replace
1051	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	257	None	replace
1052	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	257	None	replace
1053	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	257	None	replace
1054	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  FINAL;  if(c  ==  DISABLED  ||  c  ==  FINAL)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  FINAL  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  FINAL;  if(c  ==  DISABLED  ||  c  ==  FINAL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  FINAL;  if(c  ==  DISABLED  ||  c  ==  FINAL)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  FINAL	257	None	replace
1055	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1056	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1057	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1058	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1059	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1060	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1061	[BUG]  [BUGGY]  c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1062	[BUG]  [BUGGY]  char  c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1063	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  LF;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  incompatible  types	296	None	replace
1064	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	228	None	replace
1065	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1066	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1067	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1068	[BUG]  [BUGGY]  c  =  c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1069	[BUG]  [BUGGY]  c  =  c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1070	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1071	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
1072	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
1073	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
1074	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
1075	[BUG]  [BUGGY]  char  c  =  c  <  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c  <  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c  <  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	231	None	replace
1076	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	231	None	replace
1077	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1078	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1079	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1080	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1081	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	122	None	replace
1082	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1083	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c!=    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	209	None	replace
1084	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	274	None	replace
1085	[BUG]  [BUGGY]  in.lookAhead()  ==  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.lookAhead()  ==  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.lookAhead()  ==  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    in.lookAhead()    ==    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  not  a  statement	294	None	replace
1086	[BUG]  [BUGGY]  in.lookAhead()  ==  LF)  {  return  c  >>  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.lookAhead()  ==  LF)  {  return  c  >>  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.lookAhead()  ==  LF)  {  return  c  >>  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    in.lookAhead()    ==    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  not  a  statement	294	None	replace
1087	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  CR  &&  c  ==  LF;	  return    c    >=    LF    &&    c    ==    CR;    in.lookAhead()    ==    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	294	40	replace
1088	[BUG]  [BUGGY]  return  c  >=  CR  &&  c  ==  LF;  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  CR  &&  c  ==  LF;	  return    c    >=    LF    &&    c    ==    CR;    in.lookAhead()    ==    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	294	40	replace
1089	[BUG]  [BUGGY]  return  c  ==  DR  &&  c  ==  DISABLED;  [CE]  cannot  find  symbol  DR  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DR  &&  c  ==  DISABLED;	  return    c    ==    DR    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  DR	98	None	replace
1090	[BUG]  [BUGGY]  return  c  ==  RECORD  &&  c  ==  LF;  [CE]  cannot  find  symbol  RECORD  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  RECORD  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  RECORD  &&  c  ==  LF;	  return    c    ==    DR    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  RECORD	98	None	replace
1091	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DR;  [CE]  cannot  find  symbol  DR  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DR;	  return    c    ==    DR    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  DR	98	None	replace
1092	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c!=  LF;  }  else  if(c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c!=  LF;  }  else  if(c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c!=  LF;  }  else  if(c  ==  DISABLED)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  missing  return  statement	1	None	replace
1093	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1094	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1095	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	171	None	replace
1096	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	171	None	replace
1097	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	147	None	replace
1098	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	147	None	replace
1099	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
1100	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'n'    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	102	None	replace
1101	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  }  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  }	  return    c    ==    'n'    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	102	None	replace
1102	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c!=  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  if(c!=  DISABLED)  {  return  false;  }	  return    c    ==    'n'    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	102	None	replace
1103	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >>  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >>  LF;	  return    c!=    LF    &&    c    >=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	260	None	replace
1104	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1105	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1106	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1107	[BUG]  [BUGGY]  return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1108	[BUG]  [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1109	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1110	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
1111	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
1112	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
1113	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  LF  &&  c  ==  LF;	  return    c    >    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	128	6	replace
1114	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  LF;	  return    c    >    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	128	6	replace
1115	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	259	None	add
1116	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	259	None	add
1117	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	259	None	add
1118	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	259	None	add
1119	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
1120	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	259	None	add
1121	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c!=  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c!=  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c!=  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
1122	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
1123	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	161	None	replace
1124	[BUG]  [BUGGY]  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	161	None	replace
1125	[BUG]  [BUGGY]  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  &&  c  ==  LF)  {  return  c  ==  CR  ||  c  ==  LF;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	161	None	replace
1126	[BUG]  [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  -1  ||  c  ==  LF;  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	161	None	replace
1127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	335	49	replace
1128	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	335	49	replace
1129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	12	6	replace
1130	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	12	6	replace
1131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	12	6	replace
1132	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	compilable	  [FE]  AssertionError  	12	6	replace
1133	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  unreachable  statement	136	None	replace
1134	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  unreachable  statement	136	None	replace
1135	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	136	None	replace
1136	[BUG]  [BUGGY]  while(c  >=  LF  &&  c  ==  CR)  {  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  >=  LF  &&  c  ==  CR)  {  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  >=  LF  &&  c  ==  CR)  {  c  =  in.read();	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	214	None	replace
1137	[BUG]  [BUGGY]  while(c  >=  LF  &&  c!=  CR)  {  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  >=  LF  &&  c!=  CR)  {  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  >=  LF  &&  c!=  CR)  {  c  =  in.read();	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	214	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  &&  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	40	replace
1139	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  &&  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	40	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  2;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  +  2;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1141	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  2;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  +  2;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  3;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  +  3;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1143	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  3;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  3;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  +  3;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  >=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1145	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  >=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
1146	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c!=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	51	replace
1147	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED  +  1;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c!=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	51	replace
1148	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	40	replace
1149	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	40	replace
1150	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.read();  [CE]  unreachable  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  in.read();	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1151	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.read();  [CE]  unreachable  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  in.read();	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1152	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1153	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  [CE]  unreachable  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1154	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1155	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
1156	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
1157	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	191	None	replace
1158	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	191	None	replace
1159	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1160	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1161	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	191	None	replace
1162	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	191	None	replace
1163	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  CR  =  in.read();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  String  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  incompatible  types	238	None	replace
1164	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  CR  =  in.read();  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  String  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  incompatible  types	238	None	replace
1165	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  CR  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  CR  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  CR	238	None	replace
1166	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	238	None	replace
1167	[BUG]  [BUGGY]  String  CR  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  CR  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  CR  =  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  incompatible  types	238	None	replace
1168	[BUG]  [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	238	None	replace
1169	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	268	None	replace
1170	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	268	None	replace
1171	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	268	None	replace
1172	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	268	None	replace
1173	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	322	None	add
1174	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  >  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  >  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    c  >  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	322	None	add
1175	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	322	None	add
1176	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  >  DISABLED  ||  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  c  >  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    c  >  DISABLED  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	322	None	add
1177	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	322	None	add
1178	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
1179	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
1180	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
1181	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1182	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1183	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	223	None	replace
1184	[BUG]  [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	223	None	replace
1185	[BUG]  [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1186	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  illegal  start  of  expression  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1187	[BUG]  [BUGGY]  c  <  =  LF  &&  c  >=  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  >=  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  >=  CR;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
1188	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
1189	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
1190	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	304	None	add
1191	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	304	None	add
1192	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	304	None	add
1193	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  'N'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'N'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	304	None	add
1194	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  'N'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	304	None	add
1195	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	304	None	add
1196	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	304	None	add
1197	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	304	None	add
1198	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CSSV;  [CE]  cannot  find  symbol  CSSV  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CSSV;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CSSV;	  return    c    ==    DISABLED    ||    c    ==    CSSV;    	non-compiled	[CE]  cannot  find  symbol  CSSV	57	None	replace
1199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1200	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1201	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1202	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1204	[BUG]  [BUGGY]  return  c  >=  CR  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  CR  &&  c  >=  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1206	[BUG]  [BUGGY]  return  c!=  CR  &&  c  >=  DISABLED;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  &&  c  >=  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	40	replace
1207	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  CR  ||  c  ==  LF;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	51	replace
1208	[BUG]  [BUGGY]  return  c!=  CR  ||  c  ==  LF;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  ||  c  ==  LF;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	51	replace
1209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  CR  &&  c!=  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	37	replace
1210	[BUG]  [BUGGY]  return  c  ==  CR  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c!=  DISABLED;	  return    c!=    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	65	37	replace
1211	[BUG]  [BUGGY]  return  c!=  CR  &&  c  <  =  LF;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  <  =  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  CR  &&  c  <  =  LF;	  return    c!=    CR    &&    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1212	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1213	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	252	None	replace
1214	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1215	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreSurroundingSpaces)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreSurroundingSpaces)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1216	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	252	None	replace
1217	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	93	50	replace
1219	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  else  {  in.read();  return  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c!=    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	93	50	replace
1220	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  DISABLED  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
1221	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c!=  DISABLED  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c!=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c!=  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
1222	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  DISABLED  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
1223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >  LF;	  return    c    <    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	219	51	replace
1224	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >  LF;	  return    c    <    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	219	51	replace
1225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  &&  c  ==  LF;	  return    c    <    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	219	6	replace
1226	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  LF;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  &&  c  ==  LF;	  return    c    <    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	219	6	replace
1227	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  LF;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  ==  LF;	  return    c    <    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
1228	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	230	None	replace
1229	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	226	None	replace
1230	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
1231	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	226	None	replace
1232	[BUG]  [BUGGY]  if(c  <  =  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
1233	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	226	None	replace
1234	[BUG]  [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  if(c  <  =  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  if(c  <  =  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  ||  c  ==  CR;  if(c  <  =  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	330	None	replace
1235	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
1236	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	330	None	replace
1237	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
1238	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
1239	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
1240	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
1241	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	179	None	add
1242	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	179	None	add
1243	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	179	None	add
1244	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1245	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1246	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1247	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1248	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1249	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	212	None	replace
1250	[BUG]  [BUGGY]  while(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  ||  c  ==  CR;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1251	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >=  DISABLED;  int  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	150	None	replace
1252	[BUG]  [BUGGY]  while(c  <  LF  &&  c  >=  CR)  {  return  c  <  LF  ||  c  ==  CR;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  LF  &&  c  >=  CR)  {  return  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  LF  &&  c  >=  CR)  {  return  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
1253	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1254	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1255	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
1256	[BUG]  [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	225	None	replace
1257	[BUG]  [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  COMMENT)  {  if(in.read()  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1258	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [CE]  illegal  start  of  expression  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
1259	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalArgumentException  	275	53	replace
1260	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalArgumentException  	275	53	replace
1261	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalStateException  	275	53	replace
1262	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	compilable	  [FE]  IllegalStateException  	275	53	replace
1263	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  ==  DISABLED;	  return    c    <    =    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	288	None	replace
1264	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  <  =  LF;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  <  =  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  <  =  LF;	  return    c    ==    CR    &&    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  CR  &&  c  >=  DISABLED;	  return    c    ==    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	22	40	replace
1266	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  >=  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  >=  DISABLED;	  return    c    ==    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	22	40	replace
1267	[BUG]  [BUGGY]  long  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  long  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	long  c  =  in.read();	  return    c    >=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	246	None	replace
1268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1269	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1271	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1273	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1275	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED  &&  c  ==  CR;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1277	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  commmentStart;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1279	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1281	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
1282	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	198	None	replace
1283	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  COMMENT_START  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	198	None	replace
1284	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	198	None	replace
1285	[BUG]  [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  COMMENT_END  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_END  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_END	198	None	replace
1286	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
1287	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
1288	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
1289	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	106	None	add
1290	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	106	None	add
1291	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
1292	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	106	None	add
1293	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
1294	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
1295	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	106	None	add
1296	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.skipChildren();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.skipChildren();  }	  	non-compiled	[CE]  cannot  find  symbol	106	None	add
1297	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1298	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1299	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1300	[BUG]  [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1301	[BUG]  [BUGGY]  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1302	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1303	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	54	None	add
1304	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	add
1305	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	add
1306	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	54	None	add
1307	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	add
1308	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	58	None	add
1309	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	58	None	add
1310	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
1311	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	58	None	add
1312	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
1313	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	58	None	add
1314	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
1315	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	58	None	add
1316	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	52	None	add
1317	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	52	None	add
1318	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	52	None	add
1319	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
1320	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
1321	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	add
1322	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
1323	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
1324	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1325	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1326	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readFully();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1327	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1328	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  >=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
1329	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  ';'  expected  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	121	None	replace
1330	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'r'  &&  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	40	replace
1331	[BUG]  [BUGGY]  return  c  ==  'r'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'r'  &&  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	40	replace
1332	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'r'  ||  c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  return    c    ==    'r'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	303	None	replace
1333	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'r'  ||  c!=  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
1334	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c!=  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'r'  ||  c!=  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
1335	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
1336	[BUG]  [BUGGY]  return  c!=  'r'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
1337	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'r'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	303	None	replace
1338	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	303	48	replace
1339	[BUG]  [BUGGY]  return  c  >=  'r'  ||  c  ==  DISABLED;  [FE]  ArrayIndexOutOfBoundsException  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	303	48	replace
1340	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
1341	[BUG]  [BUGGY]  char  c  =  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	240	None	replace
1342	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
1343	[BUG]  [BUGGY]  char  c  =  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	240	None	replace
1344	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
1345	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
1346	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1347	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  ';'  expected	95	None	replace
1348	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CR;  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1349	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1350	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentStart;  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1351	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  missing  return  statement	332	None	replace
1352	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1353	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1354	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_LINE;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_LINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DETERMINISTIC_LINE;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1355	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC_LINE;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DETERMINISTIC_LINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DETERMINISTIC_LINE;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1356	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  &&  c  ==  CR;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  &&  c  ==  CR;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1357	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c!=  DISABLED;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c!=  DISABLED;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1358	[BUG]  [BUGGY]  return  c!=  DETERMINISTIC_LINE  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DETERMINISTIC_LINE  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DETERMINISTIC_LINE  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
1359	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
1360	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  0  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
1361	[BUG]  [BUGGY]  while(c  <  0)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  0)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  0)  {  return  c  ==  LF  &&  c  ==  CR;  int  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
1362	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  int  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  0  ||  c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  0  ||  c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  int  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
1363	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  >=  DISABLED  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	293	50	replace
1364	[BUG]  [BUGGY]  in.read();  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  >=  DISABLED  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	293	50	replace
1365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	293	50	replace
1366	[BUG]  [BUGGY]  in.read();  return  c  >=  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	293	50	replace
1367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'N'  ||  c!=  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1368	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c!=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'N'  ||  c!=  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1369	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'N'  &&  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1370	[BUG]  [BUGGY]  return  c  ==  'N'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'N'  &&  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1372	[BUG]  [BUGGY]  return  c!=  'N'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1373	[BUG]  [BUGGY]  if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'N'  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }	  return    c    ==    'N'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	305	None	replace
1374	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1375	[BUG]  [BUGGY]  return  c  >=  'N'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	51	replace
1376	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'N'  ||  c  >=  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1377	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  >=  DISABLED;  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'N'  ||  c  >=  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1378	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	269	None	replace
1379	[BUG]  [BUGGY]  c  +=  c  >>  LF;  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  +=  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  +=  c  >>  LF;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	247	None	replace
1380	[BUG]  [BUGGY]  c  +=  c  >=  LF;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  +=  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  +=  c  >=  LF;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1381	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1382	[BUG]  [BUGGY]  c  +=  c  ==  LF;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  +=  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  +=  c  ==  LF;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1383	[BUG]  [BUGGY]  c  +=  c  >>  CR;  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  +=  c  >>  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  +=  c  >>  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	247	None	replace
1384	[BUG]  [BUGGY]  c  +=  c  >=  CR;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  +=  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  +=  c  >=  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1385	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  +=  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  +=  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c!=  DISABLED;  c  +=  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1386	[BUG]  [BUGGY]  if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	336	None	replace
1387	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;	  return    c    ==    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	20	40	replace
1388	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;	  return    c    ==    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	20	40	replace
1389	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c  ==  Float.MIN_VALUE;	  return    c    ==    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	20	40	replace
1390	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.MIN_VALUE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  Float.MIN_VALUE;	  return    c    ==    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	20	40	replace
1391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  ==  DISABLED  ||  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	111	50	replace
1392	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  ||  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	111	50	replace
1393	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1394	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c,  in);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c,  in);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(c,  in);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1395	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(in,  c);  [CE]  cannot  find  symbol  Encoder  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(in,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  Encoder.getInstance().readEndOfLine(in,  c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1396	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [CE]  cannot  find  symbol  Encoder  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1397	[BUG]  [BUGGY]  return  in  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [CE]  incomparable  types:  ExtendedBufferedReader  and  char  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  in  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  in  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  incomparable  types:  ExtendedBufferedReader  and  char	204	None	replace
1398	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  }  [CE]  cannot  find  symbol  Encoder  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(in,  c);  }	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1399	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);  [CE]  cannot  find  symbol  Encoder  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1400	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  LF  ||  c  ==  DISABLED;	  return    c!=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	67	51	replace
1401	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  ||  c  ==  DISABLED;	  return    c!=    LF    ||    c    ==    CR;    	compilable	  [FE]  AssertionError  	67	51	replace
1402	[BUG]  [BUGGY]  return  c  >>  LF  &&  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  LF  &&  c  ==  CR;	  return    c!=    LF    ||    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	67	None	replace
1403	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  >=  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  <  DISABLED  ||  c  >=  DISABLED;	  	non-compiled	[CE]  >  expected	159	None	add
1404	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  <  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	159	None	add
1405	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c!=  DISABLED;  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  <  DISABLED  ||  c!=  DISABLED;	  	non-compiled	[CE]  >  expected	159	None	add
1406	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	159	None	add
1407	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	159	None	add
1408	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  >>  DISABLED;  [CE]  >  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  DISABLED  ||  c  >>  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  <  DISABLED  ||  c  >>  DISABLED;	  	non-compiled	[CE]  >  expected	159	None	add
1409	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	341	None	replace
1410	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	44	None	add
1411	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	44	None	add
1412	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	44	None	add
1413	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	add
1414	[BUG]  [BUGGY]  return  c  <  =  CR  ||  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  CR  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  CR  ||  c  ==  DISABLED;	  return    c    <    =    LF    ||    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1415	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	23	None	add
1416	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	23	None	add
1417	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
1418	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
1419	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
1420	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
1421	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
1422	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
1423	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  }  else  {  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
1424	[BUG]  [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF)  {  return  c!=  LF;  }  else  {  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
1425	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >>  LF;  }  else  {  in.read();  }  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >>  LF;  }  else  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >>  LF;  }  else  {  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  incompatible  types	215	None	replace
1426	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  &&  c  ==  LF;  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1427	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1428	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }  [CE]  cannot  find  symbol  Context  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1429	[BUG]  [BUGGY]  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1430	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Context  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1431	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
1432	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	193	None	replace
1433	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	193	None	replace
1434	[BUG]  [BUGGY]  if(c  >=  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  CR)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	193	None	replace
1435	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  unreachable  statement	233	None	replace
1436	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1437	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1438	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c!=  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1439	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1440	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1441	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1442	[BUG]  [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1443	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c!=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1444	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  CR)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  CR)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  CR)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1445	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	42	None	add
1446	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	42	None	add
1447	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	42	None	add
1448	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  commmentStart;  ++c)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	add
1449	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	42	None	add
1450	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	42	None	add
1451	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	151	None	add
1452	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	151	None	add
1453	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	151	None	add
1454	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	151	None	add
1455	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	151	None	add
1456	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	151	None	add
1457	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	151	None	add
1458	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	151	None	add
1459	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	in.read();  return  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	229	50	replace
1460	[BUG]  [BUGGY]  in.read();  return  c  >=  DISABLED  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	compilable	  [FE]  AssertionError  	229	50	replace
1461	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    >=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	229	None	replace
1462	[BUG]  [BUGGY]  char  c  =  c.charAt(0);  return  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  c.charAt(0);  return  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  c.charAt(0);  return  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	314	None	replace
1463	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  else  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	314	None	replace
1464	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1465	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1466	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1467	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1468	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1469	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }  else  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1470	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  DISABLED  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  DISABLED  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1471	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1472	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1473	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1474	[BUG]  [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  &&  c  ==  LF;  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1475	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1476	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1477	[BUG]  [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  &&  c  ==  LF;  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  &&  c  ==  LF;  c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1478	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1479	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  =  LF  &&  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  =  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  c  =  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	273	None	replace
1480	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1481	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CR;  c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1482	[BUG]  [BUGGY]  (char)c;  Integer  c  =  in.read();  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  (char)c;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	(char)c;  Integer  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  not  a  statement	255	None	replace
1483	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  CR  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
1484	[BUG]  [BUGGY]  String  c  =  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  c  =  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  c  =  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
1485	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	c  =  in.read();  return  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	264	49	replace
1486	[BUG]  [BUGGY]  c  =  in.read();  return  c!=  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  in.read();  return  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  in.read();  return  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	compilable	  [FE]  AssertionError  	264	49	replace
1487	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	38	None	add
1488	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1489	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1490	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1491	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	38	None	add
1492	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(c!=  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1493	[BUG]  [BUGGY]  return  c  <  =  LF  &&  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  &&  c  ==  DISABLED;	  return    c    <    =    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1494	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  LF  &&  c  ==  LF;	  return    c    <    =    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	68	40	replace
1495	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  LF;  [FE]  AssertionError  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  ==  LF;	  return    c    <    =    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	68	40	replace
1496	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LINE;  [CE]  cannot  find  symbol  LINE  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LINE;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  LINE	137	None	replace
1497	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  PUBLIC;  [CE]  cannot  find  symbol  PUBLIC  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  PUBLIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  PUBLIC;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  PUBLIC	137	None	replace
1498	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  END;  [CE]  cannot  find  symbol  END  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  END;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  END	137	None	replace
1499	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  SUPERLINE;  [CE]  cannot  find  symbol  SUPERLINE  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  SUPERLINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  SUPERLINE;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  SUPERLINE	137	None	replace
1500	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_LINE;  [CE]  cannot  find  symbol  COMMENT_LINE  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_LINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_LINE;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_START;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_LINE	48	None	replace
1501	[BUG]  [BUGGY]  return  c  ==  LC  ||  c  ==  LC;  [CE]  cannot  find  symbol  LC  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LC  ||  c  ==  LC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LC  ||  c  ==  LC;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  LC	289	None	replace
1502	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	36	None	add
1503	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
1504	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
1505	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	add
1506	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
1507	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1508	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1509	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1510	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1511	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1512	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
1513	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
1514	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF;  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
1515	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
1516	[BUG]  [BUGGY]  return  c  <  =  'n'  ||  c  ==  DISABLED;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  'n'  ||  c  ==  DISABLED;	  return    c    <    'n'    ||    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	182	None	replace
1517	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  Integer  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  Integer  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  Integer  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	255	None	replace
1518	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	255	None	replace
1519	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	255	None	replace
1520	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  Integer  c  =  in.read();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  Integer  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  Integer  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	255	None	replace
1521	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
1522	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
1523	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
1524	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c!=  DISABLED;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
1525	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  =  LF;  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  =  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  =  LF;	  return    c    <    =    LF    ||    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
1526	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1527	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1528	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1529	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1530	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1531	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
1532	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	322	None	add
1533	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	322	None	add
1534	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	322	None	add
1535	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	322	None	add
1536	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	322	None	add
1537	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	94	None	replace
1538	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >>  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	94	None	replace
1539	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  <  =  CR;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1540	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  <  =  CR;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1541	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  <  =  CR;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1542	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c!=  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	198	None	replace
1543	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	106	None	add
1544	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	add
1545	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	add
1546	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	add
1547	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	106	None	add
1548	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  CR  ||  c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1549	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  LF)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1550	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1551	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1552	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1553	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1554	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1555	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
1556	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
1557	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1558	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  unreachable  statement	13	None	replace
1559	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1560	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
1561	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
1562	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
1563	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1564	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1565	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
1566	[BUG]  [BUGGY]  return  c  <  =  LF  &&  c  >=  DISABLED;  [CE]  illegal  start  of  expression  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  &&  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  &&  c  >=  DISABLED;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
1567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  ||  c  >=  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
1568	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  >=  LF;  [FE]  AssertionError  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  >=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  >=  LF;	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
1569	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	add
1570	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	add
1571	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	add
1572	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	add
1573	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	314	None	replace
1574	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	314	None	replace
1575	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	314	None	replace
1576	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	314	None	replace
1577	[BUG]  [BUGGY]  c  =  DISABLED  ||  c  ==  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	314	None	replace
1578	[BUG]  [BUGGY]  return  c  [Delete]  DISABLED  &&  c  ==  DISABLED;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  [Delete]  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  [Delete]  DISABLED  &&  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  ';'  expected	43	None	replace
1579	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1580	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1581	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1582	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1583	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
1584	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	144	None	replace
1585	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	144	None	replace
1586	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	34	None	add
1587	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	add
1588	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	add
1589	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	add
1590	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	218	None	add
1591	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
1592	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
1593	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
1594	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(c  ==  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
1595	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  return  c  <  LF  ||  c  ==  DIS	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	148	None	replace
1596	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
1597	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	82	None	replace
1598	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	82	None	replace
1599	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	82	None	replace
1600	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	223	None	replace
1601	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1602	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	223	None	replace
1603	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	223	None	replace
1604	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1605	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	40	None	add
1606	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	40	None	add
1607	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1608	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    in.read();	  	non-compiled	[CE]  unreachable  statement	40	None	add
1609	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	270	None	replace
1610	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	270	None	replace
1611	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	270	None	replace
1612	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	270	None	replace
1613	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	270	None	replace
1614	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.lookAhead();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.lookAhead();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  in.lookAhead();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	270	None	replace
1615	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
1616	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	109	None	replace
1617	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
1618	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1619	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1620	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1621	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1622	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
1623	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	124	None	add
1624	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	124	None	add
1625	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	124	None	add
1626	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	124	None	add
1627	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	124	None	add
1628	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	264	None	replace
1629	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	264	None	replace
1630	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	264	None	replace
1631	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	331	None	replace
1632	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	331	None	replace
1633	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	331	None	replace
1634	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	331	None	replace
1635	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
1636	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1637	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1638	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
1639	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DIS  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  DIS	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1640	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMmmentStart;  [CE]  cannot  find  symbol  COMmmentStart  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMmmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMmmentStart;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_START;    	non-compiled	[CE]  cannot  find  symbol  COMmmentStart	48	None	replace
1641	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_HEALTH;  [CE]  cannot  find  symbol  COMMENT_HEALTH  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_HEALTH;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_HEALTH;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_START;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_HEALTH	48	None	replace
1642	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_START  +  1;  [CE]  cannot  find  symbol  COMMENT_START  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_START  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_START  +  1;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_START;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	48	None	replace
1643	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	122	None	replace
1644	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	122	None	replace
1645	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
1646	[BUG]  [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	122	None	replace
1647	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	274	None	replace
1648	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	249	None	replace
1649	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	249	None	replace
1650	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	249	None	replace
1651	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	266	None	replace
1652	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF;  if(c!=  DISABLED)  {  c  =  in.read();  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	266	None	replace
1653	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1654	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true  [CE]  ';'  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
1655	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true  [CE]  ';'  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentEnd)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
1656	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentEnd  ==  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentEnd  ==  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentEnd  ==  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
1657	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >>  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >>  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >>  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
1658	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read(c);  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read(c);  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read(c);  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
1659	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1660	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1661	[BUG]  [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1662	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
1663	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
1664	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  [CE]  unreachable  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1665	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.read();  [CE]  unreachable  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  in.read();	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1666	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.read();  [CE]  unreachable  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  in.read();	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
1667	[BUG]  [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1668	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1669	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	309	None	replace
1670	[BUG]  [BUGGY]  return  c  >>  DISABLED  &&  c!=  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  &&  c!=  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  &&  c!=  LF;	  return    c    >=    LF    &&    c!=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	125	None	replace
1671	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  in.read();	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  unreachable  statement	248	None	replace
1672	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  in.read();	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  unreachable  statement	248	None	replace
1673	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  in.read();	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  unreachable  statement	248	None	replace
1674	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  in.lookAhead()  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  in.lookAhead()  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	compilable	  [FE]  AssertionError  	248	37	replace
1675	[BUG]  [BUGGY]  return  in.lookAhead()  >=  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  in.lookAhead()  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  in.lookAhead()  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    in.read();    	compilable	  [FE]  AssertionError  	248	37	replace
1676	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	291	None	replace
1677	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	291	None	replace
1678	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	291	None	replace
1679	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1680	[BUG]  [BUGGY]  if(c  >=  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	193	None	replace
1681	[BUG]  [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	193	None	replace
1682	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
1683	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  +=  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  +=  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  CR;  c  +=  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
1684	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  +=  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  +=  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  +=  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1685	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  +=  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    +=    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	247	None	replace
1686	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  return  c  >  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  return  c  >  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  return  c  >  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
1687	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
1688	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
1689	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	257	None	replace
1690	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
1691	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	257	None	replace
1692	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
1693	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  END;  [CE]  cannot  find  symbol  END  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  END;	  return    c!=    DISABLED    &&    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  END	39	None	replace
1694	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'r'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	49	replace
1695	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'r'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	49	replace
1696	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'r'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'r'  &&  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	40	replace
1697	[BUG]  [BUGGY]  return  c!=  'r'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'r'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'r'  &&  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	40	replace
1698	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	129	None	replace
1699	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  c  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	129	None	replace
1700	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  false;  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	129	None	replace
1701	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
1702	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c!=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c!=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c!=  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c!=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	262	None	replace
1703	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	177	None	add
1704	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	177	None	add
1705	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	177	None	add
1706	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	177	None	add
1707	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  in);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
1708	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  LF  ||  c  >  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
1709	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  >  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  ||  c  >  CR;	  return    c    <    LF    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	156	51	replace
1710	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	265	None	replace
1711	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
1712	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	19	None	add
1713	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
1714	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	19	None	add
1715	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
1716	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
1717	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LB;  [CE]  cannot  find  symbol  LB  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LB;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LB;	  return    c    ==    DR    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  LB	98	None	replace
1718	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	194	None	replace
1719	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	77	None	replace
1720	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	159	None	add
1721	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	159	None	add
1722	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	159	None	add
1723	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    in.read();	  	non-compiled	[CE]  unreachable  statement	159	None	add
1724	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
1725	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'N'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1726	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'N'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
1727	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	45	replace
1728	[BUG]  [BUGGY]  return  c  <  'N'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'N'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'N'  ||  c  ==  DISABLED;	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	45	replace
1729	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	342	None	replace
1730	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	342	None	replace
1731	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CHAR;  [CE]  cannot  find  symbol  CHAR  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CHAR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CHAR;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  CHAR	137	None	replace
1732	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
1733	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
1734	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	83	None	replace
1735	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	23	None	add
1736	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	23	None	add
1737	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	23	None	add
1738	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	23	None	add
1739	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	23	None	add
1740	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
1741	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  DISABLED;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
1742	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
1743	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
1744	[BUG]  [BUGGY]  return  c  <  0  ||  c  ==  0;  c  <  0  ||  c  ==  0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  0  ||  c  ==  0;  c  <  0  ||  c  ==  0;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  0  ||  c  ==  0;  c  <  0  ||  c  ==  0;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
1745	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	123	None	replace
1746	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  >  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  >  expected	123	None	replace
1747	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  >  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  >  expected	123	None	replace
1748	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
1749	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  EMPTY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  EMPTY;	  return    c    ==    DISABLED    ||    c    ==    COMMENTStart;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	202	None	replace
1750	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	280	None	replace
1751	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	280	None	replace
1752	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	280	None	replace
1753	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	280	None	replace
1754	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1755	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1756	[BUG]  [BUGGY]  c  =  c  +  LF;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  +  LF;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  +  LF;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1757	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
1758	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
1759	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  &&  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	41	40	replace
1760	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  &&  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	41	40	replace
1761	[BUG]  [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
1762	[BUG]  [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	222	None	replace
1763	[BUG]  [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  &&  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	222	None	replace
1764	[BUG]  [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	150	None	replace
1765	[BUG]  [BUGGY]  if(c  <  LF)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	150	None	replace
1766	[BUG]  [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	150	None	replace
1767	[BUG]  [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	150	None	replace
1768	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
1769	[BUG]  [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
1770	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
1771	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	315	None	replace
1772	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	315	None	replace
1773	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1774	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
1775	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	136	None	replace
1776	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	136	None	replace
1777	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
1778	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	51	replace
1779	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	51	replace
1780	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	51	replace
1781	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  commmentStart;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  AssertionError  	47	51	replace
1782	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
1783	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	308	None	replace
1784	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	240	None	replace
1785	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
1786	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
1787	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
1788	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
1789	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
1790	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
1791	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
1792	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1793	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  LF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  <  =  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  type	332	None	replace
1794	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_START;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_START;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_START;  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1795	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENTStart;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENTStart;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENTStart;  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1796	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
1797	[BUG]  [BUGGY]  return  c  >>  DISABLED  &&  c  ==  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  &&  c  ==  LF;	  return    c    >=    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	217	None	replace
1798	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1799	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1800	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  ==  DISABLED;  in.read();	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  unreachable  statement	215	None	replace
1801	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Integer  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
1802	[BUG]  [BUGGY]  char  c  =  in.readChar();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  in.readChar();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  in.readChar();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
1803	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	101	None	add
1804	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	101	None	add
1805	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	101	None	add
1806	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
1807	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	101	None	add
1808	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	38	None	add
1809	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1810	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1811	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
1812	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
1813	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
1814	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
1815	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LB;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LB;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LB;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
1816	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
1817	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
1818	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	324	None	add
1819	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
1820	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
1821	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	324	None	add
1822	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
1823	[BUG]  [BUGGY]  c  <  =  DISABLED  ||  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  type	338	None	replace
1824	[BUG]  [BUGGY]  c  =  c  >>  DISABLED  ||  c  ==  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  >>  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  >>  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	338	None	replace
1825	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	338	None	replace
1826	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
1827	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
1828	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
1829	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	212	None	replace
1830	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	326	None	replace
1831	[BUG]  [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_START  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
1832	[BUG]  [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  COMMENT_END  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
1833	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
1834	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  LF  &&  c  ==  CR;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF    &&    c    ==    CR)    {    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	263	None	replace
1835	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
1836	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
1837	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    char  CR  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	141	None	add
1838	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
1839	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
1840	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
1841	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	141	None	add
1842	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
1843	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
1844	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
1845	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
1846	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
1847	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
1848	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1849	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1850	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	146	None	replace
1851	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	74	None	replace
1852	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	74	None	replace
1853	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  char  e  =  in.read();  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  char  e  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    char  e  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	300	None	add
1854	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	300	None	add
1855	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	300	None	add
1856	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	300	None	add
1857	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	300	None	add
1858	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	313	None	replace
1859	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
1860	[BUG]  [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	313	None	replace
1861	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  COMMENTStart;  [CE]  cannot  find  symbol  COMMENTStart  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  COMMENTStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  COMMENTStart;	  return    c!=    DISABLED    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  COMMENTStart	50	None	replace
1862	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  <  =  LF;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  <  =  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  <  =  LF;	  return    c!=    DISABLED    &&    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
1863	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1864	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1865	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1866	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
1867	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1868	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1869	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1870	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  c  {  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
1871	[BUG]  [BUGGY]  boolean  c  =  in.lookAhead()  ==  LF;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  boolean  c  =  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	boolean  c  =  in.lookAhead()  ==  LF;	  return    c    ==    LF    &&    c    ==    CR;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	210	None	replace
1872	[BUG]  [BUGGY]  boolean  c  =  in.lookAhead();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  boolean  c  =  in.lookAhead();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	boolean  c  =  in.lookAhead();	  return    c    ==    LF    &&    c    ==    CR;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	210	None	replace
1873	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
1874	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  Document  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
1875	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	64	None	add
1876	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	64	None	add
1877	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	add
1878	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	add
1879	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	21	None	add
1880	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  boolean  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  boolean  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    boolean  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	21	None	add
1881	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  boolean  c  =  in.lookAhead();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  boolean  c  =  in.lookAhead();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    boolean  c  =  in.lookAhead();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	21	None	add
1882	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1883	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1884	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1885	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1886	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
1887	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  ';'  expected	336	None	replace
1888	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLE	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  ';'  expected	336	None	replace
1889	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLE	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  ';'  expected	336	None	replace
1890	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
1891	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	336	None	replace
1892	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
1893	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
1894	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
1895	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  int  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
1896	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  '.';  int  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
1897	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1898	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1899	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1900	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1901	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1902	[BUG]  [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT_START)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
1903	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	181	None	add
1904	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	181	None	add
1905	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	181	None	add
1906	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	181	None	add
1907	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	181	None	add
1908	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  >>  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	286	None	replace
1909	[BUG]  [BUGGY]  c  <  =  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	286	None	replace
1910	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >>  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >>  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >>  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	152	None	replace
1911	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
1912	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  >=  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  >=  CR;	  return    c    ==    DISABLED    ||    c    >=    CR;    	compilable	  [FE]  AssertionError  	142	40	replace
1913	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
1914	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  unreachable  statement	12	None	replace
1915	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1916	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
1917	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
1918	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  LF;  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
1919	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	292	None	replace
1920	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	292	None	replace
1921	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  LF  &&  c  ==  CR;  if(c  >=  DISABLED)  {  c  =  in.read();  return  c  >=  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	292	None	replace
1922	[BUG]  [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1923	[BUG]  [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
1924	[BUG]  [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	224	None	replace
1925	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	add
1926	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	add
1927	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	add
1928	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  ||  c  ==  commmentStart;	  return    c!=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	59	51	replace
1929	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  commmentStart;	  return    c!=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	59	51	replace
1930	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1931	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1932	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
1933	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
1934	[BUG]  [BUGGY]  if(c  ==  LF  &&  c!=  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c!=  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c!=  DISABLED)  {  return  c  ==  CR;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
1935	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  CR;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
1936	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  LF;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
1937	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
1938	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
1939	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	320	None	add
1940	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	207	None	replace
1941	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
1942	[BUG]  [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  char  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  ||  c  ==  CR;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1943	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
1944	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  ||  c  ==  CR;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
1945	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1946	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
1947	[BUG]  [BUGGY]  if(c  >  COMMENTS)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  COMMENTS)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  COMMENTS)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
1948	[BUG]  [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  ';'  expected	112	None	replace
1949	[BUG]  [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
1950	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1951	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1952	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1953	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	258	None	replace
1954	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1955	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
1956	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  LF  &&  c!=  DISABLED;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	6	replace
1957	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF  &&  c!=  DISABLED;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	6	replace
1958	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	310	None	replace
1959	[BUG]  [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	310	None	replace
1960	[BUG]  [BUGGY]  return  c  >>  DISABLED  ||  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  ||  c  ==  CR;	  return    c    ==    CR    ||    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	55	None	replace
1961	[BUG]  [BUGGY]  return  c  [Delete]  DISABLED  ||  c  ==  CR;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  [Delete]  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  [Delete]  DISABLED  ||  c  ==  CR;	  return    c    ==    CR    ||    c    ==    DISABLED;    	non-compiled	[CE]  ';'  expected	55	None	replace
1962	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DR;  [CE]  cannot  find  symbol  DR  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  DR;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DR	97	None	replace
1963	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DR;  [CE]  cannot  find  symbol  DR  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  DR;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DR	97	None	replace
1964	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_HEIGHT;  [CE]  cannot  find  symbol  COMMENT_HEIGHT  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_HEIGHT;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_HEIGHT;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_HEIGHT	51	None	replace
1965	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRUING_SPACE;  [CE]  cannot  find  symbol  COMMENT_SURRUING_SPACE  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRUING_SPACE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRUING_SPACE;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_SURRUING_SPACE	51	None	replace
1966	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRULES;  [CE]  cannot  find  symbol  COMMENT_SURRULES  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRULES;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_SURRULES;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_SURRULES	51	None	replace
1967	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
1968	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	179	None	add
1969	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	179	None	add
1970	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	179	None	add
1971	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	179	None	add
1972	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	179	None	add
1973	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	234	None	add
1974	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	234	None	add
1975	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	234	None	add
1976	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	234	None	add
1977	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	327	None	replace
1978	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	327	None	replace
1979	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	327	None	replace
1980	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	327	None	replace
1981	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	327	None	replace
1982	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	301	51	replace
1983	[BUG]  [BUGGY]  return  c  >=  'e'  ||  c  ==  DISABLED;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	301	51	replace
1984	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'e'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'e'  &&  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	40	replace
1985	[BUG]  [BUGGY]  return  c!=  'e'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'e'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'e'  &&  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	40	replace
1986	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'e'  ||  c!=  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
1987	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c!=  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'e'  ||  c!=  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
1988	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
1989	[BUG]  [BUGGY]  return  c  <  'e'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'e'  ||  c  ==  DISABLED;	  return    c    ==    'e'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	301	51	replace
1990	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1991	[BUG]  [BUGGY]  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1992	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1993	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1994	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1995	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	243	None	replace
1996	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	302	None	add
1997	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	302	None	add
1998	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	302	None	add
1999	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  in.read(c);  [CE]  no  suitable  method  found  for  read(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  char  r  =  in.read(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    char  r  =  in.read(c);	  	non-compiled	[CE]  no  suitable  method  found  for  read(int)	302	None	add
2000	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	302	None	add
2001	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	244	None	replace
2002	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >  CR;  Integer  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	244	None	replace
2003	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  Integer  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  Integer  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n';  Integer  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	253	None	replace
2004	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	253	None	replace
2005	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }  else  {  return  c  ==  -1;  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }  else  {  return  c  ==  -1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  Integer  c  =  in.read();  }  else  {  return  c  ==  -1;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	253	None	replace
2006	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	282	None	replace
2007	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	282	None	replace
2008	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	232	None	replace
2009	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	232	None	replace
2010	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2011	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
2012	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	295	None	replace
2013	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	295	None	replace
2014	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
2015	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
2016	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >=  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
2017	[BUG]  [BUGGY]  return  c  ==  DEFINITION  ||  c  ==  DEFINITION;  [CE]  cannot  find  symbol  DEFINITION  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DEFINITION  ||  c  ==  DEFINITION;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DEFINITION  ||  c  ==  DEFINITION;	  return    c    ==    DEFINITION    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DEFINITION	199	None	replace
2018	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  boolean  c  =  in.lookAhead();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  boolean  c  =  in.lookAhead();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    boolean  c  =  in.lookAhead();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
2019	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	157	None	add
2020	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  boolean  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  boolean  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    boolean  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	157	None	add
2021	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	54	None	add
2022	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	54	None	add
2023	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    in.read();	  	non-compiled	[CE]  unreachable  statement	54	None	add
2024	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	54	None	add
2025	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	99	None	add
2026	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	99	None	add
2027	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	99	None	add
2028	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	99	None	add
2029	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	99	None	add
2030	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  ==  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  c  <  DISABLED  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    c  <  DISABLED  &&  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	183	None	add
2031	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2032	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2033	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	183	None	add
2034	[BUG]  [BUGGY]  return  c  ==  -1  ||  c  ==  -1;  c  ==  -1  ||  c  ==  -1;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  -1  ||  c  ==  -1;  c  ==  -1  ||  c  ==  -1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  -1  ||  c  ==  -1;  c  ==  -1  ||  c  ==  -1;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2035	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2036	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  c  ==  CR  ||  c  ==  DISABLED;  }	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2037	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  'r';  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2038	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	120	None	replace
2039	[BUG]  [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	120	None	replace
2040	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	120	None	replace
2041	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	189	None	replace
2042	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
2043	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	189	None	replace
2044	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	189	None	replace
2045	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DECL;  [CE]  cannot  find  symbol  DECL  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DECL;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DECL;	  return    c    ==    'n'    ||    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  DECL	321	None	replace
2046	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DETERMINISTIC_END;  [CE]  cannot  find  symbol  DETERMINISTIC_END  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DETERMINISTIC_END;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DETERMINISTIC_END;	  return    c    ==    'n'    ||    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_END	321	None	replace
2047	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	49	None	add
2048	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	49	None	add
2049	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2050	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2051	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2052	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2053	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  >  DISABLED;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	40	replace
2054	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  >  DISABLED;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	40	replace
2055	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  ||  c  >  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
2056	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  >  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  >  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  >  CR;	  return    c    <    DISABLED    ||    c    >    CR;    	compilable	  [FE]  AssertionError  	325	51	replace
2057	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  CR;  String  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	211	None	replace
2058	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
2059	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
2060	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
2061	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	7	None	replace
2062	[BUG]  [BUGGY]  return  c  >=  END  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  END  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  END  &&  c  <  =  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
2063	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	52	None	add
2064	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	52	None	add
2065	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	add
2066	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    c  =  in.read();	  	non-compiled	[CE]  unreachable  statement	155	None	add
2067	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  int  CR  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  int  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    int  CR  =  in.read();	  	non-compiled	[CE]  unreachable  statement	155	None	add
2068	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	155	None	add
2069	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	155	None	add
2070	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  readEndOfLine(in,  c);  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  Integer  c  =  readEndOfLine(in,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    Integer  c  =  readEndOfLine(in,  c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	155	None	add
2071	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >>  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >>  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >>  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  incompatible  types	231	None	replace
2072	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
2073	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	231	None	replace
2074	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Context.codeBug();  [CE]  cannot  find  symbol  Context  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
2075	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Context.codeBug();  }  [CE]  cannot  find  symbol  Context  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Context.codeBug();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)  {  return  false;  }  else  {  Context.codeBug();  }	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  cannot  find  symbol  Context	166	None	replace
2076	[BUG]  [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
2077	[BUG]  [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	221	None	replace
2078	[BUG]  [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED  &&  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	221	None	replace
2079	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2080	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2081	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2082	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2083	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c!=  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2084	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
2085	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
2086	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	297	None	replace
2087	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >>    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	84	None	replace
2088	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	62	None	add
2089	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	62	None	add
2090	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	62	None	add
2091	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
2092	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLE  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLE	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	275	None	replace
2093	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	275	None	replace
2094	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
2095	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
2096	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [CE]  not  a  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead())	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
2097	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
2098	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
2099	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
2100	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'r'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	135	None	replace
2101	[BUG]  [BUGGY]  if(c  <  =  '0')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  '0')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  '0')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
2102	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	add
2103	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
2104	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    char  CR  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	138	None	add
2105	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DS;  [CE]  cannot  find  symbol  DS  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DS;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DS;	  return    c    ==    DR    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DS	140	None	replace
2106	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DV;  [CE]  cannot  find  symbol  DV  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DV;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DV;	  return    c    ==    DR    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DV	140	None	replace
2107	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
2108	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
2109	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	153	None	add
2110	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    in.read();	  	non-compiled	[CE]  unreachable  statement	153	None	add
2111	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
2112	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    char  CR  =  in.read();	  	non-compiled	[CE]  possible  loss  of  precision	236	None	add
2113	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	236	None	add
2114	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	236	None	add
2115	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	236	None	add
2116	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
2117	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
2118	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
2119	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
2120	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
2121	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
2122	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
2123	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
2124	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [CE]  ';'  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
2125	[BUG]  [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  i  =  0,  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
2126	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
2127	[BUG]  [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  ';'  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  len  =  in.read();  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
2128	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2129	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2130	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2131	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2132	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2133	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2134	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	60	None	add
2135	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!readEndOfLine(c))  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!readEndOfLine(c))  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!readEndOfLine(c))  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
2136	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	60	None	add
2137	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
2138	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
2139	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	28	None	replace
2140	[BUG]  [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2141	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
2142	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	311	None	replace
2143	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r'  ||  c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
2144	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
2145	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	311	None	replace
2146	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
2147	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
2148	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
2149	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
2150	[BUG]  [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	176	None	replace
2151	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
2152	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  char  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	238	None	replace
2153	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  char  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	238	None	replace
2154	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  CR)  {  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
2155	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	250	None	replace
2156	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
2157	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
2158	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
2159	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	227	None	replace
2160	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	227	None	replace
2161	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	227	None	replace
2162	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	227	None	replace
2163	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	227	None	replace
2164	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF;  c  >>  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
2165	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
2166	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	127	None	add
2167	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
2168	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    char  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	46	None	add
2169	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	46	None	add
2170	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  Integer  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  Integer  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    Integer  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	46	None	add
2171	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  false;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	46	None	add
2172	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  in.read(c);  [CE]  no  suitable  method  found  for  read(int)  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  char  commmentStart  =  in.read(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    char  commmentStart  =  in.read(c);	  	non-compiled	[CE]  no  suitable  method  found  for  read(int)	46	None	add
2173	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	226	None	replace
2174	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
2175	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	1	None	replace
2176	[BUG]  [BUGGY]  return  c!=  LF  &&  c  <  =  CR;  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  <  =  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  LF  &&  c  <  =  CR;  c  =  in.read();	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2177	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_LINE;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_LINE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_LINE;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
2178	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_FIRST;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_FIRST;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_FIRST;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
2179	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SURroundingSpaces;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SURroundingSpaces;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SURroundingSpaces;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
2180	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
2181	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
2182	[BUG]  [BUGGY]  int  c  =  DISABLED  ||  c  ==  LF;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED  ||  c  ==  LF;	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
2183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2184	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  LF  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2186	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2188	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CR  &&  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c!=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2190	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c!=  commmentStart;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c!=  commmentStart;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
2191	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  CR;  c  =  in.read();	  return    c    >=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
2192	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
2193	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
2194	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
2195	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
2196	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2197	[BUG]  [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2198	[BUG]  [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2199	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	2	None	replace
2200	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2201	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	271	None	replace
2202	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  LF  &&  c  ==  CR)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	271	None	replace
2203	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	271	None	replace
2204	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	271	None	replace
2205	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	271	None	replace
2206	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLE  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  DISABLED  &&  c  ==  DISABLE	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  ';'  expected	271	None	replace
2207	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
2208	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
2209	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
2210	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	285	None	replace
2211	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	285	None	replace
2212	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2213	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
2214	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2215	[BUG]  [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2216	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2217	[BUG]  [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2218	[BUG]  [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2219	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
2220	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c!=    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	209	None	replace
2221	[BUG]  [BUGGY]  if(c  >=  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c!=    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	209	None	replace
2222	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  commmentStart  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  commmentStart  ==  CR;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
2223	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  commmentStart  ==  CR;  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  commmentStart  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  commmentStart  ==  CR;	  return    c    >>    DISABLED    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	185	40	replace
2224	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
2225	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
2226	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
2227	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
2228	[BUG]  [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2229	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2230	[BUG]  [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  in.lookAhead()  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2231	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	5	None	replace
2232	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LC;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2233	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
2234	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
2235	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
2236	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
2237	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
2238	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
2239	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	17	None	add
2240	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
2241	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2242	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  CR)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2243	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENTS)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENTS)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENTS)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2244	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  END;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  END;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  END;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2245	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2246	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENT_END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENT_END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  COMMENT_END)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	335	None	replace
2247	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
2248	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
2249	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  CR  &&  c  ==  LF;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	85	None	replace
2250	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	304	None	add
2251	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  Integer  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	304	None	add
2252	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	304	None	add
2253	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  char  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	228	None	replace
2254	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    in.read();	  	non-compiled	[CE]  unreachable  statement	70	None	add
2255	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  +=  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  +=  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  +=  in.read();	  	non-compiled	[CE]  unreachable  statement	70	None	add
2256	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    c  >=  LF  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	70	None	add
2257	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
2258	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
2259	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2260	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2261	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	15	None	replace
2262	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  =  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  =  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  =  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
2263	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true  [CE]  ';'  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	121	None	replace
2264	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentEnd();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
2265	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true  [CE]  ';'  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  commmentEnd)  {  return  true	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	121	None	replace
2266	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
2267	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
2268	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	169	None	replace
2269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  commmentStart;	  return    c    ==    DISABLED    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	45	40	replace
2270	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  commmentStart;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  commmentStart;	  return    c    ==    DISABLED    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	45	40	replace
2271	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENTStart;  [CE]  cannot  find  symbol  COMMENTStart  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  COMMENTStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  COMMENTStart;	  return    c    ==    DISABLED    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  COMMENTStart	45	None	replace
2272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  'n'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	51	replace
2273	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED  +  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  'n'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	51	replace
2274	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  'n'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	178	51	replace
2275	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  'n'  ||  c  ==  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	178	51	replace
2276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  4;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  +  4;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2277	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  4;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  4;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  +  4;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2278	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	103	None	add
2279	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	103	None	add
2280	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
2281	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	103	None	add
2282	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	259	None	add
2283	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	259	None	add
2284	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	259	None	add
2285	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	259	None	add
2286	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2287	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2288	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2289	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2290	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
2291	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'r'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
2292	[BUG]  [BUGGY]  if(c  ==  'ufffd'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  unclosed  character  literal  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'ufffd'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'ufffd'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  unclosed  character  literal	108	None	replace
2293	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
2294	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
2295	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	42	None	add
2296	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  delimiter  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    int  delimiter  =  in.read();	  	non-compiled	[CE]  unreachable  statement	42	None	add
2297	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
2298	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  in.read();  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    in.read();	  	non-compiled	[CE]  unreachable  statement	42	None	add
2299	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	195	None	replace
2300	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	195	None	replace
2301	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2302	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2303	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	195	None	replace
2304	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
2305	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
2306	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
2307	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
2308	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
2309	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
2310	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
2311	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	330	None	replace
2312	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	330	None	replace
2313	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	330	None	replace
2314	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  >  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	330	None	replace
2315	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	254	None	replace
2316	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	254	None	replace
2317	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2318	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2319	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2320	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2321	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2322	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2323	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	329	None	replace
2324	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	216	None	add
2325	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	216	None	add
2326	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	216	None	add
2327	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	216	None	add
2328	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    char  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	200	None	add
2329	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    Integer  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	200	None	add
2330	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
2331	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
2332	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
2333	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
2334	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  LF  ||  c  >=  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
2335	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2336	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  unreachable  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  unreachable  statement	11	None	replace
2337	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LD;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2338	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2339	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2340	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >=  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
2341	[BUG]  [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'r'  ||  c  >  'n')  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
2342	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  int  commmentStart  =  readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    int  commmentStart  =  readEndOfLine(c);	  	non-compiled	[CE]  incompatible  types	151	None	add
2343	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	add
2344	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	add
2345	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	add
2346	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	251	None	replace
2347	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	251	None	replace
2348	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
2349	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
2350	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  c  <  =  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
2351	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	339	None	replace
2352	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	339	None	replace
2353	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  DISABLED  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  DISABLED  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  DISABLED  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	339	None	replace
2354	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  -1;  c  ==  DISABLED  ||  c  ==  -1;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  -1;  c  ==  DISABLED  ||  c  ==  -1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  -1;  c  ==  DISABLED  ||  c  ==  -1;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	339	None	replace
2355	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c!=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	add
2356	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	add
2357	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	add
2358	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
2359	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
2360	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
2361	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	225	None	replace
2362	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  in.read();  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
2363	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	341	None	replace
2364	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2365	[BUG]  [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LD;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LD;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  commmentStart)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LD;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	333	None	replace
2366	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
2367	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2368	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2369	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2370	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2371	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2372	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n'  ||  c  >  'r')  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
2373	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
2374	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
2375	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
2376	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  int  c  =  in.read();  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	276	None	replace
2377	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
2378	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
2379	[BUG]  [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2380	[BUG]  [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  cannot  find  symbol  COMMENT_START  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	334	None	replace
2381	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	334	None	replace
2382	[BUG]  [BUGGY]  c!=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c!=  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	342	None	replace
2383	[BUG]  [BUGGY]  c  >>  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >>  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >>  DISABLED  ||  c  ==  DISABLED;	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	342	None	replace
2384	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	342	None	replace
2385	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    >>    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	342	None	replace
2386	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	245	None	replace
2387	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  true;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	245	None	replace
2388	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	245	None	replace
2389	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  false;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	245	None	replace
2390	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	82	None	replace
2391	[BUG]  [BUGGY]  if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	82	None	replace
2392	[BUG]  [BUGGY]  if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  LF)  {  return  c  >=  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	82	None	replace
2393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  Float.MAX_VALUE;	  return    c!=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	59	40	replace
2394	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MAX_VALUE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  Float.MAX_VALUE;	  return    c!=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	59	40	replace
2395	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.parseFloat(c);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  Float.parseFloat(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  Float.parseFloat(c);	  return    c!=    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	59	None	replace
2396	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LB;  [CE]  cannot  find  symbol  LB  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LB;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LB;	  return    c!=    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  LB	59	None	replace
2397	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    c  >=  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	200	None	add
2398	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >>  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  >>  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    c  >>  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	200	None	add
2399	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    c  ==  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	200	None	add
2400	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	200	None	add
2401	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
2402	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	200	None	add
2403	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	add
2404	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	259	None	add
2405	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  >>  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  >>  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    c  >>  DISABLED;	  	non-compiled	[CE]  not  a  statement	259	None	add
2406	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	259	None	add
2407	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
2408	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c!=  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	259	None	add
2409	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
2410	[BUG]  [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	259	None	add
2411	[BUG]  [BUGGY]  while(c  <  =  LF)  {  return  c  ==  CR  ||  c  ==  LF;  [CE]  illegal  start  of  expression  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  =  LF)  {  return  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  =  LF)  {  return  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	276	None	replace
2412	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)return  c;  int  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)return  c;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)return  c;  int  c  =  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	276	None	replace
2413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  Float.MAX_VALUE;	  return    c    <    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	160	51	replace
2414	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.MAX_VALUE;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  Float.MAX_VALUE;	  return    c    <    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	160	51	replace
2415	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2416	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2417	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2418	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >>  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >>  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >>  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2419	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  ==  DISABLED  &&  c!=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  ==  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    c  ==  DISABLED  &&  c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	23	None	add
2420	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	add
2421	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	23	None	add
2422	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	23	None	add
2423	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	23	None	add
2424	[BUG]  [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  >>  DISABLED;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c!=  DISABLED;  c  >>  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c!=    DISABLED;    c  >>  DISABLED;	  	non-compiled	[CE]  not  a  statement	23	None	add
2425	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	304	None	add
2426	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	304	None	add
2427	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'N'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	304	None	add
2428	[BUG]  [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'N'  ||  c  ==  DISABLED;  if(c  ==  'N'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'N'    ||    c    ==    DISABLED;    if(c  ==  'N'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	304	None	add
2429	[BUG]  [BUGGY]  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	||  c  ==  DISABLED;  Integer  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	253	None	replace
2430	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;	  return    c!=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	61	40	replace
2431	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  Float.POSITIVE_INFINITY;	  return    c!=    LF    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	61	40	replace
2432	[BUG]  [BUGGY]  int  c  =  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
2433	[BUG]  [BUGGY]  int  c  =  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
2434	[BUG]  [BUGGY]  int  c  =  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED;  char  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
2435	[BUG]  [BUGGY]  int  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  c  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	172	None	replace
2436	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  LF  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  c  >>  LF  &&  c  ==  DISABLED;	  return    c    ==    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	272	None	replace
2437	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  SURRAY;  [CE]  cannot  find  symbol  SURRAY  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  SURRAY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  SURRAY;	  return    c    ==    DR    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  SURRAY	97	None	replace
2438	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    >=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	282	None	replace
2439	[BUG]  [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  ||  c  ==  CR;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2440	[BUG]  [BUGGY]  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2441	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  LF;  c  ==  CR  ||  c  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    c    ==    CR    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	277	None	replace
2442	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  DISABLED  ||  c  ==  LF;	  return    c    >=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	217	6	replace
2443	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  DISABLED  ||  c  ==  LF;	  return    c    >=    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	217	6	replace
2444	[BUG]  [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2445	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
2446	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  incompatible  types	12	None	replace
2447	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
2448	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	12	None	replace
2449	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	111	None	replace
2450	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2451	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2452	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2453	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2454	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
2455	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
2456	[BUG]  [BUGGY]  if(c!=  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
2457	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    LF    &&    c    ==    CR;    in.read();    	non-compiled	[CE]  missing  return  statement	215	None	replace
2458	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  incompatible  types	250	None	replace
2459	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
2460	[BUG]  [BUGGY]  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  not  a  statement	332	None	replace
2461	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	non-compiled	[CE]  missing  return  statement	332	None	replace
2462	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	332	6	replace
2463	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  LF;  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    c    ==    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	332	6	replace
2464	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
2465	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	117	None	replace
2466	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  incompatible  types  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	for(int  i  =  0,  len  =  in.readLine();  i  <  len;  ++i)  {  if(c  >=  DISABLED  ||  c  ==  DISABLED)return  false;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    if(c    >=    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	117	None	replace
2467	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  c  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	26	None	replace
2468	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  '.')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  '.')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	275	None	replace
2469	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n')  {  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	275	None	replace
2470	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	208	None	replace
2471	[BUG]  [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	316	None	replace
2472	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	316	None	replace
2473	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	295	None	replace
2474	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	233	None	replace
2475	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
2476	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
2477	[BUG]  [BUGGY]  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  not  a  statement	174	None	replace
2478	[BUG]  [BUGGY]  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
2479	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	174	None	replace
2480	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	174	None	replace
2481	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	338	None	replace
2482	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	338	None	replace
2483	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >=  DISABLED  ||  c  ==  commmentStart;	  return    c    >>    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	220	39	replace
2484	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  commmentStart;  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  commmentStart;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  commmentStart;	  return    c    >>    DISABLED    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	220	39	replace
2485	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  return  c  >  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  return  c  >  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
2486	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  in.read();  return  c  >  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  in.read();  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  in.read();  return  c  >  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	127	None	add
2487	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  for(int  c  =  0;  c  <  DISABLED;  ++c)  {  return  c  >  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  for(int  c  =  0;  c  <  DISABLED;  ++c)  {  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  for(int  c  =  0;  c  <  DISABLED;  ++c)  {  return  c  >  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
2488	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
2489	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  >  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
2490	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    LF    &&    c    ==    CR;    if(c  >  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	add
2491	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	315	None	replace
2492	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	225	None	replace
2493	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	336	None	replace
2494	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    if(!ignoreEmptyLines)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	336	None	replace
2495	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  in.read();  return  c  ==  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  in.read();  return  c  ==  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  &&  c  ==  LF)  {  in.read();  return  c  ==  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
2496	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  {  CR  &&  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  c  {  CR  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    c  {  CR  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	21	None	add
2497	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  DISABLED)  {  return  c  ==  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
2498	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
2499	[BUG]  [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  &&  c  ==  LF;  if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    &&    c    ==    LF;    if(c  ==  CR  &&  c  ==  LF)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	21	None	add
2500	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
2501	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	191	None	replace
2502	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
2503	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  unreachable  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	191	None	replace
2504	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
2505	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	146	None	replace
2506	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  >  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
2507	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
2508	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
2509	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	91	None	replace
2510	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	236	None	add
2511	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	236	None	add
2512	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	236	None	add
2513	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	236	None	add
2514	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
2515	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  CR;  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    ==    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	267	None	replace
2516	[BUG]  [BUGGY]  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
2517	[BUG]  [BUGGY]  return  c  <  LC  ||  c  ==  CR;  [CE]  cannot  find  symbol  LC  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LC  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LC  ||  c  ==  CR;	  return    c    <    =    LC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  LC	289	None	replace
2518	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
2519	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
2520	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
2521	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
2522	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
2523	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  return  c!=  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  return  c!=  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c!=  CR  &&  c  ==  LF)  {  return  c!=  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
2524	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  in.read();  return  c!=  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  in.read();  return  c!=  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c!=  CR  &&  c  ==  LF)  {  in.read();  return  c!=  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
2525	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  return  c!=  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  return  c!=  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  return  c!=  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
2526	[BUG]  [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c!=  CR  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  CR  &&  c  ==  LF;  if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c!=  CR  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    CR    &&    c    ==    LF;    if(c!=  CR  &&  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c!=  CR  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
2527	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
2528	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  record  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	165	None	replace
2529	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.floatToIntBits(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  DISABLED  ||  c  >=  Float.floatToIntBits(c);	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
2530	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.floatToIntBits(c);  [FE]  AssertionError  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >=  Float.floatToIntBits(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  DISABLED  ||  c  >=  Float.floatToIntBits(c);	  return    c    <    =    LF    ||    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	72	51	replace
2531	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	218	None	add
2532	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  ==  LF)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
2533	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  ==  LF)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	218	None	add
2534	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  <  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  <  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  <  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  <  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  <  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	218	None	add
2535	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  <  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	218	None	add
2536	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  LF  ||  c  >=  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  c  <  LF  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    c  <  LF  ||  c  >=  DISABLED;	  	non-compiled	[CE]  >  expected	159	None	add
2537	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    if(c  >  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	add
2538	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	add
2539	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	add
2540	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	add
2541	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >=  DISABLED;  if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >=    DISABLED;    if(c  <  DISABLED  ||  c  >=  DISABLED)  {  return  c  <  LF  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	159	None	add
2542	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	78	None	replace
2543	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	add
2544	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	34	None	add
2545	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	add
2546	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_LEADING;  [CE]  cannot  find  symbol  COMMENT_LEADING  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  COMMENT_LEADING;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  COMMENT_LEADING;	  return    c    ==    DISABLED    ||    c    ==    COMMENT_START;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_LEADING	48	None	replace
2547	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  >=  Float.POSITIVE_INFINITY;	  return    c!=    LF    &&    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	260	40	replace
2548	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  Float.POSITIVE_INFINITY;	  return    c!=    LF    &&    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	260	40	replace
2549	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  >=  Float.MAX_VALUE;	  return    c!=    LF    &&    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	260	40	replace
2550	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.MAX_VALUE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  Float.MAX_VALUE;	  return    c!=    LF    &&    c    >=    DISABLED;    	compilable	  [FE]  AssertionError  	260	40	replace
2551	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.parseFloat(c);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  >=  Float.parseFloat(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  >=  Float.parseFloat(c);	  return    c!=    LF    &&    c    >=    DISABLED;    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	260	None	replace
2552	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	331	None	replace
2553	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2554	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
2555	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2556	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  ++c)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  ';'  expected	6	None	replace
2557	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  j  =  in.read();  j  <  DISABLED;  ++j)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  j  =  in.read();  j  <  DISABLED;  ++j)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  j  =  in.read();  j  <  DISABLED;  ++j)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
2558	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
2559	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  CR;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	86	None	replace
2560	[BUG]  [BUGGY]  return  c  >>  DISABLED  ||  c  ==  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  ||  c  ==  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  ||  c  ==  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	198	None	replace
2561	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  DETERMINISTIC;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  DETERMINISTIC;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  >=  DETERMINISTIC;	  return    c    ==    DETERMINISTIC    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	198	None	replace
2562	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	326	None	replace
2563	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    c  ==  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	52	None	add
2564	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
2565	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  else  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
2566	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  c;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    c;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
2567	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    return    c    <    LF    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	148	None	replace
2568	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
2569	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
2570	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  in.read();  return  c  <  LF  ||  c  >  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  in.read();  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  in.read();  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
2571	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  return  c  <  LF  ||  c  >  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  return  c  <  LF  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  return  c  <  LF  ||  c  >  CR;  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
2572	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
2573	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  CR;  if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    >    CR;    if(c  <  LF  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	add
2574	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	252	None	replace
2575	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	252	None	replace
2576	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_START  ||  c  ==  CR;  [CE]  cannot  find  symbol  DETERMINISTIC_START  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_START  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_START  ||  c  ==  CR;	  return    c    ==    DETERMINISTIC_END    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_START	306	None	replace
2577	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SOURCE;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SOURCE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_SOURCE;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
2578	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_BACKSLASH;  [CE]  cannot  find  symbol  DETERMINISTIC_LINE  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_BACKSLASH;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC_LINE  ||  c  ==  DETERMINISTIC_BACKSLASH;	  return    c    ==    DETERMINISTIC_LINE    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC_LINE	196	None	replace
2579	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  in.read();  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    if(in.lookAhead()    ==    LF)    {    c    =    in.read();    }    	non-compiled	[CE]  incompatible  types	243	None	replace
2580	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  com  [CE]  ')'  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  com  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart!=  com	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	122	None	replace
2581	[BUG]  [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart!=  commmentStart)  {  return  true;  }  [CE]  possible  loss  of  precision  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart!=  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  commmentStart  =  in.read();  if(commmentStart!=  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentStart)    {    return    true;    }    	non-compiled	[CE]  possible  loss  of  precision	122	None	replace
2582	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }	  return    c!=    'n'    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	104	None	replace
2583	[BUG]  [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  DISABLED  &&  c  ==  DISABLED;  c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
2584	[BUG]  [BUGGY]  c  {  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  {  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  {  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	273	None	replace
2585	[BUG]  [BUGGY]  c  =  c  ==  LF  &&  c  ==  CR;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  LF  &&  c  ==  CR;	  return    c    ==    LF    &&    c    ==    CR;    c    {    LF    &&    c    ==    CR;    	non-compiled	[CE]  incompatible  types	273	None	replace
2586	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
2587	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
2588	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	135	None	replace
2589	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	135	44	replace
2590	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	135	44	replace
2591	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	114	None	replace
2592	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
2593	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  LF;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	290	None	replace
2594	[BUG]  [BUGGY]  return  c  <  LF  ||  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c!=  DISABLED;  char  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	145	None	replace
2595	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  c  =  in.read();  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  'r';  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
2596	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  DISABLED)  {  return  c  ==  CR;  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
2597	[BUG]  [BUGGY]  if(c  ==  LF  ||  c  ==  CR)  {  return  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  ||  c  ==  CR)  {  return  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  ||  c  ==  CR)  {  return  c  ==  LF;  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	73	None	replace
2598	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
2599	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)return  true;  if(c  ==  CR  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    CR    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	105	None	replace
2600	[BUG]  [BUGGY]  return  c  >>  LF  ||  c  ==  CR;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  LF  ||  c  ==  CR;	  return    c!=    LF    ||    c    ==    CR;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	67	None	replace
2601	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  Float.POSITIVE_INFINITY;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2602	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.POSITIVE_INFINITY;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.POSITIVE_INFINITY;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  Float.POSITIVE_INFINITY;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2603	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  Float.MAX_VALUE;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2604	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MAX_VALUE;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MAX_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  Float.MAX_VALUE;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2605	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.parseFloat(c);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.parseFloat(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  Float.parseFloat(c);	  return    c    ==    LF    &&    c!=    DISABLED;    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	24	None	replace
2606	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  &&  c!=  Float.MIN_VALUE;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2607	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MIN_VALUE;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c!=  Float.MIN_VALUE;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c!=  Float.MIN_VALUE;	  return    c    ==    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	24	40	replace
2608	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	62	None	add
2609	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
2610	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
2611	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
2612	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
2613	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c    ==    DISABLED;    if(c  >=  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	add
2614	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  <  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
2615	[BUG]  [BUGGY]  return  c  <  'r'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  'r'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	51	replace
2616	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'u'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'u'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	43	replace
2617	[BUG]  [BUGGY]  return  c  ==  'u'  ||  c  ==  DISABLED;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'u'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'u'  ||  c  ==  DISABLED;	  return    c    ==    'r'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	303	43	replace
2618	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  >=  'n'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  >=  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    c  >=  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	106	None	add
2619	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  >>  'n'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  c  >>  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    c  >>  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	106	None	add
2620	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
2621	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  in.read();  return  c  >=  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
2622	[BUG]  [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
2623	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
2624	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
2625	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	298	None	replace
2626	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2627	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
2628	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
2629	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	170	None	replace
2630	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2631	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLED  ||  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	170	None	replace
2632	[BUG]  [BUGGY]  return  c  ==  LINE  &&  c  ==  LF;  [CE]  cannot  find  symbol  LINE  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LINE  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LINE  &&  c  ==  LF;	  return    c    ==    CR    &&    c    ==    LF;    	non-compiled	[CE]  cannot  find  symbol  LINE	22	None	replace
2633	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  'r';	  return    c    ==    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	22	47	replace
2634	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  'r';	  return    c    ==    CR    &&    c    ==    LF;    	compilable	  [FE]  AssertionError  	22	47	replace
2635	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  ==  commmentStart;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	add
2636	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  commmentStart;  if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    commmentStart;    if(c  ==  DISABLED  ||  c  ==  commmentStart)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	add
2637	[BUG]  [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
2638	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  -  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  -  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2639	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  -  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  -  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2640	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  <  =  1;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  <  =  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  <  =  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
2641	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  >=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  >=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2642	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  >=  DISABLED  +  1;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  >=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  &&  c  >=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2643	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c!=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'n'  ||  c  ==  DISABLED  &&  c!=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2644	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c!=  DISABLED  +  1;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  &&  c!=  DISABLED  +  1;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  DISABLED  &&  c!=  DISABLED  +  1;	  return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    	compilable	  [FE]  AssertionError  	178	44	replace
2645	[BUG]  [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
2646	[BUG]  [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;	  return    c    ==    LF    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	297	None	replace
2647	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
2648	[BUG]  [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().println(c);  [CE]  cannot  find  symbol  Encoder  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().println(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().println(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().println(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	205	None	replace
2649	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.parseFloat(c);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  Float.parseFloat(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  Float.parseFloat(c);	  return    c    ==    LF    &&    c    ==    DISABLED;    	non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	20	None	replace
2650	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	76	None	replace
2651	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	76	None	replace
2652	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >=  CR;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >=  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >=  CR;  int  c  =  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	246	None	replace
2653	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >>  CR;  int  c  =  in.read();  }  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >>  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >>  CR;  int  c  =  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  incompatible  types	246	None	replace
2654	[BUG]  [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  LF)  {  return  c  >=  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  LF)  {  return  c  >=  LF;  int  c  =  in.read();  }	  return    c    >=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	246	None	replace
2655	[BUG]  [BUGGY]  c  >=  LF;  int  c  =  in.read();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF;  int  c  =  in.read();	  return    c    >=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  not  a  statement	246	None	replace
2656	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
2657	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
2658	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  return  c  <  LF  ||  c  ==  DISABLED;  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	242	None	replace
2659	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  in.read();  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    DISABLED)    {    in.read();    return    c    <    LF    ||    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	242	None	replace
2660	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  c  ==  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  c  ==  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  c  ==  'n'  ||  c  ==  DISABLED;  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    'n'    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
2661	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  CR;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
2662	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  c  ==  DISABLED;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	109	None	replace
2663	[BUG]  [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [CE]  possible  loss  of  precision  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  commmentStart  =  in.read();  if(commmentStart  ==  commmentStart)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.read();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
2664	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    if(c    ==    DISABLED    ||    c    >    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
2665	[BUG]  [BUGGY]  return  c  <  END  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  END  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  END  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  END  ||  c  ==  DISABLED;	  return    c    <    =    LF    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  END	69	None	replace
2666	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	340	None	replace
2667	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    c  ==  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	40	None	add
2668	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	add
2669	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	add
2670	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	40	None	add
2671	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	add
2672	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  '.'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  '.'  &&  c  ==  DISABLED;	  return    c    ==    'n'    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	102	40	replace
2673	[BUG]  [BUGGY]  return  c  ==  '.'  &&  c  ==  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  '.'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  '.'  &&  c  ==  DISABLED;	  return    c    ==    'n'    &&    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	102	40	replace
2674	[BUG]  [BUGGY]  return  c  ==  '0'  &&  c  <  =  DISABLED;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  '0'  &&  c  <  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  '0'  &&  c  <  =  DISABLED;	  return    c    ==    'n'    &&    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
2675	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	183	None	add
2676	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2677	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  in.read();  return  c  <  DISABLED  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  in.read();  return  c  <  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  in.read();  return  c  <  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	183	None	add
2678	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2679	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	183	None	add
2680	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2681	[BUG]  [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  &&  c  ==  CR;  if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    &&    c    ==    CR;    if(c  <  DISABLED  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	183	None	add
2682	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  0;  }  [CE]  missing  return  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  0;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED!=  0;  }	  return    c!=    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	43	None	replace
2683	[BUG]  [BUGGY]  int  c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	166	None	replace
2684	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  [CE]  incompatible  types  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Context.codeBug();	  return    c    ==    CR    ||    c    ==    LF;    Context.codeBug();    	non-compiled	[CE]  incompatible  types	166	None	replace
2685	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  c);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c,  c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(in,    c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	204	None	replace
2686	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  ==  'n'  ||  c!=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  ==  'n'  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    c  ==  'n'  ||  c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	99	None	add
2687	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  ==  DISABLED  ||  c!=  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  c  ==  DISABLED  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    c  ==  DISABLED  ||  c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	99	None	add
2688	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  'n'  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
2689	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
2690	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c!=  DISABLED;  if(c  ==  'n'  ||  c!=  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c!=    DISABLED;    if(c  ==  'n'  ||  c!=  DISABLED)  {  in.read();  return  c  ==  'n'  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	99	None	add
2691	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c!=  'n'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c!=  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    c!=  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	103	None	add
2692	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	103	None	add
2693	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  >>  'n'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  >>  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    c  >>  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	103	None	add
2694	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  >=  'n'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  c  >=  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    c  >=  'n'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	103	None	add
2695	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	103	None	add
2696	[BUG]  [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	add
2697	[BUG]  [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT_START)  {  return  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	171	None	replace
2698	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	171	None	replace
2699	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
2700	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  >=  LF  ||  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  >=  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  >=  LF  ||  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	add
2701	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  return  c  >=  LF  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  return  c  >=  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    if(c  >=  DISABLED)  {  return  c  >=  LF  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	70	None	add
2702	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  LF  ||  c  ==  CR)  {  in.read();  return  c  >=  LF  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  LF  ||  c  ==  CR)  {  in.read();  return  c  >=  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    if(c  >=  LF  ||  c  ==  CR)  {  in.read();  return  c  >=  LF  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	70	None	add
2703	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  LF  ||  c  ==  CR)  {  return  c  >=  LF  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  LF  ||  c  ==  CR)  {  return  c  >=  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    if(c  >=  LF  ||  c  ==  CR)  {  return  c  >=  LF  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	70	None	add
2704	[BUG]  [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  ||  c  ==  CR;  if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    ||    c    ==    CR;    if(c  >=  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  c  =  in.read();  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	add
2705	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n';  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  'n';  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  'n';  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    if(c    ==    'n'    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	136	None	replace
2706	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	314	None	replace
2707	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	314	None	replace
2708	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	314	None	replace
2709	[BUG]  [BUGGY]  char  c  =  DISABLED  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  c  =  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  c  =  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	314	None	replace
2710	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  CR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  CR;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	314	None	replace
2711	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2712	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2713	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2714	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'N';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  'N';	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
2715	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'N';  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  'N';  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  'N';	  return    c    ==    'N'    ||    c    ==    DISABLED;    	compilable	  [FE]  AssertionError  	305	40	replace
2716	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  incompatible  types  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  incompatible  types	203	None	replace
2717	[BUG]  [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  -1  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
2718	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [CE]  cannot  find  symbol  Encoder  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  LF;  Encoder.getInstance().readEndOfLine(c);	  return    c    ==    CR    ||    c    ==    LF;    Encoder.getInstance().readEndOfLine(c);    	non-compiled	[CE]  cannot  find  symbol  Encoder	203	None	replace
2719	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    if(c!=    LF)    {    c    =    in.read();    return    c!=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	266	None	replace
2720	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	54	None	add
2721	[BUG]  [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  CR  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    CR    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	add
2722	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  >>  LF;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  >>  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  >>  LF;	  return    c    >>    LF    &&    c    ==    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	126	None	replace
2723	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c!=  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c!=  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c!=  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	66	None	add
2724	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  >=  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c  >=  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	66	None	add
2725	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  >>  LF  ||  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  >>  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c  >>  LF  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	66	None	add
2726	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  return  c!=  LF  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  in.read();  return  c!=  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED)  {  in.read();  return  c!=  LF  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	66	None	add
2727	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	add
2728	[BUG]  [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  ==  DISABLED  ||  c  ==  CR;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  ||  c  ==  CR;  c  ==  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    ||    c    ==    CR;    c  ==  DISABLED  ||  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	66	None	add
2729	[BUG]  [BUGGY]  return  c  >>  DISABLED  &&  c!=  DISABLED;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  &&  c!=  DISABLED;	  return    c    ==    DISABLED    ||    c!=    DISABLED;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	152	None	replace
2730	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  CR;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  DISABLED;  c  >=  DISABLED  ||  c  ==  CR;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	280	None	replace
2731	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >>  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >>  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >>  DISABLED;  c  >=  DISABLED  ||  c  ==  DISABLED;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    c    >=    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	280	None	replace
2732	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  missing  return  statement	10	None	replace
2733	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	239	None	replace
2734	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	239	None	replace
2735	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	193	None	replace
2736	[BUG]  [BUGGY]  if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2737	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2738	[BUG]  [BUGGY]  if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  INT_SPACE)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2739	[BUG]  [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DIS  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  else  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  DISABLED  ||  c  ==  DIS	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    LF)    {    return    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	193	None	replace
2740	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead());  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead());  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  Record  do  not  match  expected  result(c  -  in.lookAhead());	  return    c    ==    CR    ||    c    ==    LF;    Record    do    not    match    expected    result(c    -    in.lookAhead())    	non-compiled	[CE]  not  a  statement	168	None	replace
2741	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com  [CE]  ')'  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  i++)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com	  for(int    i    =    0,    len    =    in.read();    i    <    len;    i++)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	123	None	replace
2742	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  c  ==  'n'  ||  c  >=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  c  ==  'n'  ||  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    c  ==  'n'  ||  c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	179	None	add
2743	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
2744	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
2745	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  'n'  ||  c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  'n'  ||  c  >=  DISABLED)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
2746	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	add
2747	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  >=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    >=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	add
2748	[BUG]  [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	312	None	replace
2749	[BUG]  [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	312	None	replace
2750	[BUG]  [BUGGY]  return  c!=  DETERMINISTIC  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DETERMINISTIC  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DETERMINISTIC  ||  c  ==  DISABLED;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
2751	[BUG]  [BUGGY]  return  c  ==  DETERMINISTIC  ||  c  ==  delimiter;  [CE]  cannot  find  symbol  DETERMINISTIC  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINISTIC  ||  c  ==  delimiter;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINISTIC  ||  c  ==  delimiter;	  return    c    ==    DETERMINISTIC    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINISTIC	197	None	replace
2752	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	3	None	replace
2753	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2754	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
2755	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	222	None	replace
2756	[BUG]  [BUGGY]  char  n  =  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  n  =  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  n  =  c  ==  'n'  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  incompatible  types	249	None	replace
2757	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  commmentStart  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	249	None	replace
2758	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  &&  c  ==  DISABLED;  int  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  &&  c  ==  DISABLED;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  &&  c  ==  DISABLED;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
2759	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  LF;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
2760	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c  ==  &&  c  ==  CR;  int  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c  ==  &&  c  ==  CR;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c  ==  &&  c  ==  CR;  int  c  =  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
2761	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  CR;  int  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  CR;  int  c  =  in.read();	  return    c    ==    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	79	None	replace
2762	[BUG]  [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  127)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2763	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n')  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	333	None	replace
2764	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  cannot  find  symbol  COMMENT  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    LF)    {    c    =    in.read();    }    else    {    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  cannot  find  symbol  COMMENT	333	None	replace
2765	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  'e'  ||  c  ==  LF;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	32	replace
2766	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  LF;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'e'  ||  c  ==  LF;	  return    c    ==    'n'    ||    c    ==    LF;    	compilable	  [FE]  AssertionError  	321	32	replace
2767	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  >  DISABLED  ||  c  ==  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
2768	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  >  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
2769	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
2770	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	322	None	add
2771	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  >  DISABLED  ||  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	322	None	add
2772	[BUG]  [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  DISABLED  ||  c  ==  CR;  if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >    DISABLED    ||    c    ==    CR;    if(c  >  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	322	None	add
2773	[BUG]  [BUGGY]  char  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  ||  c  ==  LF;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  ';'  expected	194	None	replace
2774	[BUG]  [BUGGY]  char  DISABLED  =  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  =  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  =  c  ==  DISABLED;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  incompatible  types	194	None	replace
2775	[BUG]  [BUGGY]  char  DISABLED  ||  c  ==  LF;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  ';'  expected	194	None	replace
2776	[BUG]  [BUGGY]  char  DISABLED  =  c;  int  commmentStart  =  in.read();  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  =  c;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  =  c;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    LF;    int    commmentStart    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
2777	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
2778	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2779	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	195	None	replace
2780	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ".);  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	195	None	replace
2781	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DIS  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DIS	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2782	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2783	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2784	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c!=  DISABLED  ||  c  ==  CR;  }  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    CR;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2785	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    LF;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
2786	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
2787	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2788	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
2789	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2790	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  ignoreSurroundingSpaces)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	317	None	replace
2791	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	317	None	replace
2792	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
2793	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
2794	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	173	None	replace
2795	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  ||	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
2796	[BUG]  [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  COMMENT)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++c)  {  return  c  ==  DISABLED	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    ++c)    {    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  ';'  expected	173	None	replace
2797	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  c  ==  'n'  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  c  ==  'n'  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    c  ==  'n'  &&  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	101	None	add
2798	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
2799	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
2800	[BUG]  [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  &&  c  ==  DISABLED;  if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    &&    c    ==    DISABLED;    if(c  ==  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  ==  'n'  &&  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	101	None	add
2801	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2802	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(!ignoreEmptyLines)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2803	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
2804	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unreachable  statement	190	None	replace
2805	[BUG]  [BUGGY]  return  c  ==  DETERMINITION  ||  c  ==  DISABLED;  [CE]  cannot  find  symbol  DETERMINITION  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINITION  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINITION  ||  c  ==  DISABLED;	  return    c    ==    DEFINITION    ||    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINITION	199	None	replace
2806	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  int  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	214	None	replace
2807	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)int  c  =  in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)int  c  =  in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)int  c  =  in.read();  if(c  ==  DISABLED)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  '.class'  expected	214	None	replace
2808	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
2809	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	214	None	replace
2810	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c!=  DISABLED;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c!=  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
2811	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >>  DISABLED;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >>  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return  c;  int  c  =  in.read();  }  else  {  return  c  >>  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	214	None	replace
2812	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	83	None	replace
2813	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  LF  &&  c  ==  DISABLED;  }	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	83	None	replace
2814	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  DISABLED;  c  >=  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
2815	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  >  LF  &&  c!=  DISABLED;	  return    c    >=    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	125	51	replace
2816	[BUG]  [BUGGY]  return  c  >  LF  &&  c!=  DISABLED;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c!=  DISABLED;	  return    c    >=    LF    &&    c!=    DISABLED;    	compilable	  [FE]  AssertionError  	125	51	replace
2817	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
2818	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
2819	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	188	None	replace
2820	[BUG]  [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c!=  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	188	None	replace
2821	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  LF  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
2822	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
2823	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  DISABLED;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
2824	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  in.read();  }  else  {  return  c  ==  DISABLED  &&  c  ==  LF;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    CR    &&    c    ==    DISABLED)    {    c    =    in.read();    }    else    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	75	None	replace
2825	[BUG]  [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  in.read();  }  [CE]  incompatible  types  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  CR  ||  c  ==  LF)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  CR  ||  c  ==  LF)  {  return  in.read();  }	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  incompatible  types	162	None	replace
2826	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  in.read();  [CE]  unreachable  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  LF;  in.read();	  return    c    ==    CR    ||    c    ==    LF;    in.read();    	non-compiled	[CE]  unreachable  statement	162	None	replace
2827	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  <  'n'  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  <  'n'  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  <  'n'  ||  c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	181	None	add
2828	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  <  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  <  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  <  'n'  ||  c  ==  DISABLED)  {  in.read();  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	181	None	add
2829	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	181	None	add
2830	[BUG]  [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  'n'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    'n'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  <  'n'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	181	None	add
2831	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	223	None	replace
2832	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
2833	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [CE]  missing  return  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  c  =  in.read();  return  c  ==  LF  &&  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	80	None	replace
2834	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  in.read();  }  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  DISABLED)  {  return  in.read();  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c    ==    DISABLED)    {    c    =    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  incompatible  types	80	None	replace
2835	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
2836	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
2837	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  >=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read();  }	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
2838	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.read	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
2839	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  >=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  d  =  in.	  return    c    >=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    d    =    in.read();    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
2840	[BUG]  [BUGGY]  char  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  ';'  expected	231	None	replace
2841	[BUG]  [BUGGY]  char  DISABLED  ||  c  ==  DISABLED;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  DISABLED  ||  c  ==  DISABLED;	  return    c    >=    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  ';'  expected	231	None	replace
2842	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
2843	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2844	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2845	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	299	None	replace
2846	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2847	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  true;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    true;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	299	None	replace
2848	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >=  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    c  >=  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	36	None	add
2849	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >>  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  >>  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    c  >>  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	36	None	add
2850	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    c  ==  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	36	None	add
2851	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  return  c  >=  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	36	None	add
2852	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	36	None	add
2853	[BUG]  [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	36	None	add
2854	[BUG]  [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [CE]  possible  loss  of  precision  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  commmentStart  =  in.read();  if(commmentStart!=  commmentEnd)  {  return  true;  }	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart!=    commmentEnd)    {    return    true;    }    	non-compiled	[CE]  possible  loss  of  precision	121	None	replace
2855	[BUG]  [BUGGY]  while(c  <  LF  ||  c  >  CR;  c  =  in.read();  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  LF  ||  c  >  CR;  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  LF  ||  c  >  CR;  c  =  in.read();	  return    c    <    LF    ||    c    ==    CR;    int    c    =    in.read();    	non-compiled	[CE]  ')'  expected	150	None	replace
2856	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  >  'r'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	311	None	replace
2857	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
2858	[BUG]  [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  c  =  in.read();  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  missing  return  statement	311	None	replace
2859	[BUG]  [BUGGY]  return  c  ==  DETERMINATED  &&  c  ==  CR;  [CE]  cannot  find  symbol  DETERMINATED  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DETERMINATED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DETERMINATED  &&  c  ==  CR;	  return    c    ==    LINE    &&    c    ==    CR;    	non-compiled	[CE]  cannot  find  symbol  DETERMINATED	25	None	replace
2860	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	234	None	add
2861	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  ')'  expected	234	None	add
2862	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  in.read();  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  ')'  expected	234	None	add
2863	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }  else  {  return  c  ==  DISABLED  ||  c  ==  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  ')'  expected	234	None	add
2864	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  c  ==  'e'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  c  ==  'e'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    c  ==  'e'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	300	None	add
2865	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
2866	[BUG]  [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'e'  ||  c  ==  DISABLED;  if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'e'    ||    c    ==    DISABLED;    if(c  ==  'e'  ||  c  ==  DISABLED)  {  return  c  ==  'e'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	300	None	add
2867	[BUG]  [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	310	None	replace
2868	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2869	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
2870	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
2871	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2872	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2873	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
2874	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
2875	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
2876	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  commmentStart  =  in.read	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    commmentStart    =    in.read();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
2877	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
2878	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  }	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
2879	[BUG]  [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  =  c  ==  CR  ||  c  ==  LF;  Document  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Document    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	167	None	replace
2880	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  false;  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
2881	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  c  ==  DISABLED  ||  c!=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  c  ==  DISABLED  ||  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    c  ==  DISABLED  ||  c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	151	None	add
2882	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	151	None	add
2883	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	151	None	add
2884	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  DISABLED;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    DISABLED;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	add
2885	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2886	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ");  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
2887	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalArgumentException( " ".);  }	  return    c    ==    DISABLED    ||    c    ==    LF;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2888	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
2889	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF;  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF;	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF;    	non-compiled	[CE]  not  a  statement	279	None	replace
2890	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c!=  DISABLED)  {  return  c  ==  LF  ||  c  ==  CR;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    &&    c!=    DISABLED)    {    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	209	None	replace
2891	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
2892	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	257	None	replace
2893	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	257	None	replace
2894	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  LF;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  >=  LF;  }	  return    c    >=    LF    &&    c    ==    CR;    if(c    >=    LF    &&    c    ==    CR)    {    c    =    in.read();    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	292	None	replace
2895	[BUG]  [BUGGY]  return  c  <  LF  ||  c  >  LF;  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  >  LF;  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  LF  ||  c  >  LF;  c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
2896	[BUG]  [BUGGY]  if(c  <  LF  ||  c  >  LF)  {  return  c  <  LF  ||  c  ==  CR;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  LF  ||  c  >  LF)  {  return  c  <  LF  ||  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  LF  ||  c  >  LF)  {  return  c  <  LF  ||  c  ==  CR;  }	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	143	None	replace
2897	[BUG]  [BUGGY]  c  <  LF  ||  c  ==  CR;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  >  expected	143	None	replace
2898	[BUG]  [BUGGY]  c  <  =  LF  ||  c  ==  CR;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  ||  c  ==  CR;	  return    c    <    LF    ||    c    ==    CR;    c    <    LF    ||    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
2899	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  CR  =  in.read();  [CE]  cannot  assign  a  value  to  final  variable  CR  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  CR	238	None	replace
2900	[BUG]  [BUGGY]  String  CR  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  CR  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  CR  ==  DISABLED  ||  c  ==  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  ';'  expected	238	None	replace
2901	[BUG]  [BUGGY]  char  CR  =  in.read();  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  char  CR  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	char  CR  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    CR    =    in.read();    	non-compiled	[CE]  possible  loss  of  precision	238	None	replace
2902	[BUG]  [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
2903	[BUG]  [BUGGY]  int  c  =  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED;	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
2904	[BUG]  [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED  ||  c  ==  DISABLED;  Integer  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
2905	[BUG]  [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  DISABLED  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	116	None	replace
2906	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  in.read();  if(c  ==  DISABLED  ||  c!=  DISABLED)return  false;  }	  if(c    <    =    DISABLED)    {    in.read();    if(c    ==    DISABLED    ||    c!=    DISABLED)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	227	None	replace
2907	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF;  }  [CE]  missing  return  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  LF;  }	  return    c    ==    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  missing  return  statement	74	None	replace
2908	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  c  ==  'r'  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  c  ==  'r'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    c  ==  'r'  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	302	None	add
2909	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	302	None	add
2910	[BUG]  [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'r'  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'r'    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'r'  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	302	None	add
2911	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	124	None	add
2912	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
2913	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
2914	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
2915	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
2916	[BUG]  [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c!=  DISABLED;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c  >=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    LF    &&    c!=    DISABLED;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  DISABLED)  {  return  c  >=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	add
2917	[BUG]  [BUGGY]  while(c  <  =  LF)  {  c  =  in.readInt();  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  =  LF)  {  c  =  in.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  =  LF)  {  c  =  in.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
2918	[BUG]  [BUGGY]  Integer  c  =  out.readInt();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Integer  c  =  out.readInt();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Integer  c  =  out.readInt();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	164	None	replace
2919	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  true;  c  =  in.read();  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return  true;  c  =  in.read();  }  else  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return  true;  c  =  in.read();  }  else  {  return  false;  }	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2920	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return;  c  =  in.read();  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)return;  c  =  in.read();  }  else  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)return;  c  =  in.read();  }  else  {  return  false;  }	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2921	[BUG]  [BUGGY]  if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  }  [CE]  missing  return  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF  &&  c  ==  CR)  {  return  c!=  LF;  }	  return    c!=    LF    &&    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  missing  return  statement	1	None	replace
2922	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LF;  records  do  not  match  expected  result(c);	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
2923	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  ==  LF;  Records  do  not  match  expected  result(c)	  return    c    ==    CR    ||    c    ==    LF;    Records    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	206	None	replace
2924	[BUG]  [BUGGY]  String  c  =  DISABLED  ||  c  ==  LF;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  String  c  =  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	String  c  =  DISABLED  ||  c  ==  LF;	  return    c    ==    DISABLED    ||    c    ==    LF;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	14	None	replace
2925	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    c  ==  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	17	None	add
2926	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	17	None	add
2927	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	add
2928	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  CR)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  &&  c  ==  CR)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  &&  c  ==  CR)  {  return  c  ==  DISABLED  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	17	None	add
2929	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c!=  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    c!=  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	42	None	add
2930	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    c  ==  DISABLED  ||  c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	42	None	add
2931	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	42	None	add
2932	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	42	None	add
2933	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    DISABLED;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	42	None	add
2934	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c!=  LF  &&  c  ==  DISABLED;  }	  return    c!=    LF    &&    c    ==    CR;    c    >=    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  missing  return  statement	7	None	replace
2935	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
2936	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  ++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2937	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  c  =  in.read();  }  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
2938	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  continue;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  <  DISABLED;  c++)  {  continue;  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    <    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
2939	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    c  ==  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	58	None	add
2940	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c!=  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c!=  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    c!=  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	58	None	add
2941	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  >=  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  >=  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    c  >=  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	58	None	add
2942	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  >>  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  c  >>  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    c  >>  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	58	None	add
2943	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
2944	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	add
2945	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c!=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	58	None	add
2946	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    c    ==    DISABLED    ||    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	296	None	replace
2947	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  c  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	89	None	replace
2948	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  else  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
2949	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  c  =  in.read();  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
2950	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2951	[BUG]  [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  LF)  {  return  c!=  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  c  =  in.read();  }  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2952	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++)  {  c  =  in.read();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  ++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2953	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c!=  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2954	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >>  DISABLED;  c++)  {  c  =  in.read();  }	  return    c!=    LF    &&    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    c    =    in.read();    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2955	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)  {  return  c  ==  DISABLED;  int  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	134	None	replace
2956	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  c  =  in.read();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'n'  ||  c  ==  DISABLED)return  true;  int  c  =  in.read();  }	  return    c    ==    'n'    ||    c    ==    DISABLED;    int    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
2957	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  DISABLED;  c  ==  CR  &&  c  ==  DISABLED;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
2958	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c!=  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c!=  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    c!=  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	49	None	add
2959	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  ==  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    c  ==  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	49	None	add
2960	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >=  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    c  >=  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	49	None	add
2961	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >>  DISABLED  &&  c  ==  LF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  c  >>  DISABLED  &&  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    c  >>  DISABLED  &&  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	49	None	add
2962	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2963	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  in.read();  return  c!=  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	49	None	add
2964	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  c!=  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	add
2965	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	60	None	add
2966	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  >=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    c  >=  DISABLED;	  	non-compiled	[CE]  not  a  statement	60	None	add
2967	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c!=  DISABLED;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c!=  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    c!=  DISABLED;	  	non-compiled	[CE]  not  a  statement	60	None	add
2968	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  >>  DISABLED;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  c  >>  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    c  >>  DISABLED;	  	non-compiled	[CE]  not  a  statement	60	None	add
2969	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
2970	[BUG]  [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	add
2971	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  CR)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
2972	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  CR)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
2973	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
2974	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	324	None	add
2975	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  CR)  {  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  CR)  {  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  unreachable  statement	324	None	add
2976	[BUG]  [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  >  CR;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  DISABLED  ||  c  >  CR;  if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  >  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    DISABLED    ||    c    >    CR;    if(c  <  DISABLED  ||  c  >  DISABLED)  {  in.read();  return  c  <  DISABLED  ||  c  >  CR;  }	  	non-compiled	[CE]  unreachable  statement	324	None	add
2977	[BUG]  [BUGGY]  while(c  <  =  LF)  {  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  =  LF)  {  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  =  LF)  {  c  =  in.read();	  return    c    ==    CR    ||    c    ==    LF;    Integer    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	163	None	replace
2978	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c!=  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c!=  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c!=  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
2979	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >>  CR  &&  c  ==  DISABLED;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  c  >>  CR  &&  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  DISABLED;  c  >>  CR  &&  c  ==  DISABLED;	  return    c!=    LF    &&    c    ==    CR;    c    >>    CR    &&    c    ==    DISABLED;    	non-compiled	[CE]  not  a  statement	8	None	replace
2980	[BUG]  [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
2981	[BUG]  [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  'n'  ||  c  ==  DISABLED;	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
2982	[BUG]  [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  int  c  =  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	int  c  =  'n'  ||  c  ==  DISABLED;  String  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
2983	[BUG]  [BUGGY]  Integer  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  Integer  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	Integer  c  =  'n'  ||  c  ==  DISABLED;  char  c  =  in.read();	  return    c    ==    'n'    ||    c    ==    DISABLED;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	130	None	replace
2984	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
2985	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	add
2986	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED)  {  if(in.lookAhead()  ==  LF)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	add
2987	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
2988	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  DISABLED  +  1;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    DISABLED    +    1;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	add
2989	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  CR;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
2990	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  <  LF  &&  c  ==  CR;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  <  =  CR;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  <  =  CR;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
2991	[BUG]  [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  LF  &&  c  ==  DISABLED;  c  <  LF  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    <    LF    &&    c    ==    CR;    	non-compiled	[CE]  >  expected	87	None	replace
2992	[BUG]  [BUGGY]  return  c  >>  DISABLED  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >>  DISABLED  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >>  DISABLED  &&  c  <  =  CR;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
2993	[BUG]  [BUGGY]  return  c!=  DISABLED  ||  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  ||  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  ||  c  <  =  CR;	  return    c!=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
2994	[BUG]  [BUGGY]  return  c  >  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >  LF  &&  c  ==  CR;  }	  return    c    >=    LF    &&    c    ==    CR;    in.lookAhead()    ==    LF)    {    return    c    >=    LF    &&    c    ==    CR;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	294	None	replace
2995	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  true;  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	non-compiled	[CE]  class,  interface,  or  enum  expected	301	None	replace
2996	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)return  false;  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	non-compiled	[CE]  class,  interface,  or  enum  expected	301	None	replace
2997	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  DISABLED)return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  'e'  ||  c  ==  DISABLED)return  true;  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  DISABLED)return  true;  }	  return    c    ==    'e'    ||    c    ==    DISABLED;    	non-compiled	[CE]  class,  interface,  or  enum  expected	301	None	replace
2998	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	189	None	replace
2999	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c!=  DISABLED  ||  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
3000	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  int  commmentStart  =  in.read();  }  else  {  for(int  i  =  0;  i  <  commmentStart;  ++i)  {  	  return    c    ==    LF    ||    c    ==    DISABLED;    int    commmentStart    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	254	None	replace
3001	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
3002	[BUG]  [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DISABLE	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
3003	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  for(int  c  =  in.read();  c  >=  DISABLED;  c++)  {  return  c  ==  DIS	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c    ==    DISABLED    ||    c!=    DISABLED;    }    	non-compiled	[CE]  ';'  expected	175	None	replace
3004	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
3005	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	241	None	replace
3006	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  ==  DISABLED  ||  c!=  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  ==  DISABLED  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    c  ==  DISABLED  ||  c!=  CR;	  	non-compiled	[CE]  not  a  statement	138	None	add
3007	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c!=  DISABLED  ||  c!=  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c!=  DISABLED  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    c!=  DISABLED  ||  c!=  CR;	  	non-compiled	[CE]  not  a  statement	138	None	add
3008	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  >=  DISABLED  ||  c!=  CR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  c  >=  DISABLED  ||  c!=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    c  >=  DISABLED  ||  c!=  CR;	  	non-compiled	[CE]  not  a  statement	138	None	add
3009	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	add
3010	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c!=  CR;  }  [CE]  unreachable  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c!=  CR;  if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c!=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c!=    CR;    if(c  ==  DISABLED  ||  c!=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c!=  CR;  }	  	non-compiled	[CE]  unreachable  statement	138	None	add
3011	[BUG]  [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  'r'  ||  c  >  'n'  ||  c  >=  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  throw  new  IllegalStateException( " ");  }	  if(c    <    =    'n'    ||    c    >    'r'    ||    c    >=    DISABLED)    {    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	313	None	replace
3012	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	92	None	replace
3013	[BUG]  [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    for(int    c    =    in.read();    c    >=    DISABLED;    c++)    {    return    c!=    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	92	None	replace
3014	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  DISABLED;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  c  <  LF  ||  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    c  <  LF  ||  c  ==  DISABLED;	  	non-compiled	[CE]  >  expected	153	None	add
3015	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  <  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	153	None	add
3016	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	153	None	add
3017	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	add
3018	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  <  DISABLED  ||  c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	add
3019	[BUG]  [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  ||  c  ==  DISABLED;  if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    ||    c    ==    DISABLED;    if(c  <  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  <  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	add
3020	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com  [CE]  ')'  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  in.lookAhead()  ==  LF)  {  for(int  i  =  0,  len  =  in.read();  i  <  len;  ++i)  {  char  commmentStart  =  in.getCommentStart();  if(commmentStart  ==  com	  for(int    i    =    0,    len    =    in.read();    i    <    len;    ++i)    {    char    commmentStart    =    in.getCommentStart();    if(commmentStart    ==    commmentStart)    {    return    true;    }    	non-compiled	[CE]  ')'  expected	118	None	replace
3021	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	330	None	replace
3022	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  <  LF  ||  c  ==  CR;  if(c  <  LF  ||  c  ==  CR)  {  throw  new  IllegalStateException( " ");  }	  return    c    <    LF    ||    c    ==    CR;    if(c    <    LF    ||    c    ==    CR)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	330	None	replace
3023	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  return  c  <  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	157	None	add
3024	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  in.read();  return  c  <  LF  &&  c  ==  CR;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  in.read();  return  c  <  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  in.read();  return  c  <  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  unreachable  statement	157	None	add
3025	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  &&  c  ==  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  &&  c  ==  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  c  <  LF  &&  c  ==  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	add
3026	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	add
3027	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  if(!ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	add
3028	[BUG]  [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  LF  &&  c  ==  CR;  if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    <    LF    &&    c    ==    CR;    if(c  <  LF  &&  c  ==  CR)  {  if(ignoreEmptyLines)  {  return  true;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	add
3029	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  '.'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
3030	[BUG]  [BUGGY]  if(c  ==  '+'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [CE]  missing  return  statement  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  '+'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  '+'  ||  c  ==  DISABLED)return  true;  if(c  ==  commmentStart)  {  return  false;  }	  if(c    ==    'n'    ||    c    ==    DISABLED)return    true;    if(c    ==    commmentStart)    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	108	None	replace
3031	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c!=  DISABLED;  char  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c!=  DISABLED;  char  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c!=  DISABLED;  char  c  =  in.read();	  return    c    >=    DISABLED    ||    c    ==    CR;    char    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEndOfLine(int)	228	None	replace
3032	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
3033	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
3034	[BUG]  [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  =  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	256	None	replace
3035	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    if(!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	256	None	replace
3036	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
3037	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
3038	[BUG]  [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  if(c  ==  DISABLED)  {  in.read();  if(c  ==  DISABLED)  {  return  false;  }	  return    c    ==    LF    ||    c    ==    DISABLED;    if(c    ==    DISABLED)    {    in.read();    if(c    ==    DISABLED)    {    return    false;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
3039	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LINED;  [CE]  cannot  find  symbol  LINED  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  LINED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  LINED;	  return    c    ==    LINE    ||    c    ==    DISABLED;    	non-compiled	[CE]  cannot  find  symbol  LINED	137	None	replace
3040	[BUG]  [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	in.read();  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    in.read();    return    c    ==    DISABLED    ||    c    ==    DISABLED;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
3041	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
3042	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  if(ignoreEmptyLines)  {  return  false;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	add
3043	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  DISABLED;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    LF    &&    c    ==    DISABLED;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	19	None	add
3044	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c!=  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c!=  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    c!=  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	38	None	add
3045	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    c  ==  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	38	None	add
3046	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >=  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    c  >=  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	38	None	add
3047	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >>  DISABLED  &&  c  ==  CR;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  >>  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    c  >>  DISABLED  &&  c  ==  CR;	  	non-compiled	[CE]  not  a  statement	38	None	add
3048	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED;  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  c  ==  DISABLED;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    c  ==  DISABLED;	  	non-compiled	[CE]  not  a  statement	38	None	add
3049	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	38	None	add
3050	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  CR;  if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c!=    DISABLED    &&    c    ==    CR;    if(c  ==  DISABLED)  {  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	add
3051	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c  ==  CR  ||  c  ==  LF;  in.lookAhead()  ==  LF);  }	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
3052	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  'n'  ||  c  ==  'r';  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
3053	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF);  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  LF;  in.lookAhead()  ==  LF);	  return    c    ==    CR    ||    c    ==    LF;    in.lookAhead()    ==    LF);    	non-compiled	[CE]  not  a  statement	278	None	replace
3054	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  &&  c  ==  DISABLED;  int  commmentStart  =  in.read();	  return    c    ==    DISABLED    ||    c    ==    CR;    int    commmentStart    =    in.read();    	non-compiled	[CE]  unreachable  statement	240	None	replace
3055	[BUG]  [BUGGY]  if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  ||  c  ==  LF;  c  =  in.read();  }	  return    c    ==    DISABLED    ||    c    ==    LF;    c    =    in.read();    	non-compiled	[CE]  unreachable  statement	9	None	replace
3056	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  >=  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  >=  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    c  >=  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	216	None	add
3057	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  ==  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    c  ==  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	216	None	add
3058	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	216	None	add
3059	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  >>  DISABLED  ||  c  ==  LF;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  c  >>  DISABLED  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    c  >>  DISABLED  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	216	None	add
3060	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  >=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	216	None	add
3061	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  >=  DISABLED  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  >=  DISABLED  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    >=    DISABLED    ||    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  in.read();  return  c  >=  DISABLED  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	216	None	add
3062	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  ==  'n'  ||  c  ==  LF;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  c  ==  'n'  ||  c  ==  LF;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    c  ==  'n'  ||  c  ==  LF;	  	non-compiled	[CE]  not  a  statement	320	None	add
3063	[BUG]  [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c  ==  'n'  ||  c  ==  LF;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  'n'  ||  c  ==  LF;  if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c  ==  'n'  ||  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    'n'    ||    c    ==    LF;    if(c  ==  'n'  ||  c  ==  LF)  {  c  =  in.read();  }  else  {  return  c  ==  'n'  ||  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	320	None	add
3064	[BUG]  [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  DISABLED  ||  CR  ==  DISABLED;  }	  return    c    ==    DISABLED    ||    c    ==    CR;    if(c    ==    DISABLED    ||    c    ==    DISABLED)    {    return    c    ==    DISABLED    ||    CR    ==    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	318	None	replace
3065	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  delimiter;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  delimiter;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	40	replace
3066	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  delimiter;  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  delimiter;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  delimiter;	  return    c    ==    DISABLED    ||    c    ==    commmentStart;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	47	40	replace
3067	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  >=  DISABLED  ||  c  >=  CR;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  >=  DISABLED  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    c  >=  DISABLED  ||  c  >=  CR;	  	non-compiled	[CE]  not  a  statement	141	None	add
3068	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  ==  DISABLED  ||  c  >=  CR;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  ==  DISABLED  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    c  ==  DISABLED  ||  c  >=  CR;	  	non-compiled	[CE]  not  a  statement	141	None	add
3069	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
3070	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.read();  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
3071	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
3072	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  if(!ignoreEmptyLines)  {  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	add
3073	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  >>  DISABLED  ||  c  >=  CR;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  c  >>  DISABLED  ||  c  >=  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    c  >>  DISABLED  ||  c  >=  CR;	  	non-compiled	[CE]  not  a  statement	141	None	add
3074	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c  >=  CR;  }  [CE]  unreachable  statement  [FE]                  AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  >=  CR;  if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c  >=  CR;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    ||    c    >=    CR;    if(c  ==  DISABLED  ||  c  >=  DISABLED)  {  in.reset();  return  c  ==  DISABLED  ||  c  >=  CR;  }	  	non-compiled	[CE]  unreachable  statement	141	None	add
3075	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	37	replace
3076	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  CR;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	37	replace
3077	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3078	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  ||  c  ==  commmentStart  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3079	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3080	[BUG]  [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c!=  DISABLED  &&  c  ==  LF  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3081	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	add	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3082	[BUG]  [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  CR;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  DISABLED  ||  c  ==  DISABLED  &&  c  ==  CR;	  return    c    ==    DISABLED    ||    c    ==    LF    &&    c    ==    CR;    	compilable	  [FE]  AssertionError  	235	40	replace
3083	[BUG]  [BUGGY]  return  c  >=  DISABLED  ||  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  >=  DISABLED  ||  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  >=  DISABLED  ||  c  <  =  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
3084	[BUG]  [BUGGY]  return  c  <  =  LF  &&  c  <  =  CR;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  <  =  LF  &&  c  <  =  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  <  =  LF  &&  c  <  =  CR;	  return    c    >=    LF    &&    c    <    =    CR;    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
3085	[BUG]  [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  <  =  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  <  =  LF  &&  c  ==  CR;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
3086	[BUG]  [BUGGY]  c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  >=  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
3087	[BUG]  [BUGGY]  c  ==  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  c  ==  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	c  ==  LF  &&  c  ==  LF;  c  ==  CR  &&  c  ==  CR;	  return    c    >=    LF    &&    c    ==    CR;    c    ==    CR    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	88	None	replace
3088	[BUG]  [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  LF  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return  c  ==  LF  &&  c  ==  CR;  c  >>  LF  &&  c  ==  CR;	  return    c!=    LF    &&    c    ==    CR;    c    >=    LF    &&    c    ==    CR;    	non-compiled	[CE]  not  a  statement	212	None	replace
3089	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  &&  c  ==  LF)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	44	None	add
3090	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED)  {  return  c  ==  DISABLED  &&  c  ==  LF;  }	  	non-compiled	[CE]  unreachable  statement	44	None	add
3091	[BUG]  [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  return  c  ==  DISABLED  &&  c  ==  LF;  if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	return    c    ==    DISABLED    &&    c    ==    LF;    if(c  ==  DISABLED  ||  c  ==  LF)  {  return  c  ==  DISABLED;  }	  	non-compiled	[CE]  unreachable  statement	44	None	add
3092	[BUG]  [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED)  {  return  c  ==  LF  ||  c  ==  DISABLED;  Integer  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
3093	[BUG]  [BUGGY]  while(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  -1;  Integer  c  =  in.read();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  while(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  -1;  Integer  c  =  in.read();  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	while(c  <  DISABLED  ||  c  >  DISABLED)  {  return  c  ==  -1;  Integer  c  =  in.read();	  return    c    ==    LF    ||    c    ==    DISABLED;    Integer    c    =    in.read();    	non-compiled	[CE]  class,  interface,  or  enum  expected	255	None	replace
3094	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED)  {  return  DISABLED!=  DISABLED;  c  ==  DISABLED  ||  c  ==  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  not  a  statement	339	None	replace
3095	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [CE]  missing  return  statement  [FE]              AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)  {  return  c!=  DISABLED;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	339	None	replace
3096	[BUG]  [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [CE]  missing  return  statement  [FE]                AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  >=  DISABLED  ||  c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED)  {  return  false;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  missing  return  statement	339	None	replace
3097	[BUG]  [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      boolean  readEndOfLine(int  c)  throws  IOException  {  if  (c  ==  CR  &&  in.lookAhead()  ==  LF)  {  c  =  in.read();  }      [BUGGY]  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }  [BUGGY]      }  [CLASS]  Lexer  [METHOD]  readEndOfLine  [RETURN_TYPE]  boolean  int  c  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.23791547571544325	137	137	3	replace	if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  if(c  ==  DISABLED  ||  c  ==  DISABLED)return  true;  }	  return    c!=    DISABLED    ||    c    ==    CR;    c    ==    DISABLED    ||    c    ==    CR;    	non-compiled	[CE]  class,  interface,  or  enum  expected	339	None	replace
