bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	99	None	replace
2	[BUG]  [BUGGY]  final  double  xA  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	99	None	replace
3	[BUG]  [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	99	None	replace
4	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	12	1	replace
5	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	12	1	replace
6	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	71	None	replace
7	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	71	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	23	3	replace
9	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	23	3	replace
10	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	23	1	replace
11	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	23	1	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
13	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
15	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
17	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	55	3	replace
18	[BUG]  [BUGGY]  int  xA  =  Math.max(agingA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.max(agingA,  yB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.max(agingA,  yB);	  int    xA    =    Math.max(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	82	None	replace
19	[BUG]  [BUGGY]  int  xA  =  Math.max(agingA,  xB,  agingB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.max(agingA,  xB,  agingB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.max(agingA,  xB,  agingB);	  int    xA    =    Math.max(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	82	None	replace
20	[BUG]  [BUGGY]  int  xA  =  Math.max(agingA,  xB)-  1;  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.max(agingA,  xB)-  1;  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.max(agingA,  xB)-  1;	  int    xA    =    Math.max(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	82	None	replace
21	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	56	None	add
22	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	56	None	add
23	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	56	None	add
24	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	56	None	add
25	[BUG]  [BUGGY]  double  xA  =  Math.abs(yA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xA  =  Math.abs(yA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(yA);	  double    xA    =    Math.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	98	None	replace
26	[BUG]  [BUGGY]  double  xA  =  Math.abs(agingA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xA  =  Math.abs(agingA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(agingA);	  double    xA    =    Math.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	98	None	replace
27	[BUG]  [BUGGY]  double  xA  =  Math.abs(xB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xA  =  Math.abs(xB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(xB);	  double    xA    =    Math.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	98	None	replace
28	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	39	None	replace
29	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(xA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	39	None	replace
30	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	90	1	replace
31	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	90	1	replace
32	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(xB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	92	None	replace
33	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(agingB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(agingB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(agingB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	92	None	replace
34	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  cannot  find  symbol  fastMath  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    fastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  fastMath	106	None	replace
35	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  cannot  find  symbol  fastMath  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    fastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  fastMath	106	None	replace
36	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(agingA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
37	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	29	None	replace
38	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	86	None	replace
39	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	86	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	10	3	replace
41	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	10	3	replace
42	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	10	1	replace
43	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	10	1	replace
44	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	40	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	19	3	replace
46	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	19	3	replace
47	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	73	None	add
48	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	73	None	add
49	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	73	None	add
50	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	73	None	add
51	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
52	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	4	1	replace
53	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(agingA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	8	None	replace
54	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	46	1	replace
55	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	46	1	replace
56	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	104	2	replace
57	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	104	2	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	91	3	replace
59	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	91	3	replace
60	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	91	1	replace
61	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	91	1	replace
62	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	91	1	replace
63	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	91	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	74	3	replace
65	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	74	3	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	53	3	replace
67	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	53	3	replace
68	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	53	1	replace
69	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	53	1	replace
70	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	93	2	replace
71	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	93	2	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	63	3	replace
73	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	63	3	replace
74	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
75	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
76	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    Final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	1	None	add
77	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
78	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
79	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  no  suitable  method  found  for  max(double)  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	107	None	replace
80	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));  [CE]  no  suitable  method  found  for  max(double)  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	107	None	replace
81	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  no  suitable  method  found  for  max(double)  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	107	None	replace
82	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
83	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	66	None	add
84	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
85	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  cannot  find  symbol  fastMath  [FE]          AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    fastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  fastMath	89	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    fastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	89	3	replace
87	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    fastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	89	3	replace
88	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	103	None	add
89	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	103	None	add
90	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	103	None	add
91	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	103	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	17	3	replace
93	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	17	3	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	17	3	replace
95	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	17	3	replace
96	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(y));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	72	None	replace
97	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(y));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	72	None	replace
98	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(y));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	72	None	replace
99	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
100	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
101	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
102	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.Max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.Max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.Max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
103	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]            AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
104	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
105	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	5	None	add
106	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
107	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	5	None	add
108	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	43	None	replace
109	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	43	None	replace
110	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
111	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
112	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absY,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
113	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xB)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    absYB)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
114	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
115	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	22	None	add
116	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
117	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
118	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	41	None	replace
119	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    absYB)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
120	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  agingA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  agingA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  agingA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    absYB)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
121	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getRelativeAccuracy()));  [CE]  illegal  start  of  expression  [FE]                            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getRelativeAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  absYB)||(FastMath.max(absYA,  yB)  <  getRelativeAccuracy()));	  ((    xA    -    xB)    <    =    absYB)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	27	3	replace
123	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	27	3	replace
124	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	27	1	replace
125	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	27	1	replace
126	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	84	None	replace
127	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	84	None	replace
128	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	84	None	replace
129	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	79	None	replace
130	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	79	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	49	3	replace
132	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	49	3	replace
133	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	59	2	replace
134	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	59	2	replace
135	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	62	None	add
136	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	62	None	add
137	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	62	None	add
138	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	62	None	add
139	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	70	1	replace
140	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	70	1	replace
141	[BUG]  [BUGGY]  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  cannot  find  symbol  xTol  [FE]            AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  xTol	32	None	replace
142	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
143	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  AssertionError  	87	3	replace
145	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [FE]  AssertionError  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  AssertionError  	87	3	replace
146	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
147	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yA));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
148	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
149	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
150	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
151	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
152	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	96	None	replace
153	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	96	None	replace
154	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	77	None	add
155	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	77	None	add
156	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	77	None	add
157	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	77	None	add
158	[BUG]  [BUGGY]  double  xA  =  Math.abs(yB,  agingA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xA  =  Math.abs(yB,  agingA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.abs(yB,  agingA);	  double    xA    =    Math.abs(yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	83	None	replace
159	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  yB,  agingA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(agingA,  yB,  agingA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  yB,  agingA);	  int    xA    =    Math.min(agingA,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	81	None	replace
160	[BUG]  [BUGGY]  double  xA  =  Math.min(agingA,  yB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xA  =  Math.min(agingA,  yB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xA  =  Math.min(agingA,  yB);	  int    xA    =    Math.min(agingA,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	81	None	replace
161	[BUG]  [BUGGY]  int  xA  =  Math.min(yA,  agingB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(yA,  agingB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(yA,  agingB);	  int    xA    =    Math.min(agingA,    yB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	81	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	61	3	replace
163	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	61	3	replace
164	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	20	None	add
165	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	20	None	add
166	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	20	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	65	3	replace
168	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	65	3	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	65	3	replace
170	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	65	3	replace
171	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
172	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
173	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  GetAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  GetAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  GetAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
174	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
175	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]            AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
176	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	44	None	replace
177	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  xB,  agingB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(agingA,  xB,  agingB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  xB,  agingB);	  int    xA    =    Math.min(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	80	None	replace
178	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  xB)-  1;  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(agingA,  xB)-  1;  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  xB)-  1;	  int    xA    =    Math.min(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	80	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	76	3	replace
180	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	76	3	replace
181	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	76	1	replace
182	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	76	1	replace
183	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	69	None	add
184	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	69	None	add
185	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	69	None	add
186	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  not  a  statement  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  not  a  statement	69	None	add
187	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	75	None	add
188	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	75	None	add
189	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	75	None	add
190	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    Final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	75	None	add
191	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
192	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
193	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
194	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    return    absYB?    xA    :    xB;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
195	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xTol)||(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    return    absYB?    xA    :    xB;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
196	[BUG]  [BUGGY]  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  cannot  find  symbol  xTol  [FE]        AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  cannot  find  symbol  xTol	30	None	replace
197	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	102	None	replace
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	14	3	replace
199	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	14	3	replace
200	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
201	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
202	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  not  a  statement	3	None	add
203	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
204	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	94	None	add
205	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	94	None	add
206	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	94	None	add
207	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	94	None	add
208	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	64	None	add
209	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	64	None	add
210	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  GetRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	64	None	add
211	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
212	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    Final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	58	None	add
213	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
214	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
215	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	16	None	add
216	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	84	None	replace
217	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	84	None	replace
218	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	86	None	replace
219	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	86	None	replace
220	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	73	None	add
221	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	1	None	add
222	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
223	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
224	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	79	None	replace
225	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	79	None	replace
226	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	7	None	replace
227	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	69	None	add
228	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	14	3	replace
229	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	14	3	replace
230	[BUG]  [BUGGY]  if(allowed)  {  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  Fast  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  if(allowed)  {  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  Fast  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	if(allowed)  {  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  Fast	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	30	None	replace
231	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	3	None	add
232	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	11	1	replace
233	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	11	1	replace
234	[BUG]  [BUGGY]  if(allowed)  {  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  Fast  [CE]  ';'  expected  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  if(allowed)  {  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  Fast  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	if(allowed)  {  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  Fast	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	93	None	replace
235	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  not  a  statement	20	None	add
236	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	20	None	add
237	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastM  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastM  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastM	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  ';'  expected	96	None	replace
238	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	96	None	replace
239	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
240	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
241	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
242	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yA));    	compilable	  [FE]  TooManyEvaluationsException  	87	1	replace
243	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	50	2	replace
244	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	50	2	replace
245	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
246	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
247	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	56	None	add
248	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	56	None	add
249	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	47	1	replace
250	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	47	1	replace
251	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	39	None	replace
252	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	59	2	replace
253	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	59	2	replace
254	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  YB);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(agingA,  YB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  YB);	  int    xA    =    Math.min(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	80	None	replace
255	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	75	None	add
256	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
257	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	104	3	replace
258	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	104	3	replace
259	[BUG]  [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  cannot  find  symbol  xTol  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xxA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xxA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  cannot  find  symbol  xTol	105	None	replace
260	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	78	1	replace
261	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	78	1	replace
262	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	95	3	replace
263	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  AssertionError  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  AssertionError  	95	3	replace
264	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	95	2	replace
265	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	95	2	replace
266	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(xB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(yB,  FastMath.abs(xB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	71	None	replace
267	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(fastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(fastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(fastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	71	None	replace
268	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	85	None	replace
269	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  not  a  statement	64	None	add
270	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	64	None	add
271	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]        AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	64	None	add
272	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
273	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
274	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
275	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	2	replace
276	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	2	replace
277	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	19	3	replace
278	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  AssertionError  	19	3	replace
279	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	77	None	add
280	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(y));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	94	None	add
281	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    Final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  not  a  statement	54	None	add
282	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
283	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	103	None	add
284	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	24	1	replace
285	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	24	1	replace
286	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	62	None	add
287	[BUG]  [BUGGY]  int  yA  =  Math.min(agingA,  yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  yA  =  Math.min(agingA,  yB);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  yA  =  Math.min(agingA,  yB);	  int    xA    =    Math.min(agingA,    yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	81	None	replace
288	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(agingA));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(agingA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	8	None	replace
289	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	18	None	add
290	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
291	[BUG]  [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  yA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	42	None	replace
292	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	60	None	add
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	32	3	replace
294	[BUG]  [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	32	3	replace
295	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	48	1	replace
296	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    Final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	48	1	replace
297	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)&&(FastMath.max(absYA,  xB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
298	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	31	3	replace
299	[BUG]  [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    	compilable	  [FE]  AssertionError  	31	3	replace
300	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	62	None	add
301	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	3	None	add
302	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [CE]  illegal  start  of  expression  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    return    absYB?    xA    :    xB;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
303	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }  [CE]  illegal  start  of  expression  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  xA)||(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()))  {  return  absYB?  xA  :  xB;  }	  ((    xA    -    xB)    <    =    xA)||(FastMath.max(absYA,    xB)    <    getFunctionValueAccuracy()))    {    return    absYB?    xA    :    xB;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
304	[BUG]  [BUGGY]  int  xA  =  Math.max(agingA,  xB,  agingA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.max(agingA,  xB,  agingA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.max(agingA,  xB,  agingA);	  int    xA    =    Math.max(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	82	None	replace
305	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
306	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	66	None	add
307	[BUG]  [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  cannot  find  symbol  xTol  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xxA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xxA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    	non-compiled	[CE]  cannot  find  symbol  xTol	86	None	replace
308	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	56	None	add
309	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	2	replace
310	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(yB),  FastMath.abs(xB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    	compilable	  [FE]  TooManyEvaluationsException  	6	2	replace
311	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy())/  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  /  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy())/  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    /    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy())/  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  ';'  expected	16	None	add
312	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	73	None	add
313	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	94	None	add
314	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	78	1	replace
315	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(agingA),  FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    	compilable	  [FE]  TooManyEvaluationsException  	78	1	replace
316	[BUG]  [BUGGY]  ((  xA  -  xB)  <  =  absYB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [CE]  illegal  start  of  expression  [FE]                        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  ((  xA  -  xB)  <  =  absYB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	((  xA  -  xB)  <  =  absYB)&&(FastMath.max(absYA,  yB)  <  getFunctionValueAccuracy()));	  ((    xA    -    xB)    <    =    absYB)||(FastMath.max(absYA,    yB)    <    getFunctionValueAccuracy()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
317	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
318	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  fastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	22	None	add
319	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  final    double    xA    =    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(yA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	79	None	replace
320	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xA));    final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	69	None	add
321	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
322	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(yB));    final  double  xxTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	58	None	add
323	[BUG]  [BUGGY]  int  xA  =  Math.min(agingA,  xB,  agingA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  int  xA  =  Math.min(agingA,  xB,  agingA);  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	int  xA  =  Math.min(agingA,  xB,  agingA);	  int    xA    =    Math.min(agingA,    xB);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	80	None	replace
324	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	54	None	add
325	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]      AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(yB));    final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	54	None	add
326	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xxA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xxA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.min(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xxA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	5	None	add
327	[BUG]  [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  final  double  xA  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getRelativeAccuracy()    *    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final  double  xA  =  getRelativeAccuracy()  *  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));	  	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	1	None	add
328	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    AssertionError    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final  double  xTol  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yB),  FastMath.abs(xA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	20	None	add
329	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	add	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	49	1	replace
330	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xA));  [FE]  TooManyEvaluationsException  [FE]              TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(xA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(xB),    FastMath.abs(xA));    	compilable	  [FE]  TooManyEvaluationsException  	49	1	replace
331	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB)-  1,  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB)-  1,  FastMath.abs(yB));  [BUGGY]      final  double  xTol  =  getAbsoluteAccuracy()  +        getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB)-  1,  FastMath.abs(yB));	  final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	92	None	replace
332	[BUG]  [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	99	None	replace
333	[BUG]  [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getRelativeAccuracy()  +  getAbsoluteAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));	  final    double    xTol    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getRelativeAccuracy()    +    getAbsoluteAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	99	None	replace
334	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [CE]  variable  xTol  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA),  FastMath.abs(yB));  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yA),    FastMath.abs(yB));    final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(yA));	  	non-compiled	[CE]  variable  xTol  is  already  defined  in  method  doSolve()	77	None	add
335	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    final    double    xA    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xB),    FastMath.abs(xA));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	97	None	replace
336	[BUG]  [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]        AssertionError      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xA  =  getAbsoluteAccuracy()  *  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xB),  FastMath.abs(xA));	  final    double    xTol    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    final    double    xA    =    getAbsoluteAccuracy()    *    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(xA),    FastMath.abs(xB));    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	96	None	replace
337	[BUG]  [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [CE]  no  suitable  method  found  for  min(double)  [FE]          TooManyEvaluationsException      [CONTEXT]      int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];  double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {        [BUGGY]  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));  [BUGGY]      getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  case  ANY_SIDE  :  return  absYA  <  absYB  ?  xA  :  xB;  case  LEFT_SIDE  :  return  xA;  case  RIGHT_SIDE  :  return  xB;  case  BELOW_SIDE  :  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	211	212	1	replace	final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.min(FastMath.abs(yB));	  final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.max(FastMath.abs(yB),    FastMath.abs(xB));    final    double    xTol    =    getAbsoluteAccuracy()    +    getRelativeAccuracy()    *    FastMath.min(FastMath.abs(yB),    FastMath.abs(xB));    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	10	None	replace
