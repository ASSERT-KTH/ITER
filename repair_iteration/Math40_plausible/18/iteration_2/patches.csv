bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB)-  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    agingB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	51	None	replace
2	[BUG]  [BUGGY]  int  agingB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    agingB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
3	[BUG]  [BUGGY]  long  agingB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  agingB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    agingB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
4	[BUG]  [BUGGY]  double  yA  =  y[a];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[a];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[a];	  double    yA    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	13	None	replace
5	[BUG]  [BUGGY]  double  yA  =  y[0];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[0];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[0];	  double    yA    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	13	None	replace
6	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    Double    absYB    =    FastMath.abs(yA);    	compilable	  [FE]  TooManyEvaluationsException  	3	2	replace
7	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yA);  [FE]  TooManyEvaluationsException  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    Double    absYB    =    FastMath.abs(yA);    	compilable	  [FE]  TooManyEvaluationsException  	3	2	replace
8	[BUG]  [BUGGY]  double  absY  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  absYB  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absY  =  FastMath.abs(yB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absY  =  FastMath.abs(yB);	  double    absYAB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol  absYB	55	None	replace
9	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(xB  -  2);	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
10	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  2);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB  -  2);	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
11	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)/  2;	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
12	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  2;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  2;	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
13	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(xB  -  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	1	replace
14	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  0);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB  -  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	1	replace
15	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  /  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	1	replace
16	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  0);  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  /  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	1	replace
17	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Double  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
18	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  double  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  double  absYB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    double  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
19	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absXB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absXB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Double  absXB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
20	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Integer  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Integer  absYB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Integer  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
21	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Single  absYB  =  FastMath.abs(xB);  [CE]  cannot  find  symbol  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Single  absYB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Single  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
22	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(xA);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYA  =  FastMath.abs(xA);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(xA);	  double    absYA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	15	None	replace
23	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Double  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	67	None	add
24	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    double  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	67	None	add
25	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1));  [CE]  ';'  expected  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Double  absYB  =  FastMath.abs(yB  -  1));	  	non-compiled	[CE]  ';'  expected	67	None	add
26	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Single  absYB  =  FastMath.abs(yB  -  1);  [CE]  cannot  find  symbol  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Single  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Single  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
27	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absXB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absXB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Double  absXB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	67	None	add
28	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  double  absYB  =  FastMath.abs(xB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    double  absYB  =  FastMath.abs(xB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	23	None	add
29	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  Double  absYB  =  FastMath.abs(xB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  Double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    Double  absYB  =  FastMath.abs(xB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	23	None	add
30	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  absYB  =  FastMath.abs(xB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    int  absYB  =  FastMath.abs(xB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	23	None	add
31	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  double  absYB  =  FastMath.abs(xB  -  1));  [CE]  ';'  expected  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  double  absYB  =  FastMath.abs(xB  -  1));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    double  absYB  =  FastMath.abs(xB  -  1));	  	non-compiled	[CE]  ';'  expected	23	None	add
32	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  xB  =  FastMath.abs(xB  -  1);  [CE]  variable  xB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  xB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    int  xB  =  FastMath.abs(xB  -  1);	  	non-compiled	[CE]  variable  xB  is  already  defined  in  method  doSolve()	23	None	add
33	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  double  absYB  =  FastMath.abs(yB)-  2;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  double  absYB  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    double  absYB  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	35	None	add
34	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  Double  absYB  =  FastMath.abs(yB)-  2;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  Double  absYB  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    Double  absYB  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	35	None	add
35	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  absYB  =  FastMath.abs(yB)-  2;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  absYB  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    int  absYB  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	35	None	add
36	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  agingB  =  FastMath.abs(yB)-  2;  [CE]  possible  loss  of  precision  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  agingB  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    int  agingB  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
37	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  yB  =  FastMath.abs(yB)-  2;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  yB  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    int  yB  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	35	None	add
38	[BUG]  [BUGGY]  Double  yA  =  FastMath.abs(yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  yA  =  FastMath.abs(yB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  yA  =  FastMath.abs(yB);	  Double    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	54	None	replace
39	[BUG]  [BUGGY]  Double  yA  =  FastMath.abs(y);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  yA  =  FastMath.abs(y);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  yA  =  FastMath.abs(y);	  Double    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	54	None	replace
40	[BUG]  [BUGGY]  double  yA  =  Math.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  Math.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  Math.abs(yA);	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	14	None	replace
41	[BUG]  [BUGGY]  double  yA  =  Math.abs(y);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  Math.abs(y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  Math.abs(y);	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	14	None	replace
42	[BUG]  [BUGGY]  double  yA  =  Math.abs(yB,  xA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  Math.abs(yB,  xA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  Math.abs(yB,  xA);	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	14	None	replace
43	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
44	[BUG]  [BUGGY]  long  absYB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
45	[BUG]  [BUGGY]  double  yB  =  tmpX[0];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  tmpX[0];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  tmpX[0];	  double    yB    =    y[0];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	39	None	replace
46	[BUG]  [BUGGY]  double  yB  =  y[0]  +  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[0]  +  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[0]  +  absYA;	  double    yB    =    y[0];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	39	None	replace
47	[BUG]  [BUGGY]  Double  absYAB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  absYB  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYAB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYAB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    absYAB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol  absYB	60	None	replace
48	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yB)-  1;  int  absYB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yB)-  1;  int  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yB)-  1;  int  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    long    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	62	None	replace
49	[BUG]  [BUGGY]  double  yB  =  y[a]  -  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[a]  -  1;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[a]  -  1;	  double    yB    =    y[a];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	38	None	replace
50	[BUG]  [BUGGY]  double  yB  =  y[a]  +  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[a]  +  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[a]  +  absYA;	  double    yB    =    y[a];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	38	None	replace
51	[BUG]  [BUGGY]  double  yB  =  y[a]  -  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[a]  -  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[a]  -  absYA;	  double    yB    =    y[a];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	38	None	replace
52	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absYA);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  xB,  absYA);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	12	None	replace
53	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB,  yB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB,  yB);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	12	None	replace
54	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA,  xB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA,  xB);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	12	None	replace
55	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(y,  xB);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(y,  xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(y,  xB);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	12	None	replace
56	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB));  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB));	  Double    absYB    =    FastMath.abs(yB);    Double    absYB    =    FastMath.abs(yB));    	non-compiled	[CE]  ';'  expected	45	None	replace
57	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)%  2;	  double    absYB    =    FastMath.abs(yB)%    1;    	compilable	  [FE]  TooManyEvaluationsException  	73	1	replace
58	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  2;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)%  2;	  double    absYB    =    FastMath.abs(yB)%    1;    	compilable	  [FE]  TooManyEvaluationsException  	73	1	replace
59	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  3;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)%  3;	  double    absYB    =    FastMath.abs(yB)%    1;    	compilable	  [FE]  TooManyEvaluationsException  	73	1	replace
60	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  3;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  3;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)%  3;	  double    absYB    =    FastMath.abs(yB)%    1;    	compilable	  [FE]  TooManyEvaluationsException  	73	1	replace
61	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(xB  -  1);	  Double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
62	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB  -  1);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(xB  -  1);	  Double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
63	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yB  -  1);  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    absYB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
64	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yA  -  1);  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yA  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yA  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    absYB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  possible  loss  of  precision	32	None	replace
65	[BUG]  [BUGGY]  Double  absXB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  absYB  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absXB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absXB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    absXB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol  absYB	44	None	replace
66	[BUG]  [BUGGY]  Double  absXB  =  FastMath.abs(xB);  [CE]  cannot  find  symbol  absYB  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absXB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absXB  =  FastMath.abs(xB);	  Double    absYB    =    FastMath.abs(yB);    Double    absXB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol  absYB	44	None	replace
67	[BUG]  [BUGGY]  if(xB  ==  null)  {  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1));  }  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  if(xB  ==  null)  {  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1));  }  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	if(xB  ==  null)  {  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1));  }	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	non-compiled	[CE]  ';'  expected	33	None	replace
68	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yA  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	compilable	  [FE]  TooManyEvaluationsException  	33	1	replace
69	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA  -  1);  [FE]  TooManyEvaluationsException  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	compilable	  [FE]  TooManyEvaluationsException  	33	1	replace
70	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yB  -  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	33	None	replace
71	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(yB  -  1);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    agingB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	84	None	replace
72	[BUG]  [BUGGY]  int  agingB  =  FastMath.abs(yB  -  1);  [CE]  possible  loss  of  precision  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    agingB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
73	[BUG]  [BUGGY]  long  agingB  =  FastMath.abs(yB  -  1);  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  agingB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  agingB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    agingB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  possible  loss  of  precision	84	None	replace
74	[BUG]  [BUGGY]  double  agingA  =  Math.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.abs(yA);	  double    agingA    =    Math.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	57	None	replace
75	[BUG]  [BUGGY]  double  agingA  =  Math.abs(xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.abs(xB);	  double    agingA    =    Math.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	57	None	replace
76	[BUG]  [BUGGY]  double  agingA  =  Math.abs(xA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.abs(xA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.abs(xA);	  double    agingA    =    Math.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	57	None	replace
77	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yA);  [CE]  possible  loss  of  precision  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    long    absYB    =    FastMath.abs(yA);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
78	[BUG]  [BUGGY]  long  absYB  =  FastMath.abs(yA);  [CE]  possible  loss  of  precision  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  absYB  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  absYB  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    long    absYB    =    FastMath.abs(yA);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
79	[BUG]  [BUGGY]  long  absYB  =  FastMath.abs(yB);  [CE]  possible  loss  of  precision  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  absYB  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(yA);    long    absYB    =    FastMath.abs(yA);    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
80	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(y,  yB);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(y,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(y,  yB);	  double    absYB    =    FastMath.abs(yB,    y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	71	None	replace
81	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA,  yB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA,  yB);	  double    absYB    =    FastMath.abs(yB,    y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	71	None	replace
82	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  yB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB,  yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  yB);	  double    absYB    =    FastMath.abs(yB,    y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	71	None	replace
83	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yB);  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(xB);    int    absYB    =    FastMath.abs(xB);    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
84	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(xB);  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    absYB    =    FastMath.abs(xB);    	non-compiled	[CE]  possible  loss  of  precision	20	None	replace
85	[BUG]  [BUGGY]  double  yB  =  y[this.signChangeIndex  -  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[this.signChangeIndex  -  1];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[this.signChangeIndex  -  1];	  double    yB    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	37	None	replace
86	[BUG]  [BUGGY]  double  yB  =  y[x.length  -  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[x.length  -  1];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[x.length  -  1];	  double    yB    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	37	None	replace
87	[BUG]  [BUGGY]  double  yB  =  y[signChangeIndex  -  1]  +  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[signChangeIndex  -  1]  +  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[signChangeIndex  -  1]  +  absYA;	  double    yB    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	37	None	replace
88	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  double  absYB  =  FastMath.abs(yB  /  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  double  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    double  absYB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	79	None	add
89	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  Double  absYB  =  FastMath.abs(yB  /  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  Double  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    Double  absYB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	79	None	add
90	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  absYB  =  FastMath.abs(yB  /  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    int  absYB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	79	None	add
91	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  long  absYB  =  FastMath.abs(yB  /  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  long  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    long  absYB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	79	None	add
92	[BUG]  [BUGGY]  double  yB  =  y[this.signChangeIndex  +  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[this.signChangeIndex  +  1];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[this.signChangeIndex  +  1];	  double    yB    =    y[signChangeIndex    +    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	75	None	replace
93	[BUG]  [BUGGY]  double  yB  =  y[signChangeIndex  +  2];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[signChangeIndex  +  2];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[signChangeIndex  +  2];	  double    yB    =    y[signChangeIndex    +    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	75	None	replace
94	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    Double    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	48	None	replace
95	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    Double    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	48	None	replace
96	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yA)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	47	2	replace
97	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA)-  1;  [FE]  TooManyEvaluationsException  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	47	2	replace
98	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(y)-  1;  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(y)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(y)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    double    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	47	None	replace
99	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  double  absYB  =  FastMath.abs(yB)/  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    double  absYB  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	25	None	add
100	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  Double  absYB  =  FastMath.abs(yB)/  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  Double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    Double  absYB  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	25	None	add
101	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  absYB  =  FastMath.abs(yB)/  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    int  absYB  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	25	None	add
102	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  long  absYB  =  FastMath.abs(yB)/  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  long  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    long  absYB  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	25	None	add
103	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  /  2);	  double    absYB    =    FastMath.abs(yB    /    1);    	compilable	  [FE]  TooManyEvaluationsException  	80	1	replace
104	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  /  2);	  double    absYB    =    FastMath.abs(yB    /    1);    	compilable	  [FE]  TooManyEvaluationsException  	80	1	replace
105	[BUG]  [BUGGY]  int  agingA  =  FastMath.abs(xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingA  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingA  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingA    =    FastMath.abs(xB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	53	None	replace
106	[BUG]  [BUGGY]  int  agingA  =  FastMath.abs(yB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingA  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingA  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(xB);    int    agingA    =    FastMath.abs(xB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	53	None	replace
107	[BUG]  [BUGGY]  Integer  agingA  =  FastMath.abs(xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  agingA  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  agingA  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingA    =    FastMath.abs(xB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	53	None	replace
108	[BUG]  [BUGGY]  xB  =  FastMath.abs(xB);  [CE]  cannot  find  symbol  absYB  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	xB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	non-compiled	[CE]  cannot  find  symbol  absYB	22	None	replace
109	[BUG]  [BUGGY]  double  xB  =  FastMath.abs(xB);  [CE]  variable  xB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  xB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	non-compiled	[CE]  variable  xB  is  already  defined  in  method  doSolve()	22	None	replace
110	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB);  xB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	compilable	  [FE]  TooManyEvaluationsException  	22	1	replace
111	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB);  xB  =  FastMath.abs(xB);  [FE]  TooManyEvaluationsException  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB);  xB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	compilable	  [FE]  TooManyEvaluationsException  	22	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	compilable	  [FE]  AssertionError  	22	5	replace
113	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(yB);  [FE]  AssertionError  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	compilable	  [FE]  AssertionError  	22	5	replace
114	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  double  absYB  =  FastMath.abs(yB  -  2);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  double  absYB  =  FastMath.abs(yB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    double  absYB  =  FastMath.abs(yB  -  2);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	65	None	add
115	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  Double  absYB  =  FastMath.abs(yB  -  2);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  Double  absYB  =  FastMath.abs(yB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    Double  absYB  =  FastMath.abs(yB  -  2);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	65	None	add
116	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  absYB  =  FastMath.abs(yB  -  2);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  absYB  =  FastMath.abs(yB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    int  absYB  =  FastMath.abs(yB  -  2);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	65	None	add
117	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  double  absYB  =  FastMath.abs(yB  -  2));  [CE]  ';'  expected  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  double  absYB  =  FastMath.abs(yB  -  2));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    double  absYB  =  FastMath.abs(yB  -  2));	  	non-compiled	[CE]  ';'  expected	65	None	add
118	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  3;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)/  3;	  double    absYB    =    FastMath.abs(yB)/    1;    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
119	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  3;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  3;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  3;	  double    absYB    =    FastMath.abs(yB)/    1;    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
120	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  4;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)/  4;	  double    absYB    =    FastMath.abs(yB)/    1;    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
121	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  4;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  4;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  4;	  double    absYB    =    FastMath.abs(yB)/    1;    	compilable	  [FE]  TooManyEvaluationsException  	26	1	replace
122	[BUG]  [BUGGY]  double  yB  =  y[nbPoints];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[nbPoints];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[nbPoints];	  double    yB    =    y[bPoints];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	56	None	replace
123	[BUG]  [BUGGY]  double  yB  =  y[bPoints]  +  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[bPoints]  +  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[bPoints]  +  absYA;	  double    yB    =    y[bPoints];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	56	None	replace
124	[BUG]  [BUGGY]  int  yA  =  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  yA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  yA  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    int    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	52	None	replace
125	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  yA  =  FastMath.abs(yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  yA  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yA);  int  yA  =  FastMath.abs(yB);	  double    absYB    =    FastMath.abs(yA);    int    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	52	None	replace
126	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(y);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(y);	  double    absYB    =    FastMath.abs(yA);    int    absYB    =    FastMath.abs(yA);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
127	[BUG]  [BUGGY]  Single  absYB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Single  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Single  absYB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Single    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
128	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    Double  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	69	None	add
129	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    double  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	69	None	add
130	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Single  absYB  =  FastMath.abs(yB)-  1;  [CE]  cannot  find  symbol  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Single  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    Single  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
131	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absXB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absXB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    Double  absXB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	69	None	add
132	[BUG]  [BUGGY]  int  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingA  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    int    agingA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	5	None	replace
133	[BUG]  [BUGGY]  Integer  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  agingA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  agingA  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    int    agingA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	5	None	replace
134	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(xB)-  2;	  double    absYB    =    FastMath.abs(yB)-    2;    	compilable	  [FE]  TooManyEvaluationsException  	36	2	replace
135	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB)-  2;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB)-  2;	  double    absYB    =    FastMath.abs(yB)-    2;    	compilable	  [FE]  TooManyEvaluationsException  	36	2	replace
136	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  double  absYB  =  FastMath.abs(yB)%  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  double  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)%    1;    double  absYB  =  FastMath.abs(yB)%  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	72	None	add
137	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  Double  absYB  =  FastMath.abs(yB)%  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  Double  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)%    1;    Double  absYB  =  FastMath.abs(yB)%  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	72	None	add
138	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  int  absYB  =  FastMath.abs(yB)%  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  int  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)%    1;    int  absYB  =  FastMath.abs(yB)%  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	72	None	add
139	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  double  absYB  =  FastMath.abs(yB)%)  1;  [CE]  illegal  start  of  expression  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  double  absYB  =  FastMath.abs(yB)%)  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)%    1;    double  absYB  =  FastMath.abs(yB)%)  1;	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
140	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  long  absYB  =  FastMath.abs(yB)%  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  long  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)%    1;    long  absYB  =  FastMath.abs(yB)%  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	72	None	add
141	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(yB)/  1;	  Double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	70	1	replace
142	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)/  1;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB)/  1;	  Double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	70	1	replace
143	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  double  absYB  =  FastMath.abs(yB  -  0);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    double  absYB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	63	None	add
144	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  Double  absYB  =  FastMath.abs(yB  -  0);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  Double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    Double  absYB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	63	None	add
145	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  absYB  =  FastMath.abs(yB  -  0);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    int  absYB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	63	None	add
146	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  yB  =  FastMath.abs(yB  -  0);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  yB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    int  yB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	63	None	add
147	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  long  absYB  =  FastMath.abs(yB  -  0);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  long  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    long  absYB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	63	None	add
148	[BUG]  [BUGGY]  int  yB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  yB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  yB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    yB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	50	None	replace
149	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    yB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	50	None	replace
150	[BUG]  [BUGGY]  Integer  yB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  yB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  yB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    yB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	50	None	replace
151	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(xB,  yB);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYA  =  FastMath.abs(xB,  yB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(xB,  yB);	  double    absYA    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	17	None	replace
152	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(yA,  xB);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYA  =  FastMath.abs(yA,  xB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(yA,  xB);	  double    absYA    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	17	None	replace
153	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(y,  xB);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYA  =  FastMath.abs(y,  xB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(y,  xB);	  double    absYA    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	17	None	replace
154	[BUG]  [BUGGY]  double  yA  =  y[this.signChangeIndex  -  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[this.signChangeIndex  -  1];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[this.signChangeIndex  -  1];	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
155	[BUG]  [BUGGY]  double  yA  =  y[signChangeIndex  -  1]  +  absYA;  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[signChangeIndex  -  1]  +  absYA;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[signChangeIndex  -  1]  +  absYA;	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
156	[BUG]  [BUGGY]  double  yA  =  y[signChangeIndex  -  2];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[signChangeIndex  -  2];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[signChangeIndex  -  2];	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
157	[BUG]  [BUGGY]  double  agingB  =  FastMath.abs(xB);  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingB    =    FastMath.abs(xB);    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	21	None	replace
158	[BUG]  [BUGGY]  int  agingB  =  FastMath.abs(xB);  [CE]  possible  loss  of  precision  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingB    =    FastMath.abs(xB);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
159	[BUG]  [BUGGY]  long  agingB  =  FastMath.abs(xB);  [CE]  possible  loss  of  precision  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  agingB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  agingB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingB    =    FastMath.abs(xB);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
160	[BUG]  [BUGGY]  int  yB  =  FastMath.abs(yB  -  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  yB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  yB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    yB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	34	None	replace
161	[BUG]  [BUGGY]  Integer  yB  =  FastMath.abs(yB  -  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  yB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  yB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    yB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	34	None	replace
162	[BUG]  [BUGGY]  double  yB  =  y[this.signChangeIndex]  +  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[this.signChangeIndex]  +  1;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[this.signChangeIndex]  +  1;	  double    yB    =    y[this.signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	76	None	replace
163	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB),  relativeAccuracy);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB),  relativeAccuracy);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB),  relativeAccuracy);	  double    agingA    =    Math.max(relativeAccuracy    *    Math.abs(xB));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	58	None	replace
164	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  relativeAccuracy));  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  relativeAccuracy));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  relativeAccuracy));	  double    agingA    =    Math.max(relativeAccuracy    *    Math.abs(xB));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	58	None	replace
165	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xA));  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xA));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xA));	  double    agingA    =    Math.max(relativeAccuracy    *    Math.abs(xB));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	58	None	replace
166	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(y,  absYA);  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(y,  absYA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(y,  absYA);	  Double    absYB    =    FastMath.abs(y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	9	None	replace
167	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xA,  yB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  FastMath.abs(xA,  yB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(xA,  yB);	  double    agingA    =    FastMath.abs(xA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	29	None	replace
168	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    absXB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	44	1	replace
169	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);  [FE]  TooManyEvaluationsException  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    absXB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	44	1	replace
170	[BUG]  [BUGGY]  Integer  yB  =  FastMath.abs(yB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  yB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  yB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	42	None	replace
171	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  yB  =  FastMath.abs(yB  -  2);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  yB  =  FastMath.abs(yB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    int  yB  =  FastMath.abs(yB  -  2);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	65	None	add
172	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  *  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  *  2);	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
173	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  *  2);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  *  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  *  2);	  double    absYB    =    FastMath.abs(yB    -    2);    	compilable	  [FE]  TooManyEvaluationsException  	66	1	replace
174	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB);  int  yA  =  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  int  yA  =  FastMath.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB);  int  yA  =  FastMath.abs(yA);	  double    absYB    =    FastMath.abs(yA);    int    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	52	None	replace
175	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  1;  Double  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    Double    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	48	None	replace
176	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  yB  =  FastMath.abs(yB  /  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  yB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    int  yB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	79	None	add
177	[BUG]  [BUGGY]  double  yB  =  y[bPoints  -  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[bPoints  -  1];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[bPoints  -  1];	  double    yB    =    y[bPoints];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	56	None	replace
178	[BUG]  [BUGGY]  double  yB  =  y[endPoints];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[endPoints];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[endPoints];	  double    yB    =    y[bPoints];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	56	None	replace
179	[BUG]  [BUGGY]  double  yA  =  y[bsYA  -  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[bsYA  -  1];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[bsYA  -  1];	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
180	[BUG]  [BUGGY]  double  yA  =  y[bsY  -  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[bsY  -  1];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[bsY  -  1];	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
181	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absYAB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Double  absYAB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    Double  absYAB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	69	None	add
182	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yA,  xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  FastMath.abs(yA,  xB);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(yA,  xB);	  double    agingA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	27	None	replace
183	[BUG]  [BUGGY]  double  yB  =  yA[a];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  yA[a];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  yA[a];	  double    yB    =    y[a];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	38	None	replace
184	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(yB));  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(yB));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(yB));	  double    agingA    =    Math.max(relativeAccuracy    *    Math.abs(xB));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	58	None	replace
185	[BUG]  [BUGGY]  double  yB  =  y[1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[1];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[1];	  double    yB    =    y[0];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	39	None	replace
186	[BUG]  [BUGGY]  double  yB  =  yA[0];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  yA[0];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  yA[0];	  double    yB    =    y[0];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	39	None	replace
187	[BUG]  [BUGGY]  double  yB  =  y[0]  +  getAbsoluteAccuracy();  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[0]  +  getAbsoluteAccuracy();  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[0]  +  getAbsoluteAccuracy();	  double    yB    =    y[0];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	39	None	replace
188	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYAB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  absYAB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Double  absYAB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	67	None	add
189	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yb);  [CE]  cannot  find  symbol  yb  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yb);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yb);	  Double    absYB    =    FastMath.abs(yB);    Double    absYB    =    FastMath.abs(yb);    	non-compiled	[CE]  cannot  find  symbol  yb	61	None	replace
190	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yY);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  FastMath.abs(yY);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  FastMath.abs(yY);	  double    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	10	None	replace
191	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  1;  int  absYB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	49	None	replace
192	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB);  int  agingB  =  FastMath.abs(xB);  [CE]  possible  loss  of  precision  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  int  agingB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB);  int  agingB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    int    agingB    =    FastMath.abs(xB);    	non-compiled	[CE]  possible  loss  of  precision	21	None	replace
193	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  *  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  *  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	2	replace
194	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  *  0);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  *  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  *  0);	  double    absYB    =    FastMath.abs(yB    -    0);    	compilable	  [FE]  TooManyEvaluationsException  	64	2	replace
195	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(yB  -  0);	  Double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
196	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  0);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB  -  0);	  Double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	68	1	replace
197	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2.0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  /  2.0);	  double    absYB    =    FastMath.abs(yB    /    1);    	compilable	  [FE]  TooManyEvaluationsException  	80	1	replace
198	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2.0);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  2.0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  /  2.0);	  double    absYB    =    FastMath.abs(yB    /    1);    	compilable	  [FE]  TooManyEvaluationsException  	80	1	replace
199	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  yB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  yB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  1;  int  yB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    yB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	50	None	replace
200	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absYB);  [CE]  no  suitable  method  found  for  abs(double,double,double)  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absYB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  xB,  absYB);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double,double)	12	None	replace
201	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  yB  =  FastMath.abs(yB)/  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  yB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    int  yB  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	25	None	add
202	[BUG]  [BUGGY]  Integer  absYB  =  FastMath.abs(yB  -  1);  [CE]  incompatible  types  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Integer  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Integer  absYB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    int    absYB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  incompatible  types	32	None	replace
203	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yA);  Single  absYB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yA);  Single  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yA);  Single  absYB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Single    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
204	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB);  Double  yB  =  FastMath.abs(yB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB);  Double  yB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB);  Double  yB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	82	None	replace
205	[BUG]  [BUGGY]  double  yB  =  Math.abs(yB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  Math.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  Math.abs(yB);	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	14	None	replace
206	[BUG]  [BUGGY]  double  yA  =  Math.abs(yB)-  1;  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                      TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  Math.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  Math.abs(yB)-  1;	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	14	None	replace
207	[BUG]  [BUGGY]  double  yA  =  y[advancedA];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[advancedA];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[advancedA];	  double    yA    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	13	None	replace
208	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  double  agingB  =  FastMath.abs(yB)-  1;  [CE]  variable  agingB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  double  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)-  1;  double  agingB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    agingB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  agingB  is  already  defined  in  method  doSolve()	51	None	replace
209	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB,  y);  [CE]  no  suitable  method  found  for  abs(double,double[])  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB,  y);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB,  y);	  Double    absYB    =    FastMath.abs(y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double[])	9	None	replace
210	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  agingA  =  FastMath.abs(yB)-  2;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  int  agingA  =  FastMath.abs(yB)-  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    2;    int  agingA  =  FastMath.abs(yB)-  2;	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	35	None	add
211	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYAB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYAB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Double  absYAB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
212	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(yB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Double  absYB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	7	None	add
213	[BUG]  [BUGGY]  double  xA  =  FastMath.abs(xA);  [CE]  variable  xA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  xA  =  FastMath.abs(xA);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  xA  =  FastMath.abs(xA);	  double    yA    =    FastMath.abs(xA);    	non-compiled	[CE]  variable  xA  is  already  defined  in  method  doSolve()	11	None	replace
214	[BUG]  [BUGGY]  long  absYB  =  FastMath.abs(yB  -  1);  [CE]  possible  loss  of  precision  [FE]        TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  long  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	long  absYB  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1);    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
215	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  agingB  =  FastMath.abs(yB  -  0);  [CE]  possible  loss  of  precision  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  int  agingB  =  FastMath.abs(yB  -  0);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    0);    int  agingB  =  FastMath.abs(yB  -  0);	  	non-compiled	[CE]  possible  loss  of  precision	63	None	add
216	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Doppel  absYB  =  FastMath.abs(yB)-  1;  [CE]  cannot  find  symbol  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  Doppel  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB)-    1;    Doppel  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
217	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  yB  =  FastMath.abs(yB)/  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  yB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)-  1;  int  yB  =  FastMath.abs(yB)/  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    yB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	50	None	replace
218	[BUG]  [BUGGY]  double  yB  =  y[signChangeIndex  -  2];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[signChangeIndex  -  2];  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[signChangeIndex  -  2];	  double    yB    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	37	None	replace
219	[BUG]  [BUGGY]  double  yB  =  y[a]  *  absYA;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[a]  *  absYA;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[a]  *  absYA;	  double    yB    =    y[a];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	38	None	replace
220	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)*  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)*  2;	  double    absYB    =    FastMath.abs(yB)-    2;    	compilable	  [FE]  TooManyEvaluationsException  	36	1	replace
221	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)*  2;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)*  2;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)*  2;	  double    absYB    =    FastMath.abs(yB)-    2;    	compilable	  [FE]  TooManyEvaluationsException  	36	1	replace
222	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  xB  =  FastMath.abs(xB);  [CE]  variable  xB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(xB);  Double  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(xB);    Double  xB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  xB  is  already  defined  in  method  doSolve()	7	None	add
223	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  agingA  =  FastMath.abs(yB  -  2);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  int  agingA  =  FastMath.abs(yB  -  2);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    2);    int  agingA  =  FastMath.abs(yB  -  2);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	65	None	add
224	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  agingA  =  FastMath.abs(xB  -  1);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  int  agingA  =  FastMath.abs(xB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB    -    1);    int  agingA  =  FastMath.abs(xB  -  1);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	23	None	add
225	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1));  [CE]  ';'  expected  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  -  1));	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	non-compiled	[CE]  ';'  expected	33	None	replace
226	[BUG]  [BUGGY]  int  agingA  =  FastMath.abs(yB  -  1);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingA  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingA  =  FastMath.abs(yB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    double    absYB    =    FastMath.abs(yB    -    1));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	33	None	replace
227	[BUG]  [BUGGY]  double  yA  =  y[signChangeIndex  +  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[signChangeIndex  +  1];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[signChangeIndex  +  1];	  double    yA    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	13	None	replace
228	[BUG]  [BUGGY]  double  yA  =  y[this.signChangeIndex];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[this.signChangeIndex];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[this.signChangeIndex];	  double    yA    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	13	None	replace
229	[BUG]  [BUGGY]  double  yA  =  y[assignChangeIndex  -  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  y[assignChangeIndex  -  1];  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[assignChangeIndex  -  1];	  double    yA    =    y[signChangeIndex    -    1];    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	83	None	replace
230	[BUG]  [BUGGY]  double  yB  =  y[bPoints]  -  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  y[bPoints]  -  1;  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[bPoints]  -  1;	  double    yB    =    y[bPoints];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	56	None	replace
231	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  agingB  =  FastMath.abs(yB  /  1);  [CE]  possible  loss  of  precision  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  int  agingB  =  FastMath.abs(yB  /  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    /    1);    int  agingB  =  FastMath.abs(yB  /  1);	  	non-compiled	[CE]  possible  loss  of  precision	79	None	add
232	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  yA));  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  yA));  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB,  yA));	  double    agingA    =    Math.max(relativeAccuracy    *    Math.abs(xB));    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	58	None	replace
233	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  agingA  =  FastMath.abs(yB)/  1;  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  int  agingA  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)/    1;    int  agingA  =  FastMath.abs(yB)/  1;	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	25	None	add
234	[BUG]  [BUGGY]  double  yB  =  Math.abs(yA);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                    TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yB  =  Math.abs(yA);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  Math.abs(yA);	  double    yA    =    Math.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	14	None	replace
235	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absY);  [CE]  cannot  find  symbol  absY  [FE]              TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB,  absY);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  xB,  absY);	  double    absYB    =    FastMath.abs(yB,    xB);    	non-compiled	[CE]  cannot  find  symbol  absY	12	None	replace
236	[BUG]  [BUGGY]  int  agingB  =  FastMath.abs(yB);  [CE]  possible  loss  of  precision  [FE]          TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  agingB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  agingB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    double    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  possible  loss  of  precision	43	None	replace
237	[BUG]  [BUGGY]  int  absYB  =  FastMath.abs(yB)/  1;  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  int  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	int  absYB  =  FastMath.abs(yB)/  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    absYB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
238	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(y);  Single  absYB  =  FastMath.abs(yB);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(y);  Single  absYB  =  FastMath.abs(yB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(y);  Single  absYB  =  FastMath.abs(yB);	  Double    absYB    =    FastMath.abs(yB);    Single    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	46	None	replace
239	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(y);  xB  =  FastMath.abs(xB);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(y);  xB  =  FastMath.abs(xB);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(y);  xB  =  FastMath.abs(xB);	  double    absYB    =    FastMath.abs(xB);    xB    =    FastMath.abs(xB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	22	None	replace
240	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  yB  =  FastMath.abs(yB  -  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  Double  yB  =  FastMath.abs(yB  -  1);  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB    -    1);    Double  yB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	67	None	add
241	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(y2);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  yA  =  FastMath.abs(y2);  [BUGGY]      double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  FastMath.abs(y2);	  double    yA    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	10	None	replace
242	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  byte  agingB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]                TooManyEvaluationsException      [CONTEXT]        final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];      [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  byte  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]      int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)-  1;  byte  agingB  =  FastMath.abs(yB)-  1;	  double    absYB    =    FastMath.abs(yB)-    1;    int    agingB    =    FastMath.abs(yB)-    1;    	non-compiled	[CE]  possible  loss  of  precision	51	None	replace
