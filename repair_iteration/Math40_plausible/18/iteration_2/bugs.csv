bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(xB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  FastMath.abs(xB);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(xB);	      double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	16	None	replace
2	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  double  absYB  =  FastMath.abs(yA);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  double  absYB  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    double  absYB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	4	None	add
3	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  Double  absYB  =  FastMath.abs(yA);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  Double  absYB  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    Double  absYB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	4	None	add
4	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  absYB  =  FastMath.abs(yA);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  absYB  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    int  absYB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	4	None	add
5	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  agingA  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    int  agingA  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	4	None	add
6	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  long  absYB  =  FastMath.abs(yA);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  long  absYB  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    long  absYB  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	4	None	add
7	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(xB);	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	1	replace
8	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(xB);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(xB);	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	1	replace
9	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(y);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(y);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(y);	  Double    absYB    =    FastMath.abs(yB);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	20	None	replace
10	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yA  =  FastMath.abs(yA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  FastMath.abs(yA);	      double    yA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	7	None	replace
11	[BUG]  [BUGGY]  double  yA  =  FastMath.abs(xA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yA  =  FastMath.abs(xA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  FastMath.abs(xA);	      double    yA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	7	None	replace
12	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB);  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB,  xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  xB);	  double    absYB    =    FastMath.abs(y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	3	None	replace
13	[BUG]  [BUGGY]  double  yA  =  y[signChangeIndex];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yA  =  y[signChangeIndex];  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[signChangeIndex];	      	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	6	None	replace
14	[BUG]  [BUGGY]  double  yA  =  Math.abs(yB);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yA  =  Math.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  Math.abs(yB);	      	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	6	None	replace
15	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(yA);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYA  =  FastMath.abs(yA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(yA);	      double    absYA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	18	None	replace
16	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(y);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYA  =  FastMath.abs(y);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(y);	      double    absYA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	18	None	replace
17	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(yB,  xB);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYA  =  FastMath.abs(yB,  xB);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(yB,  xB);	      double    absYA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	18	None	replace
18	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  double  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  double  absYB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    double  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
19	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  Double  absYB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    Double  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
20	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  absYB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  absYB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    int  absYB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
21	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  agingB  =  FastMath.abs(xB);  [CE]  possible  loss  of  precision  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  agingB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    int  agingB  =  FastMath.abs(xB);	  	non-compiled	[CE]  possible  loss  of  precision	1	None	add
22	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(xB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  xB  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    xB  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	1	None	add
23	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(xB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
24	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(xB  -  1);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
25	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)/  1;	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
26	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)/  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)/  1;	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
27	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(yA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  FastMath.abs(yA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(yA);	      double    agingA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	17	None	replace
28	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  FastMath.abs(xB);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(xB);	      double    agingA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	17	None	replace
29	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(xA);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  FastMath.abs(xA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(xA);	      double    agingA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	17	None	replace
30	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    double  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	12	None	add
31	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  Double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    Double  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	12	None	add
32	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  absYB  =  FastMath.abs(yB  -  1);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    int  absYB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	12	None	add
33	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1));  [CE]  ';'  expected  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  double  absYB  =  FastMath.abs(yB  -  1));  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    double  absYB  =  FastMath.abs(yB  -  1));	  	non-compiled	[CE]  ';'  expected	12	None	add
34	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  yB  =  FastMath.abs(yB  -  1);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  yB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    int  yB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	12	None	add
35	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)-  2;	  double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	15	2	replace
36	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  2;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)-  2;	  double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	15	2	replace
37	[BUG]  [BUGGY]  double  yB  =  y[signChangeIndex  -  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[signChangeIndex  -  1];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[signChangeIndex  -  1];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
38	[BUG]  [BUGGY]  double  yB  =  y[a];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[a];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[a];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
39	[BUG]  [BUGGY]  double  yB  =  y[0];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[0];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[0];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
40	[BUG]  [BUGGY]  Double  yB  =  FastMath.abs(yB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  yB  =  FastMath.abs(yB);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  yB  =  FastMath.abs(yB);	      Double    yB    =    FastMath.abs(y);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	11	None	replace
41	[BUG]  [BUGGY]  Double  yB  =  FastMath.abs(yA);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                  TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  yB  =  FastMath.abs(yA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  yB  =  FastMath.abs(yA);	      Double    yB    =    FastMath.abs(y);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	11	None	replace
42	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  absYB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	19	None	add
43	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  double  absYB  =  FastMath.abs(yB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  double  absYB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    double  absYB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	19	None	add
44	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absXB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  absXB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	19	None	add
45	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yB));  [CE]  ';'  expected  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yB));  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  absYB  =  FastMath.abs(yB));	  	non-compiled	[CE]  ';'  expected	19	None	add
46	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Single  absYB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Single  absYB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Single  absYB  =  FastMath.abs(yB);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
47	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    double  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	14	None	add
48	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    Double  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	14	None	add
49	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    int  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	14	None	add
50	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  yB  =  FastMath.abs(yB)-  1;  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  yB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    int  yB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	14	None	add
51	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  agingB  =  FastMath.abs(yB)-  1;  [CE]  possible  loss  of  precision  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  int  agingB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    int  agingB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  possible  loss  of  precision	14	None	add
52	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  yA  =  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yA);  int  yA  =  FastMath.abs(yA);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yA);    int  yA  =  FastMath.abs(yA);	  	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	4	None	add
53	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  agingA  =  FastMath.abs(xB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(xB);  int  agingA  =  FastMath.abs(xB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(xB);    int  agingA  =  FastMath.abs(xB);	  	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	1	None	add
54	[BUG]  [BUGGY]  Double  yA  =  FastMath.abs(yA);  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  yA  =  FastMath.abs(yA);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  yA  =  FastMath.abs(yA);	      double    yA    =    FastMath.abs(y);    	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	9	None	replace
55	[BUG]  [BUGGY]  double  absYAB  =  FastMath.abs(yB);  [CE]  cannot  find  symbol  absYB  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYAB  =  FastMath.abs(yB);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYAB  =  FastMath.abs(yB);	      double    absYA    =    FastMath.abs(yB);    	non-compiled	[CE]  cannot  find  symbol  absYB	18	None	replace
56	[BUG]  [BUGGY]  double  yB  =  y[bPoints];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[bPoints];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[bPoints];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
57	[BUG]  [BUGGY]  double  agingA  =  Math.abs(yB);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  Math.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.abs(yB);	      	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	6	None	replace
58	[BUG]  [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB));  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB));  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  Math.max(relativeAccuracy  *  Math.abs(xB));	      	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	6	None	replace
59	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yb);  [CE]  cannot  find  symbol  yb  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yb);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yb);	  double    absYB    =    FastMath.abs(xB);    	non-compiled	[CE]  cannot  find  symbol  yb	2	None	replace
60	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYAB  =  FastMath.abs(yB);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYAB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  absYAB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	19	None	add
61	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yb);  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  absYB  =  FastMath.abs(yb);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  absYB  =  FastMath.abs(yb);	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	19	None	add
62	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  long  absYB  =  FastMath.abs(yB)-  1;  [CE]  variable  absYB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)-  1;  long  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB)-    1;    long  absYB  =  FastMath.abs(yB)-  1;	  	non-compiled	[CE]  variable  absYB  is  already  defined  in  method  doSolve()	14	None	add
63	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  -  0);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
64	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  0);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  -  0);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
65	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  -  2);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
66	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  2);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  -  2);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
67	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(yB  -  1);	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	1	replace
68	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB  -  1);	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	1	replace
69	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	Double  absYB  =  FastMath.abs(yB)-  1;	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	2	replace
70	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  [FE]  TooManyEvaluationsException  [FE]      TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB)-  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double  absYB  =  FastMath.abs(yB)-  1;	  Double    absYB    =    FastMath.abs(yB);    	compilable	  [FE]  TooManyEvaluationsException  	20	2	replace
71	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB,  y);  [CE]  no  suitable  method  found  for  abs(double,double[])  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB,  y);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB,  y);	  double    absYB    =    FastMath.abs(y);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double[])	3	None	replace
72	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB)%  1;	  double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
73	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB)%  1;  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB)%  1;	  double    absYB    =    FastMath.abs(yB)-    1;    	compilable	  [FE]  TooManyEvaluationsException  	15	1	replace
74	[BUG]  [BUGGY]  double  absYA  =  FastMath.abs(yY);  [CE]  variable  absYA  is  already  defined  in  method  doSolve()  [FE]            TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYA  =  FastMath.abs(yY);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYA  =  FastMath.abs(yY);	      double    absYA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  absYA  is  already  defined  in  method  doSolve()	18	None	replace
75	[BUG]  [BUGGY]  double  yB  =  y[signChangeIndex  +  1];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[signChangeIndex  +  1];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[signChangeIndex  +  1];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
76	[BUG]  [BUGGY]  double  yB  =  y[this.signChangeIndex];  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]                TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  y[this.signChangeIndex];  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  y[this.signChangeIndex];	      double    yB    =    y[signChangeIndex];    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	10	None	replace
77	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yb);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  FastMath.abs(yb);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(yb);	      double    yB    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	16	None	replace
78	[BUG]  [BUGGY]  double  agingA  =  FastMath.abs(y);  [CE]  variable  agingA  is  already  defined  in  method  doSolve()  [FE]          TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  agingA  =  FastMath.abs(y);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  agingA  =  FastMath.abs(y);	      double    agingA    =    FastMath.abs(yB);    	non-compiled	[CE]  variable  agingA  is  already  defined  in  method  doSolve()	17	None	replace
79	[BUG]  [BUGGY]  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	add	double  absYB  =  FastMath.abs(yB  /  1);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
80	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  [FE]  TooManyEvaluationsException  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  /  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  absYB  =  FastMath.abs(yB  /  1);	  double    absYB    =    FastMath.abs(yB    -    1);    	compilable	  [FE]  TooManyEvaluationsException  	13	1	replace
81	[BUG]  [BUGGY]  double  yB  =  FastMath.abs(yC);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]        TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yB  =  FastMath.abs(yC);  [BUGGY]    double  absYB  =  FastMath.abs(yB);  int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yB  =  FastMath.abs(yC);	      double    yB    =    FastMath.abs(yA);    	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	21	None	replace
82	[BUG]  [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  yB  =  FastMath.abs(yB);  [CE]  variable  yB  is  already  defined  in  method  doSolve()  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  Double  absYB  =  FastMath.abs(yB);  Double  yB  =  FastMath.abs(yB);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	Double    absYB    =    FastMath.abs(yB);    Double  yB  =  FastMath.abs(yB);	  	non-compiled	[CE]  variable  yB  is  already  defined  in  method  doSolve()	19	None	add
83	[BUG]  [BUGGY]  double  yA  =  y[signChangeIndex  -  1];  [CE]  variable  yA  is  already  defined  in  method  doSolve()  [FE]              TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  yA  =  y[signChangeIndex  -  1];  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double  yA  =  y[signChangeIndex  -  1];	      	non-compiled	[CE]  variable  yA  is  already  defined  in  method  doSolve()	6	None	replace
84	[BUG]  [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  agingB  =  FastMath.abs(yB  -  1);  [CE]  possible  loss  of  precision  [FE]    TooManyEvaluationsException    [CONTEXT]      final  double[]  tmpX  =  new  double[x.length];  double  xA=  x[signChangeIndex  -  1];  double  yA=  y[signChangeIndex  -  1];  double  absYA  =  FastMath.abs(yA);  int  agingA  =  0;  double  xB=  x[signChangeIndex];  double  yB=  y[signChangeIndex];    [BUGGY]  double  absYB  =  FastMath.abs(yB  -  1);  int  agingB  =  FastMath.abs(yB  -  1);  [BUGGY]    int  agingB  =  0;  while  (true)  {  final  double  xTol  =  getAbsoluteAccuracy()  +  getRelativeAccuracy()  *  FastMath.max(FastMath.abs(xA),  FastMath.abs(xB));  if  (((xB  -  xA)  <=  xTol)  ||  (FastMath.max(absYA,  absYB)  <  getFunctionValueAccuracy()))  {  switch  (allowed)  {  [CLASS]  BracketingNthOrderBrentSolver  [METHOD]  doSolve  [RETURN_TYPE]  double  [VARIABLES]  AllowedSolution  allowed  boolean  double[]  tmpX  x  y  double  DEFAULT_ABSOLUTE_ACCURACY  REDUCTION_FACTOR  absYA  absYB  absoluteAccuracy  functionValueAccuracy  nextX  nextY  relativeAccuracy  targetY  xA  xB  xTol  yA  yB  int  DEFAULT_MAXIMAL_ORDER  MAXIMAL_AGING  agingA  agingB  end  maximalOrder  nbPoints  signChangeIndex  start  	projects/Math40/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java	0.3333333333333333	204	204	1	replace	double    absYB    =    FastMath.abs(yB    -    1);    int  agingB  =  FastMath.abs(yB  -  1);	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
