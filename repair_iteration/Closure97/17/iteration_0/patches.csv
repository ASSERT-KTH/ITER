bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  rvalInt;	break;  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
2	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  >  rvalInt;	break;  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
3	[BUG]  [BUGGY]  result  =  lval  <  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lval  <  <  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  rvalInt;	break;  	non-compiled	[CE]  >  expected	33	None	replace
4	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  [CE]  >  expected  [FE]          AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  rvalInt;	break;  	non-compiled	[CE]  >  expected	33	None	replace
5	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal;  [CE]  >  expected  [FE]            AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  rvalDecimal;	break;  	non-compiled	[CE]  >  expected	33	None	replace
6	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  rvalInt;  break;	break;  	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]    [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	  	break;  	compilable	  [FE]  ComparisonFailure  	33	2	replace
8	[BUG]  [BUGGY]    [FE]  ComparisonFailure  [FE]                AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]    [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	  	break;  	compilable	  [FE]  ComparisonFailure  	33	2	replace
9	[BUG]  [BUGGY]  result  =  lvalAfter  >=  rvalInt;  [CE]  cannot  find  symbol  lvalAfter  [FE]    AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalAfter  >=  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >=  rvalInt;	break;  	non-compiled	[CE]  cannot  find  symbol  lvalAfter	33	None	replace
10	[BUG]  [BUGGY]  result  =  lval  }  >  rvalInt;  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lval  }  >  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  }  >  rvalInt;	break;  	non-compiled	[CE]  ';'  expected	33	None	replace
11	[BUG]  [BUGGY]  result  =  lvalAfter  >>  rvalInt;  [CE]  cannot  find  symbol  lvalAfter  [FE]        AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalAfter  >>  rvalInt;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >>  rvalInt;	break;  	non-compiled	[CE]  cannot  find  symbol  lvalAfter	33	None	replace
12	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  rvalInt;  break;	break;  	non-compiled	[CE]  >  expected	33	None	replace
13	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalDouble;  [CE]  >  expected  [FE]      AssertionFailedError  [CONTEXT]  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [BUGGY]  result  =  lvalDouble  <  <  rvalDouble;  [BUGGY]  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError( "Unknown  shift  operator:   "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  rvalDouble;	break;  	non-compiled	[CE]  >  expected	33	None	replace
