bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
2	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
3	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	17	None	add
4	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	17	None	add
5	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
6	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	17	None	add
7	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
8	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  rvalInt;	  	non-compiled	[CE]  ';'  expected	17	None	add
9	[BUG]  [BUGGY]  result  =  lvalMethod  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalMethod  >>  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalMethod  >>  >  rvalInt;	  result    =    lvalMethod    >=    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
10	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rvalInt;	  result    =    lvalMethod    >=    rvalInt;    	non-compiled	[CE]  incompatible  types	48	None	replace
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  &  rvalInt;	  result    =    lvalDouble    &    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	39	2	replace
12	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  &  rvalInt;	  result    =    lvalDouble    &    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	39	2	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ^  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  ^  rvalInt;	  result    =    lvalDouble    &    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	39	2	replace
14	[BUG]  [BUGGY]  result  =  lvalInt  ^  rvalInt;  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ^  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ^  rvalInt;	  result    =    lvalDouble    &    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	39	2	replace
15	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  >  rvalInt;	  result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
16	[BUG]  [BUGGY]  result  =  lvalAfter  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >=  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >=  >  rvalInt;  break;	          result    =    lvalAfter    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
17	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  break;	          result    =    lvalInt    [Delete]    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
18	[BUG]  [BUGGY]  result  =  lvalLval  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLval  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  >>  rvalInt;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	7	None	replace
19	[BUG]  [BUGGY]  result  =  lvalLval  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLval  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  >=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  >=  rvalInt;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	7	None	replace
20	[BUG]  [BUGGY]  result  =  lvalLval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  4;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  4;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  result  =  lvalLval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  1;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  >  rvalInt;  break;	  result    =    lvalInt    >>    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  result  =  lval  <  <  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  2;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  2;	  result    =    lval    <    <    4;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
24	[BUG]  [BUGGY]  result  =  lval  <  <  3;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  3;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  3;	  result    =    lval    <    <    4;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  result  =  lval  <  <  8;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  8;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  8;	  result    =    lval    <    <    4;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  -  rvalInt;	  result    =    lvalDouble    -    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	38	2	replace
27	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  -  rvalInt;	  result    =    lvalDouble    -    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	38	2	replace
28	[BUG]  [BUGGY]  result  =  lvalNum  -  rvalNum;  [CE]  cannot  find  symbol  lvalNum  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  -  rvalNum;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  -  rvalNum;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	38	None	replace
29	[BUG]  [BUGGY]  result  =  lvalTolerance  -  rvalTolerance;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalTolerance  -  rvalTolerance;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalTolerance  -  rvalTolerance;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	38	None	replace
30	[BUG]  [BUGGY]  result  =  lvalShort  -  rvalShort;  [CE]  cannot  find  symbol  lvalShort  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  -  rvalShort;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  -  rvalShort;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	38	None	replace
31	[BUG]  [BUGGY]  result  =  lvalIndex  -  rvalIndex;  [CE]  cannot  find  symbol  lvalIndex  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  -  rvalIndex;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  -  rvalIndex;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	38	None	replace
32	[BUG]  [BUGGY]  result  =  lvalAdd  <  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  <  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  <  <  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	76	None	replace
33	[BUG]  [BUGGY]  result  =  lvalAdd  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >=  >  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
34	[BUG]  [BUGGY]  result  =  lvalAdd  >>  <  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >>  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >>  <  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	76	None	replace
35	[BUG]  [BUGGY]  result  =  lvalAdd  >=  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >=  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >=  <  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	76	None	replace
36	[BUG]  [BUGGY]  result  =  lvalLval  >>  rvalLval;  [CE]  cannot  find  symbol  lvalLval  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  >>  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  >>  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	42	None	replace
37	[BUG]  [BUGGY]  result  =  lvalLval  >=  rvalLval;  [CE]  cannot  find  symbol  lvalLval  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  >=  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  >=  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	42	None	replace
38	[BUG]  [BUGGY]  result  =  lvalLval  <  <  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  1;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
39	[BUG]  [BUGGY]  result  =  lvalLval  +  rvalLval;  [CE]  cannot  find  symbol  lvalLval  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  +  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  +  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	42	None	replace
40	[BUG]  [BUGGY]  result  =  lvalLval  <  <  4;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  4;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  4;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
41	[BUG]  [BUGGY]  result  =  lvalLval  <  <  2;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  2;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  2;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalLh;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalLh;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  rvalLh;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  >  expected	55	None	replace
43	[BUG]  [BUGGY]  result  =  lvalLh  -  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  -  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	55	None	replace
44	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  >>  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	55	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  >>  +  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	compilable	  [FE]  AssertionFailedError  	61	1	replace
46	[BUG]  [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  break;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  +  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	compilable	  [FE]  AssertionFailedError  	61	1	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
48	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  break;  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ^  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  ^  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
50	[BUG]  [BUGGY]  result  =  lvalInt  ^  rvalInt;  break;  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ^  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ^  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
51	[BUG]  [BUGGY]  result  =  lvalInt  }  rvalInt;  break;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  }  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  }  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	1	None	replace
52	[BUG]  [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  <  <  rvalInt;	  result    =    lvalAfter    >=    >    rvalInt;    	non-compiled	[CE]  >  expected	25	None	replace
53	[BUG]  [BUGGY]  result  =  lvalAfter  >=  <  rvalInt;  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >=  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >=  <  rvalInt;	  result    =    lvalAfter    >=    >    rvalInt;    	non-compiled	[CE]  >  expected	25	None	replace
54	[BUG]  [BUGGY]  result  =  lvalAfter  >>  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >>  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >>  <  rvalInt;	  result    =    lvalAfter    >=    >    rvalInt;    	non-compiled	[CE]  >  expected	25	None	replace
55	[BUG]  [BUGGY]  result  =  lvalAfter  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  lvalAfter  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  [Delete]  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  [Delete]  >  rvalInt;	  result    =    lvalAfter    >=    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalAfter	25	None	replace
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	compilable	  [FE]  ComparisonFailure  	56	2	replace
57	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	compilable	  [FE]  ComparisonFailure  	56	2	replace
58	[BUG]  [BUGGY]  result  =  lvalIndex  %  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	56	None	replace
59	[BUG]  [BUGGY]  result  =  lvalNum  %  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	56	None	replace
60	[BUG]  [BUGGY]  Result  =  lvalInt  %  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  Result  =  lvalInt  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	Result  =  lvalInt  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	56	None	replace
61	[BUG]  [BUGGY]  result  =  lvalShort  %  rvalInt;  [CE]  cannot  find  symbol  lvalShort  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	56	None	replace
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    >>    <    rvalInt;    	compilable	  [FE]  ComparisonFailure  	14	2	replace
63	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  [FE]  ComparisonFailure  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    >>    <    rvalInt;    	compilable	  [FE]  ComparisonFailure  	14	2	replace
64	[BUG]  [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  >=  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	52	None	replace
65	[BUG]  [BUGGY]  result  =  lvalDecimal!=  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal!=  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal!=  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	52	None	replace
66	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt!=  rvalInt;  break;	  result    =    lvalInt    +    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	30	None	replace
67	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  [Delete]  rvalInt;  break;	  result    =    lvalInt    +    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	30	None	replace
68	[BUG]  [BUGGY]  result  =  lvalInt  >>  rval;  break;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	62	None	replace
69	[BUG]  [BUGGY]  result  =  lvalInt  >=  rval;  break;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  incompatible  types	62	None	replace
70	[BUG]  [BUGGY]  result  =  lvalInt!=  rval;  break;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt!=  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  incompatible  types	62	None	replace
71	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rval;  break;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  [Delete]  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
72	[BUG]  [BUGGY]  result  =  lvalInt  ==  rval;  break;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  incompatible  types	62	None	replace
73	[BUG]  [BUGGY]  result  =  lvalLval  <  <  rval;  break;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  >  expected	62	None	replace
74	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  1;	  result    =    lvalInt    >=    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
75	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  rvalInt;  break;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  >>  rvalInt;  break;	  	non-compiled	[CE]  unreachable  statement	2	None	add
76	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  >=  rvalInt;  break;	  	non-compiled	[CE]  incompatible  types	2	None	add
77	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt!=  rvalInt;  break;	  	non-compiled	[CE]  incompatible  types	2	None	add
78	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  ==  rvalInt;  break;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  ==  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  ==  rvalInt;  break;	  	non-compiled	[CE]  incompatible  types	2	None	add
79	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  [Delete]  rvalInt;  break;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  [Delete]  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  [Delete]  rvalInt;  break;	  	non-compiled	[CE]  ';'  expected	2	None	add
80	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  rvalInt;  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  unreachable  statement	2	None	add
81	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    result  =  lvalInt  >>  >  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
82	[BUG]  [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  >>  rvalInt;	  result    =    lvalToInt    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	71	None	replace
83	[BUG]  [BUGGY]  result  =  lvalToInt  >=  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  >=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  >=  rvalInt;	  result    =    lvalToInt    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	71	None	replace
84	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalDouble;  break;  [CE]  cannot  find  symbol  rvalDouble  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	59	None	replace
85	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalDouble;  break;  [CE]  cannot  find  symbol  rvalDouble  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	59	None	replace
86	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  break;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  [Delete]  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  ';'  expected	59	None	replace
87	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalDouble;  break;  [CE]  cannot  find  symbol  rvalDouble  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt!=  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	59	None	replace
88	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalDouble;  break;  [CE]  cannot  find  symbol  rvalDouble  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	59	None	replace
89	[BUG]  [BUGGY]  result  =  lvalLval  <  <  rvalDouble;  break;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  >  expected	59	None	replace
90	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  rvalTolerance;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >>  rvalTolerance;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalTolerance  >>  rvalTolerance;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	47	None	replace
91	[BUG]  [BUGGY]  result  =  lvalHorizontal  >>  rvalHorizontal;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalHorizontal  >>  rvalHorizontal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalHorizontal  >>  rvalHorizontal;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	47	None	replace
92	[BUG]  [BUGGY]  result  =  lvalIndex  >>  rvalIndex;  [CE]  cannot  find  symbol  lvalIndex  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  >>  rvalIndex;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  >>  rvalIndex;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	47	None	replace
93	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalInt;  break;  [CE]  unreachable  statement  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    result  =  lvalInt  +  rvalInt;  break;	  	non-compiled	[CE]  unreachable  statement	29	None	add
94	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  Result  =  lvalInt  +  rvalInt;  break;  [CE]  cannot  find  symbol  Result  [FE]      ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  Result  =  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    Result  =  lvalInt  +  rvalInt;  break;	  	non-compiled	[CE]  cannot  find  symbol  Result	29	None	add
95	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalInt;  [CE]  unreachable  statement  [FE]        ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  unreachable  statement	29	None	add
96	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  lvalInt  +  rvalInt;  break;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    lvalInt  +  rvalInt;  break;	  	non-compiled	[CE]  not  a  statement	29	None	add
97	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  =  lvalInt  +  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  =  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    =  lvalInt  +  rvalInt;  break;	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
98	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  *  rvalInt;  break;  [CE]  unreachable  statement  [FE]              ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  *  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    result  =  lvalInt  *  rvalInt;  break;	  	non-compiled	[CE]  unreachable  statement	29	None	add
99	[BUG]  [BUGGY]  result  =  lvalDouble  >=  <  rvalDouble;  break;  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  <  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >=  <  rvalDouble;  break;	          result    =    lvalDouble    >=    >    rvalDouble;    break;    	non-compiled	[CE]  >  expected	74	None	replace
100	[BUG]  [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  <  rvalDouble;  break;	          result    =    lvalDouble    >=    >    rvalDouble;    break;    	non-compiled	[CE]  >  expected	74	None	replace
101	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalDouble;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  +  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  +  rvalDouble;  break;	          result    =    lvalDouble    >=    >    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	74	None	replace
102	[BUG]  [BUGGY]  result  =  lvalDecimal  -  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  -  1;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	13	None	replace
103	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  2;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  2;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  2;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  4;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  4;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  4;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
105	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  3;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  3;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  3;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
106	[BUG]  [BUGGY]  result  =  lvalDecimal  &  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  1;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	13	None	replace
107	[BUG]  [BUGGY]  result  =  lval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  4;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  4;  break;	          result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
108	[BUG]  [BUGGY]  result  =  lval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  1;  break;	          result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
109	[BUG]  [BUGGY]  result  =  lvalAdd  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  <  <  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  <  <  rvalInt;  break;	          result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	31	None	replace
110	[BUG]  [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  break;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  break;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    break;    	non-compiled	[CE]  >  expected	58	None	replace
111	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  -  rvalInt;	  result    =    lvalDecimal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	72	None	replace
112	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalInt;    	non-compiled	[CE]  >  expected	72	None	replace
113	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  rvalInt;	  result    =    lvalDecimal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	72	None	replace
114	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  +  rvalInt;	  result    =    lvalDecimal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	72	None	replace
115	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalDecimal  +  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  rvalDecimal  +  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  -  rvalDecimal  +  1;	  result    =    lvalDecimal    <    <    rvalDecimal    +    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	53	None	replace
116	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDecimal  +  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDecimal  +  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  rvalDecimal  +  1;	  result    =    lvalDecimal    <    <    rvalDecimal    +    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	53	None	replace
117	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal  +  2;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal  +  2;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  rvalDecimal  +  2;	  result    =    lvalDecimal    <    <    rvalDecimal    +    1;    	non-compiled	[CE]  >  expected	53	None	replace
118	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDecimal  +  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalDecimal  +  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  %  rvalDecimal  +  1;	  result    =    lvalDecimal    <    <    rvalDecimal    +    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	53	None	replace
119	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDecimal  +  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalDecimal  +  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  +  rvalDecimal  +  1;	  result    =    lvalDecimal    <    <    rvalDecimal    +    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	53	None	replace
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lval  +  rvalInt;	  result    =    lvalDouble    +    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	40	2	replace
121	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  [FE]  ComparisonFailure  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  +  rvalInt;	  result    =    lvalDouble    +    rvalDouble;    	compilable	  [FE]  ComparisonFailure  	40	2	replace
122	[BUG]  [BUGGY]  result  =  lvalToken  +  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  +  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  +  rvalToken;	  result    =    lvalDouble    +    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	40	None	replace
123	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalDouble;	  result    =    lvalDouble    +    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	40	None	replace
124	[BUG]  [BUGGY]  result  =  lvalNum  -  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	35	None	replace
125	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalDouble;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  -  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  -  rvalDouble;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	64	None	replace
126	[BUG]  [BUGGY]  result  =  lvalLval  <  <  rvalLval;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  rvalLval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  rvalLval;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  >  expected	64	None	replace
127	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalDouble;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  &  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  &  rvalDouble;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	64	None	replace
128	[BUG]  [BUGGY]  result  =  lvalThreshold  &  rvalThreshold;  [CE]  cannot  find  symbol  lvalThreshold  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalThreshold  &  rvalThreshold;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalThreshold  &  rvalThreshold;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalThreshold	9	None	replace
129	[BUG]  [BUGGY]  result  =  lvalIndex  &  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  &  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	9	None	replace
130	[BUG]  [BUGGY]  result  =  lvalShort  &  rvalShort;  [CE]  cannot  find  symbol  lvalShort  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  &  rvalShort;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  &  rvalShort;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	9	None	replace
131	[BUG]  [BUGGY]  result  =  lvalThreshold  %  rvalThreshold;  [CE]  cannot  find  symbol  lvalThreshold  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalThreshold  %  rvalThreshold;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalThreshold  %  rvalThreshold;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalThreshold	12	None	replace
132	[BUG]  [BUGGY]  result  =  lvalShort  %  rvalShort;  [CE]  cannot  find  symbol  lvalShort  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  %  rvalShort;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  %  rvalShort;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	12	None	replace
133	[BUG]  [BUGGY]  result  =  lvalIndex  %  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  %  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  %  rvalDecimal;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	12	None	replace
134	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  %  rvalDecimal;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	12	None	replace
135	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  1;  break;	  result    =    lvalInt    >=    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
136	[BUG]  [BUGGY]  result  =  lvalAfter  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >>  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >>  >  rvalInt;  break;	          result    =    lvalAfter    >>    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
137	[BUG]  [BUGGY]  result  =  lvalString!=  rvalString;  [CE]  cannot  find  symbol  lvalString  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalString!=  rvalString;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalString!=  rvalString;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalString	46	None	replace
138	[BUG]  [BUGGY]  result  =  lvalBigInt  >>  rvalBigInt;  [CE]  cannot  find  symbol  lvalBigInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalBigInt  >>  rvalBigInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalBigInt  >>  rvalBigInt;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalBigInt	46	None	replace
139	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	10	None	replace
140	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalDecimal;  [CE]  cannot  find  symbol  lvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  +  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	10	None	replace
141	[BUG]  [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >=  >  rvalDouble;	  result    =    lvalDouble    [Delete]    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
142	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  >  rvalDouble;	  result    =    lvalDouble    [Delete]    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
143	[BUG]  [BUGGY]  result  =  lvalToken  >>  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  >>  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	57	None	replace
144	[BUG]  [BUGGY]  result  =  lvalToken  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  >>  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  >>  >  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
145	[BUG]  [BUGGY]  result  =  lvalToken  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  >=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  >=  >  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
146	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	6	None	replace
147	[BUG]  [BUGGY]  result  =  lvalInt  >>  rval;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	54	None	replace
148	[BUG]  [BUGGY]  result  =  lvalInt  >=  rval;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	54	None	replace
149	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rval;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  [Delete]  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  ';'  expected	54	None	replace
150	[BUG]  [BUGGY]  result  =  lvalInt!=  rval;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt!=  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	54	None	replace
151	[BUG]  [BUGGY]  result  =  lvalInt  ==  rval;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	54	None	replace
152	[BUG]  [BUGGY]  result  =  lvalDouble  >>  <  rvalInt;  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  <  rvalInt;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	75	None	replace
153	[BUG]  [BUGGY]  result  =  lvalDouble  >=  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >=  <  rvalInt;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	75	None	replace
154	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  -  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	32	None	replace
155	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	32	None	replace
156	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  +  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	32	None	replace
157	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  break;  [CE]  >  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  >  expected	32	None	replace
158	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  1;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
159	[BUG]  [BUGGY]  result  =  lvalThreshold  -  rvalThreshold;  [CE]  cannot  find  symbol  lvalThreshold  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalThreshold  -  rvalThreshold;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalThreshold  -  rvalThreshold;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalThreshold	8	None	replace
160	[BUG]  [BUGGY]  result  =  lvalSecond  -  rvalSecond;  [CE]  cannot  find  symbol  lvalSecond  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalSecond  -  rvalSecond;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalSecond  -  rvalSecond;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	8	None	replace
161	[BUG]  [BUGGY]  result  =  lvalIndex  -  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  -  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  -  rvalDecimal;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	8	None	replace
162	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	41	None	replace
163	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >=  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	41	None	replace
164	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  [Delete]  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  ';'  expected	41	None	replace
165	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt!=  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	41	None	replace
166	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  ==  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	41	None	replace
167	[BUG]  [BUGGY]  result  =  lvalHorizontal!=  rvalHorizontal;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalHorizontal!=  rvalHorizontal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalHorizontal!=  rvalHorizontal;	  result    =    lvalDouble!=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	70	None	replace
168	[BUG]  [BUGGY]  result  =  lvalTolerance!=  rvalTolerance;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalTolerance!=  rvalTolerance;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalTolerance!=  rvalTolerance;	  result    =    lvalDouble!=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	70	None	replace
169	[BUG]  [BUGGY]  result  =  lval  <  <  rval;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  rval;	  result    =    lval    <    <    1;    	non-compiled	[CE]  >  expected	23	None	replace
170	[BUG]  [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  >  expected	44	None	replace
171	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  >>  rvalInt;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	52	None	replace
172	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  Result  =  lvalInt  >>  rvalInt;  break;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  Result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    break;    Result  =  lvalInt  >>  rvalInt;  break;	  	non-compiled	[CE]  cannot  find  symbol  Result	2	None	add
173	[BUG]  [BUGGY]  result  =  lvalDecimal  +  1;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  +  1;	  result    =    lvalDecimal    <    <    1;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	13	None	replace
174	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  1;  break;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  >  rvalDouble  +  1;  break;	          result    =    lvalDouble    >=    >    rvalDouble;    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
175	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  break;	          result    =    lvalDouble    >=    >    rvalDouble;    break;    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
176	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  &  rvalInt;  break;	  result    =    lvalInt    >=    <    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	26	2	replace
177	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  break;  [FE]  ComparisonFailure  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  &  rvalInt;  break;	  result    =    lvalInt    >=    <    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	26	2	replace
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  %  rvalInt;  break;	  result    =    lvalInt    >=    <    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	26	2	replace
179	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  break;  [FE]  ComparisonFailure  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  %  rvalInt;  break;	  result    =    lvalInt    >=    <    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	26	2	replace
180	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalLval;  break;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalLval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  <  <  rvalLval;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	7	None	replace
181	[BUG]  [BUGGY]  result  =  lvalLval  [Delete]  rvalInt;  break;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  [Delete]  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  [Delete]  rvalInt;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	7	None	replace
182	[BUG]  [BUGGY]  result  =  lvalLval!=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLval  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval!=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval!=  rvalInt;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	7	None	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  +  rval;	  result    =    lvalInt    <    <    rval;    	compilable	  [FE]  ComparisonFailure  	54	2	replace
184	[BUG]  [BUGGY]  result  =  lvalInt  +  rval;  [FE]  ComparisonFailure  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rval;	  result    =    lvalInt    <    <    rval;    	compilable	  [FE]  ComparisonFailure  	54	2	replace
185	[BUG]  [BUGGY]  result  =  lvalAfter  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalAfter    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
186	[BUG]  [BUGGY]  result  =  lvalAfter  >=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAfter  >=  >  MAX_FOLD_NUMBER;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAfter  >=  >  MAX_FOLD_NUMBER;	  result    =    lvalAfter    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
187	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalIndex;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalIndex;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	37	None	replace
188	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalOutt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalOutt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	37	None	replace
189	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalDouble;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  rvalDouble;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	64	None	replace
190	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalDouble;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >=  rvalDouble;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	64	None	replace
191	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  1;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
192	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  2;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  2;  break;	  result    =    lvalDouble    <    <    rvalDouble;    break;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
193	[BUG]  [BUGGY]  result  =  lvalProperty  -  rvalProperty;  [CE]  cannot  find  symbol  lvalProperty  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalProperty  -  rvalProperty;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalProperty  -  rvalProperty;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalProperty	38	None	replace
194	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalOutt;  break;  [CE]  cannot  find  symbol  rvalOutt  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  result  =  lvalInt  +  rvalOutt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    +    rvalInt;    break;    result  =  lvalInt  +  rvalOutt;  break;	  	non-compiled	[CE]  cannot  find  symbol  rvalOutt	29	None	add
195	[BUG]  [BUGGY]  result  =  lvalShort  -  rvalInt;  [CE]  cannot  find  symbol  lvalShort  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	35	None	replace
196	[BUG]  [BUGGY]  result  =  lvalToInt  -  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  -  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	35	None	replace
197	[BUG]  [BUGGY]  result  =  rvalInt  -  lvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt  -  lvalDouble;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	35	None	replace
198	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  rvalInt  -  lvalInt;	  result    =    lvalDouble    -    rvalInt;    	compilable	  [FE]  ComparisonFailure  	35	2	replace
199	[BUG]  [BUGGY]  result  =  rvalInt  -  lvalInt;  [FE]  ComparisonFailure  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt  -  lvalInt;	  result    =    lvalDouble    -    rvalInt;    	compilable	  [FE]  ComparisonFailure  	35	2	replace
200	[BUG]  [BUGGY]  result  =  lvalBuffer  +  rvalBuffer;  [CE]  cannot  find  symbol  lvalBuffer  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalBuffer  +  rvalBuffer;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalBuffer  +  rvalBuffer;	  result    =    lvalDouble    +    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalBuffer	40	None	replace
201	[BUG]  [BUGGY]  result  =  lvalNum  +  rvalNum;  [CE]  cannot  find  symbol  lvalNum  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  +  rvalNum;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  +  rvalNum;	  result    =    lvalDouble    +    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	40	None	replace
202	[BUG]  [BUGGY]  result  =  lvalMethod  +  rvalDecimal;  [CE]  cannot  find  symbol  lvalMethod  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalMethod  +  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalMethod  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalMethod	10	None	replace
203	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
204	[BUG]  [BUGGY]  result  =  lvalDouble  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  [Delete]  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  [Delete]  >  rvalInt;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	75	None	replace
205	[BUG]  [BUGGY]  result  =  lvalToken!=  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken!=  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken!=  rvalToken;	  result    =    lvalDouble!=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	70	None	replace
206	[BUG]  [BUGGY]  result  =  lvalString  >>  rvalString;  [CE]  cannot  find  symbol  lvalString  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalString  >>  rvalString;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalString  >>  rvalString;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalString	46	None	replace
207	[BUG]  [BUGGY]  result  =  lvalToken  >>  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  >>  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  >>  rvalToken;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	46	None	replace
208	[BUG]  [BUGGY]  result  =  lvalInt  }  rvalInt;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  }  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  }  rvalInt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  ';'  expected	36	None	replace
209	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]    ComparisonFailure    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result    =    lvalInt    >>    rvalInt;    Result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	17	None	add
210	[BUG]  [BUGGY]  result  =  lvalMethod  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalMethod  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalMethod  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalMethod  >>  rvalInt;  break;	          result    =    lvalAfter    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalMethod	50	None	replace
211	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  rvalDouble;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
212	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	9	None	replace
213	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDesc;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDesc;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  &  rvalDesc;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
214	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalMethod;  [CE]  cannot  find  symbol  lvalMethod  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  lvalMethod;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt  >>  lvalMethod;	  result    =    lvalMethod    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalMethod	63	None	replace
215	[BUG]  [BUGGY]  result  =  lvalNum  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalNum  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	1	None	replace
216	[BUG]  [BUGGY]  result  =  lvalShort  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalShort  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalShort  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalShort  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalShort	1	None	replace
217	[BUG]  [BUGGY]  result  =  lvalWord  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalWord  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalWord  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalWord  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalWord	1	None	replace
218	[BUG]  [BUGGY]  result  =  lvalToInt  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalToInt  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  -  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  -  rvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	1	None	replace
219	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  rvalInt  -  lvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
220	[BUG]  [BUGGY]  result  =  rvalInt  -  lvalInt;  break;  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt  -  lvalInt;  break;	  result    =    lvalDouble    -    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	1	2	replace
221	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  rvalDouble;  break;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  <  rvalDouble;  break;	  result    =    lvalDouble    >>    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	68	None	replace
222	[BUG]  [BUGGY]  result  =  lvalDouble  %  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  %  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  %  rvalInt;  break;	  result    =    lvalDouble    >>    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	68	None	replace
223	[BUG]  [BUGGY]  result  =  lvalDouble  -  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  -  <  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  -  <  rvalInt;  break;	  result    =    lvalDouble    >>    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	68	None	replace
224	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  %  rvalInt;	  result    =    lvalDecimal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	72	None	replace
225	[BUG]  [BUGGY]  result  =  lvalMethod  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalMethod  >=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalMethod  >=  >  rvalInt;	  result    =    lvalMethod    >=    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
226	[BUG]  [BUGGY]  result  =  lvalEnd  >>  rvalEnd;  [CE]  cannot  find  symbol  lvalEnd  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalEnd  >>  rvalEnd;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalEnd  >>  rvalEnd;	  result    =    lvalDouble    &    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalEnd	39	None	replace
227	[BUG]  [BUGGY]  result  =  lvalInt  &  rval;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  &  rval;	  result    =    lvalDouble    &    rvalDouble;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	39	None	replace
228	[BUG]  [BUGGY]  result  =  lvalToken  &  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  &  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  &  rvalToken;	  result    =    lvalDouble    &    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	39	None	replace
229	[BUG]  [BUGGY]  result  =  rvalInt!=  lvalInt;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt!=  lvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt!=  lvalInt;	  result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  incompatible  types	20	None	replace
230	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalToken;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  rvalToken;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
231	[BUG]  [BUGGY]  result  =  lvalToken!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken!=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken!=  >  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
232	[BUG]  [BUGGY]  result  =  lvalToken!=  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken!=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken!=  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	57	None	replace
233	[BUG]  [BUGGY]  result  =  lvalToken  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  [Delete]  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  [Delete]  >  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	57	None	replace
234	[BUG]  [BUGGY]  result  =  lvalEnd  %  rvalInt;  [CE]  cannot  find  symbol  lvalEnd  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalEnd  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalEnd  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalEnd	56	None	replace
235	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalOutt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  %  rvalOutt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	56	None	replace
236	[BUG]  [BUGGY]  result  =  lvalToInt  +  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  +  rvalInt;	  result    =    lvalToInt    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	71	None	replace
237	[BUG]  [BUGGY]  result  =  lvalAdd  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
238	[BUG]  [BUGGY]  result  =  lvalAdd  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  lvalAdd  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  [Delete]  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  [Delete]  >  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalAdd	76	None	replace
239	[BUG]  [BUGGY]  result  =  lvalAdd!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd!=  >  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd!=  >  rvalInt;	  result    =    lvalAdd    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
240	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  >>  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	32	None	replace
241	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  %  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	32	None	replace
242	[BUG]  [BUGGY]  result  =  lvalHorizontal  >=  rvalHorizontal;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalHorizontal  >=  rvalHorizontal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalHorizontal  >=  rvalHorizontal;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	47	None	replace
243	[BUG]  [BUGGY]  result  =  lvalTolerance  >=  rvalTolerance;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >=  rvalTolerance;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalTolerance  >=  rvalTolerance;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	47	None	replace
244	[BUG]  [BUGGY]  result  =  lvalMethod  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalMethod  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalMethod  >=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalMethod  >=  rvalInt;  break;	          result    =    lvalAfter    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalMethod	49	None	replace
245	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  lvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  rvalInt  >>  lvalDouble;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	67	None	replace
246	[BUG]  [BUGGY]  result  =  lvalToInt  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalToInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  >>  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	61	None	replace
247	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  >>  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	61	None	replace
248	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalTolerance  >>  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	61	None	replace
249	[BUG]  [BUGGY]  result  =  lvalToken  }  >  rvalInt;  break;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  }  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  }  >  rvalInt;  break;	          result    =    lval    }    >    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	51	None	replace
250	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  <  <  rvalInt;  break;	          result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	31	None	replace
251	[BUG]  [BUGGY]  result  =  lvalLh  >>  <  rvalInt;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  >>  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  >>  <  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  >  expected	55	None	replace
252	[BUG]  [BUGGY]  result  =  lvalLh  >=  <  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  >=  <  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  >=  <  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  >  expected	55	None	replace
253	[BUG]  [BUGGY]  result  =  lvalLh  &  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  &  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  &  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	55	None	replace
254	[BUG]  [BUGGY]  result  =  lvalLh  <  <  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  <  <  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  <  <  1;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
255	[BUG]  [BUGGY]  result  =  lvalSecond  %  rvalSecond;  [CE]  cannot  find  symbol  lvalSecond  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalSecond  %  rvalSecond;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalSecond  %  rvalSecond;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	12	None	replace
256	[BUG]  [BUGGY]  result  =  lvalLval  [Delete]  rvalLval;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  [Delete]  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  [Delete]  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  ';'  expected	42	None	replace
257	[BUG]  [BUGGY]  result  =  lvalLval!=  rvalLval;  [CE]  cannot  find  symbol  lvalLval  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval!=  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval!=  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	42	None	replace
258	[BUG]  [BUGGY]  result  =  lvalLval  ==  rvalLval;  [CE]  cannot  find  symbol  lvalLval  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  ==  rvalLval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  ==  rvalLval;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	42	None	replace
259	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalIndex;  break;  [CE]  cannot  find  symbol  rvalIndex  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalIndex;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  +  rvalIndex;  break;	  result    =    lvalDouble    +    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	60	None	replace
260	[BUG]  [BUGGY]  result  =  lvalNum  +  rvalInt;  break;  [CE]  cannot  find  symbol  lvalNum  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalNum  +  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalNum  +  rvalInt;  break;	  result    =    lvalDouble    +    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	60	None	replace
261	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	result  =  lvalInt  >>  +  rvalInt;	  result    =    lvalInt!=    rvalInt;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
262	[BUG]  [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  [FE]  ComparisonFailure  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  +  rvalInt;	  result    =    lvalInt!=    rvalInt;    	compilable	  [FE]  ComparisonFailure  	20	2	replace
263	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >=  rvalInt;  break;	          result    =    lvalAfter    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	50	None	replace
264	[BUG]  [BUGGY]  result  =  lvalLval  <  <  rvalLh;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  <  <  rvalLh;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  <  <  rvalLh;	  result    =    lvalLval    <    <    rvalLval;    	non-compiled	[CE]  >  expected	42	None	replace
265	[BUG]  [BUGGY]  result  =  lvalLh  %  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	56	None	replace
266	[BUG]  [BUGGY]  result  =  lvalStandard  %  rvalInt;  [CE]  cannot  find  symbol  lvalStandard  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalStandard  %  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalStandard  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalStandard	56	None	replace
267	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  2;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  2;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  <  2;  break;	  result    =    lvalInt    >>    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
268	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalDecimal;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  &  rvalDecimal;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	9	None	replace
269	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  rvalDouble;  break;	  result    =    lvalInt    <    <    rvalDouble;    break;    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
270	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  2;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  <  2;	  result    =    lvalInt    >>    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
271	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  >  rvalInt;  break;	          result    =    lval    }    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
272	[BUG]  [BUGGY]  result  =  lvalAdd  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >>  >  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >>  >  rvalInt;  break;	          result    =    lval    }    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
273	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  max_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  max_FOLD_NUMBER;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  max_FOLD_NUMBER;  break;	          result    =    lvalInt    [Delete]    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
274	[BUG]  [BUGGY]  result  =  lvalBigInt!=  rvalBigInt;  [CE]  cannot  find  symbol  lvalBigInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalBigInt!=  rvalBigInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalBigInt!=  rvalBigInt;	  result    =    lvalDouble!=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalBigInt	70	None	replace
275	[BUG]  [BUGGY]  result  =  lvalLh  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  [Delete]  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  [Delete]  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  ';'  expected	55	None	replace
276	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh!=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh!=  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	55	None	replace
277	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rvalInt;  break;  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLh  <  <  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLh  <  <  rvalInt;  break;	          result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	31	None	replace
278	[BUG]  [BUGGY]  result  =  lvalStandard  %  rvalStandard;  [CE]  cannot  find  symbol  lvalStandard  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalStandard  %  rvalStandard;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalStandard  %  rvalStandard;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalStandard	12	None	replace
279	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  %  rvalDouble;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	12	None	replace
280	[BUG]  [BUGGY]  result  =  lval  <  <  rvalShort;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lval  <  <  rvalShort;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lval  <  <  rvalShort;	  result    =    lval    <    <    1;    	non-compiled	[CE]  >  expected	23	None	replace
281	[BUG]  [BUGGY]  result  =  lvalStandard  -  rvalStandard;  [CE]  cannot  find  symbol  lvalStandard  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalStandard  -  rvalStandard;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalStandard  -  rvalStandard;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalStandard	38	None	replace
282	[BUG]  [BUGGY]  result  =  lvalToken  -  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  -  rvalToken;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  -  rvalToken;	  result    =    lvalDouble    -    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	38	None	replace
283	[BUG]  [BUGGY]  result  =  lvalToInt!=  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt!=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt!=  rvalInt;	  result    =    lvalToInt    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	71	None	replace
284	[BUG]  [BUGGY]  result  =  lvalToInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  [Delete]  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  [Delete]  rvalInt;	  result    =    lvalToInt    <    <    rvalInt;    	non-compiled	[CE]  ';'  expected	71	None	replace
285	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal  +  1;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  rvalDecimal  +  1;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  <  <  rvalDecimal  +  1;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  >  expected	32	None	replace
286	[BUG]  [BUGGY]  result  =  lvalToken  ==  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  ==  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  ==  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	57	None	replace
287	[BUG]  [BUGGY]  result  =  lvalToken  >=  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  >=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  >=  rvalInt;	  result    =    lvalToken    }    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	57	None	replace
288	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalDouble  -  1;  [CE]  cannot  find  symbol  lvalDouble  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalDouble  -  1;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  >>  rvalDouble  -  1;	  result    =    lvalDouble    [Delete]    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	69	None	replace
289	[BUG]  [BUGGY]  result  =  lvalAdd  >>  rvalAdd;  [CE]  cannot  find  symbol  lvalAdd  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalAdd  >>  rvalAdd;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalAdd  >>  rvalAdd;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalAdd	46	None	replace
290	[BUG]  [BUGGY]  result  =  lvalIndex  >=  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalIndex  >=  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalIndex  >=  rvalInt;	  result    =    lvalDouble    >=    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	73	None	replace
291	[BUG]  [BUGGY]  result  =  lvalToken  +  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToken  +  rvalInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToken  +  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	37	None	replace
292	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDecimal  +  rvalDouble;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	10	None	replace
293	[BUG]  [BUGGY]  result  =  lvalBigInt  >=  rvalBigInt;  [CE]  cannot  find  symbol  lvalBigInt  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalBigInt  >=  rvalBigInt;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalBigInt  >=  rvalBigInt;	  result    =    lvalDouble    >=    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalBigInt	47	None	replace
294	[BUG]  [BUGGY]  result  =  lvalToInt  >>  <  rvalInt;  break;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  >>  <  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  >>  <  rvalInt;  break;	  result    =    lvalDouble    >>    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	68	None	replace
295	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalInt  >>  >  rvalDouble;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
296	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rval;  break;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  >  expected	62	None	replace
297	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rval;  break;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalToInt  <  <  rval;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalToInt  <  <  rval;  break;	  result    =    lvalInt    <    <    rval;    break;    	non-compiled	[CE]  >  expected	62	None	replace
298	[BUG]  [BUGGY]  result  =  lvalLval  ==  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLval  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalLval  ==  rvalInt;  break;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalLval  ==  rvalInt;  break;	  result    =    lvalLval    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	7	None	replace
299	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rval;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  rval;  [BUGGY]      case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	result  =  lvalDouble  <  <  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  >  expected	54	None	replace
