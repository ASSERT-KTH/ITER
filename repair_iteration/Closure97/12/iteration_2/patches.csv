bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(rvalInt  ==  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  MAX_BY_0_ERROR)  {	  if(rvalInt    ==    MAX_FOLD_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	68	None	replace
2	[BUG]  [BUGGY]  if(rvalInt  ==  n)  {  [CE]  incomparable  types:  int  and  Node  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  n)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  n)  {	  if(rvalInt    ==    MAX_FOLD_OPERAND)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	68	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt!=  lval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt!=  lval)  {	  if    (lvalInt!=    rvalInt)    {    if    (lvalInt    >>    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
4	[BUG]  [BUGGY]  if(rvalInt!=  lval)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt!=  lval)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt!=  lval)  {	  if    (lvalInt!=    rvalInt)    {    if    (lvalInt    >>    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lval  <=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lval  <=  rvalInt)  {	  if    (lvalInt!=    rvalInt)    {    if    (lvalInt    >>    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
6	[BUG]  [BUGGY]  if(lval  <=  rvalInt)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lval  <=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lval  <=  rvalInt)  {	  if    (lvalInt!=    rvalInt)    {    if    (lvalInt    >>    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
7	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  n.getNext();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <=  rvalInt)  {	  if    (lvalInt    >=    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	26	2	replace
11	[BUG]  [BUGGY]  if  (lvalInt  <=  rvalInt)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <=  rvalInt)  {	  if    (lvalInt    >=    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	26	2	replace
12	[BUG]  [BUGGY]  double  rvalInt  =(double)lvalInt  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  double  rvalInt  =(double)lvalInt  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	double  rvalInt  =(double)lvalInt  +  1;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
13	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  int  rvalInt  =(int)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	int  rvalInt  =(int)lvalInt;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
14	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  int  rvalInt  =(int)lval;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	int  rvalInt  =(int)lval;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
15	[BUG]  [BUGGY]  rvalInt  =(double)lvalInt;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  rvalInt  =(double)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	rvalInt  =(double)lvalInt;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
16	[BUG]  [BUGGY]  Double  rvalInt  =(Double)lvalInt;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Double  rvalInt  =(Double)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Double  rvalInt  =(Double)lvalInt;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  0)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
18	[BUG]  [BUGGY]  if(rvalInt  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  0)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (rvalInt  >=  lvalInt)  {	  if    (rvalInt    >=    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	38	2	replace
20	[BUG]  [BUGGY]  if  (rvalInt  >=  lvalInt)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt  >=  lvalInt)  {	  if    (rvalInt    >=    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	38	2	replace
21	[BUG]  [BUGGY]  if  (right!=  rvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (right!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (right!=  rvalInt)  {	  if    (rvalInt!=    right)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	39	None	replace
22	[BUG]  [BUGGY]  if  (rvalInt!=  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  left)  {	  if    (rvalInt!=    right)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	39	None	replace
23	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
24	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
25	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
26	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
27	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    if  (lvalInt  [BUGGY]  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ')'  expected	21	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	24	2	replace
29	[BUG]  [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	24	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
31	[BUG]  [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
32	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt    ==    lvalInt)    {    if(rvalInt  ==  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
33	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt    ==    lvalInt)    {    if(rvalInt!=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
34	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  >=  lvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  >=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt    ==    lvalInt)    {    if(rvalInt  >=  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
35	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  If(rvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  If(rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt    ==    lvalInt)    {    If(rvalInt  ==  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
36	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  >>  lvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  if(rvalInt  >>  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt    ==    lvalInt)    {    if(rvalInt  >>  lvalInt)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
37	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
38	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
39	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
40	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
41	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
42	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
43	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lvalInt);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getNext(),  lvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getNext(),  lvalInt);	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	20	None	replace
44	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
45	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  rvalInt);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getNext(),  rvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getNext(),  rvalInt);	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	20	None	replace
46	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &  lvalInt;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getNext()  &  lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getNext()  &  lvalInt;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
47	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
48	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(rvalInt  ==  lvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
49	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(lvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(lvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  <=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
51	[BUG]  [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  <=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
53	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
55	[BUG]  [BUGGY]  if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  lvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
57	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  lvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
58	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  left)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	6	None	replace
59	[BUG]  [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    <    MAX_FOLD_NUMBER)    {    if  (rvalInt  <  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
60	[BUG]  [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  If  (rvalInt  <  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  If  (rvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    <    MAX_FOLD_NUMBER)    {    If  (rvalInt  <  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
61	[BUG]  [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  if  (rvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  if  (rvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    <    MAX_FOLD_NUMBER)    {    if  (rvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
62	[BUG]  [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  int  rvalInt  <  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <  MAX_FOLD_NUMBER)  {  int  rvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    <    MAX_FOLD_NUMBER)    {    int  rvalInt  <  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    if    (rvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
64	[BUG]  [BUGGY]  if(rvalInt  >=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  >=  MAX_FOLD_NUMBER)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    if    (rvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	50	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (rvalInt  >=  0)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    if    (rvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
66	[BUG]  [BUGGY]  if  (rvalInt  >=  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt  >=  0)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    if    (rvalInt    >=    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
67	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
68	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    if(lvalInt!=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
69	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    if(lvalInt  ==  rvalInt  ||  rvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
70	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    if(lvalInt  ==  rvalInt  ||  rvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
71	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  If(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  If(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    If(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
72	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  rvalInt)  {  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (rvalInt!=  0)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    >>    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
74	[BUG]  [BUGGY]  if  (rvalInt!=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  0)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    >>    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
75	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    if  (rvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
76	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    if  (rvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
77	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  >>  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  >>  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    if  (rvalInt  >>  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
78	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    if  (rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
79	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  If  (rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  If  (rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    If  (rvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
80	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
81	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
82	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
83	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
84	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    ==    MAX_FOLD_NUMBER)    {    If  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	45	None	add
85	[BUG]  [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt!=    rvalInt)    {    if  (rvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
86	[BUG]  [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt!=    rvalInt)    {    if  (rvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
87	[BUG]  [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  >>  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  >>  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt!=    rvalInt)    {    if  (rvalInt  >>  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
88	[BUG]  [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  rvalInt)  {  if  (rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt!=    rvalInt)    {    if  (rvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
89	[BUG]  [BUGGY]  if  (rvalInt!=  rvalInt)  {  If  (rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  rvalInt)  {  If  (rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt!=    rvalInt)    {    If  (rvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	35	None	add
90	[BUG]  [BUGGY]  Math.min(lvalInt,  left));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  left));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  left));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
91	[BUG]  [BUGGY]  Math.max(lvalInt,  rvalInt));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.max(lvalInt,  rvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.max(lvalInt,  rvalInt));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
92	[BUG]  [BUGGY]  Math.min(lvalInt,  rvalInt  +  1));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  rvalInt  +  1));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  rvalInt  +  1));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
93	[BUG]  [BUGGY]  Math.min(lvalInt,  rvalInt);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  rvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  rvalInt);	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
94	[BUG]  [BUGGY]  Math.min(lvalInt,  rvalInt)+  1);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  rvalInt)+  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  rvalInt)+  1);	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  not  a  statement	61	None	replace
95	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
96	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
97	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
98	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
99	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  If  (lvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    If  (lvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
100	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [Delete]  MAX_FOLD_NUMBER)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER)  {  if  (lvalInt  [Delete]  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    MAX_FOLD_NUMBER)    {    if  (lvalInt  [Delete]  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ')'  expected	23	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
102	[BUG]  [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
104	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
106	[BUG]  [BUGGY]  if  (lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
108	[BUG]  [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	1	replace
109	[BUG]  [BUGGY]  if(rvalInt  ==  right)  {  [CE]  incomparable  types:  int  and  Node  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  right)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	27	None	replace
110	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	27	None	replace
111	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
112	[BUG]  [BUGGY]  n  =  left.getNext()  ||  lvalInt  ==  rvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  ||  lvalInt  ==  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  ||  lvalInt  ==  rvalInt;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
113	[BUG]  [BUGGY]  n  =  left.getNext()  +  lvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  +  lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  +  lvalInt;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
114	[BUG]  [BUGGY]  n  =  left.getNext()  ||  lvalInt!=  rvalInt;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  ||  lvalInt!=  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  ||  lvalInt!=  rvalInt;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
115	[BUG]  [BUGGY]  n  =  left.getNext()  +  rvalInt;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  +  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  +  rvalInt;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
116	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  rvalInt  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  rvalInt  +  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  rvalInt  +  1);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
117	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  rvalInt,  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  rvalInt,  MAX_FOLD_NUMBER);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  rvalInt,  MAX_FOLD_NUMBER);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
118	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  left);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  left);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  left);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
119	[BUG]  [BUGGY]  n  =  Math.min(rvalInt,  lvalInt);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(rvalInt,  lvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(rvalInt,  lvalInt);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
120	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  rvalInt,  left);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  rvalInt,  left);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  rvalInt,  left);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
121	[BUG]  [BUGGY]  if  (rvalInt  >=  right)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt  >=  right)  {	  if    (lvalInt    >=    right)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	34	None	replace
122	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  +  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
123	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  1;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
124	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
125	[BUG]  [BUGGY]  result  =  lvalInt  <  <  4;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  4;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  4;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
126	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  >=  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
127	[BUG]  [BUGGY]  result  =  lvalInt  <  <  2;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  2;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  2;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
128	[BUG]  [BUGGY]  if  (rvalInt!=  DIVIDE_BY_0_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  DIVIDE_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  DIVIDE_BY_0_ERROR)  {	  if    (rvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	64	None	replace
129	[BUG]  [BUGGY]  if  (rvalInt!=  INDEX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  INDEX_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  INDEX_BITWISE_OPERAND)  {	  if    (rvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_BITWISE_OPERAND	64	None	replace
130	[BUG]  [BUGGY]  Node  right  =  lvalInt.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  lvalInt.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  lvalInt.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
131	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
132	[BUG]  [BUGGY]  If  (rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    If    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
133	[BUG]  [BUGGY]  If  (rvalInt  ==  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (rvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (rvalInt  ==  0)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    If    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
134	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
135	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
136	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getParent();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getParent();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
137	[BUG]  [BUGGY]  if(rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if(rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	69	None	replace
138	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    if(lvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
139	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    if(lvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
140	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    if(lvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
141	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  If(lvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  If(lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    If(lvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
142	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  >>  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  >>  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    if(lvalInt  >>  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
143	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  rval;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  rval;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
144	[BUG]  [BUGGY]  result  =  lval  <  <  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  1;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
145	[BUG]  [BUGGY]  result  =  lval  <  <  4;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  4;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  4;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  result  =  lval  <  <  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  2;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  2;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  +  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  +  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  1;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  1;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
149	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  >>  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
150	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  +  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
151	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  >=  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
152	[BUG]  [BUGGY]  result  =  lvalInt  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  4;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  4;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
153	[BUG]  [BUGGY]  result  =  lvalInt  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  2;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  2;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
155	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
157	[BUG]  [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
158	[BUG]  [BUGGY]  if(lvalInt  ==  right  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  incomparable  types:  int  and  Node  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  right  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  right  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	9	None	replace
159	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    if  (lvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
160	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    if  (lvalInt!=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
161	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  >>  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  >>  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    if  (lvalInt  >>  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
162	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    if  (lvalInt  ==  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
163	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  If  (lvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  If  (lvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    If  (lvalInt  >=  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
164	[BUG]  [BUGGY]  if(lvalInt!=  rvalInt)  {  If  (rvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  rvalInt)  {  If  (rvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  rvalInt)  {  If  (rvalInt!=  lvalInt)  {	  if    (rvalInt!=    lvalInt)    {    If    (rvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
165	[BUG]  [BUGGY]  If  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (lvalInt!=  rvalInt)  {	  if    (rvalInt!=    lvalInt)    {    If    (rvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
166	[BUG]  [BUGGY]  if(lvalInt!=  rvalInt)  {  If  (rvalInt  >=  lvalInt)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  rvalInt)  {  If  (rvalInt  >=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  rvalInt)  {  If  (rvalInt  >=  lvalInt)  {	  if    (rvalInt!=    lvalInt)    {    If    (rvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
167	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  If(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  If(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt)  {  If(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
168	[BUG]  [BUGGY]  If(lvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If(lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If(lvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
169	[BUG]  [BUGGY]  If(rvalInt  ==  lvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If(rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If(rvalInt  ==  lvalInt)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
170	[BUG]  [BUGGY]  If  (lvalInt!=  right)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (lvalInt!=  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (lvalInt!=  right)  {	  if    (lvalInt!=    rvalInt)    {    If    (lvalInt!=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
171	[BUG]  [BUGGY]  If  (rvalInt!=  0)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (rvalInt!=  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (rvalInt!=  0)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    If    (rvalInt!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	2	replace
173	[BUG]  [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	2	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (rvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	2	replace
175	[BUG]  [BUGGY]  if  (rvalInt  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt  <=  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	71	2	replace
176	[BUG]  [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	63	None	replace
177	[BUG]  [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  rvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  rvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  rvalInt!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	63	None	replace
178	[BUG]  [BUGGY]  if  (right  ==  lvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (right  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (right  ==  lvalInt)  {	  if    (lvalInt    ==    right)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	33	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  <=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  <=  lvalInt)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
180	[BUG]  [BUGGY]  if(rvalInt  <=  lvalInt)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  <=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  <=  lvalInt)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
181	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
182	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt  ==  rvalInt  ||  rvalInt  >=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
183	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt  ==  rvalInt  ||  rvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
184	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  ==  rvalInt  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt  ==  rvalInt  ||  rvalInt  >>  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
185	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt!=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
186	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    if(lvalInt  >=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
187	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  n)  {  [CE]  incomparable  types:  int  and  Node  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  n)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  n)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	7	None	replace
188	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BY_0_ERROR)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	7	None	replace
189	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  negNum)  {  [CE]  cannot  find  symbol  negNum  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  negNum)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  negNum)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  negNum	7	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  lvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
191	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  lvalInt)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  lvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
192	[BUG]  [BUGGY]  result  =  lval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  4;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  4;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
193	[BUG]  [BUGGY]  result  =  lval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  1;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  1;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
194	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  <  <  rval;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
195	[BUG]  [BUGGY]  result  =  lval  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  2;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  2;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
196	[BUG]  [BUGGY]  result  =  lval  <  <  24;  break;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lval  <  <  24;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lval  <  <  24;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
197	[BUG]  [BUGGY]  if  (lvalInt  ==  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  ==  left)  {	  if    (lvalInt    ==    right)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	33	None	replace
198	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >>    rvalInt)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
199	[BUG]  [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  left)  {  if(rvalInt!=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >>    rvalInt)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
200	[BUG]  [BUGGY]  if(rvalInt!=  left)  {  if(rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt!=  left)  {  if(rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt!=  left)  {  if(rvalInt!=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >>    rvalInt)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
201	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt)  {  if(rvalInt!=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >>    rvalInt)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
202	[BUG]  [BUGGY]  if  (rvalInt!=  MAX_FOLD_OPERAND)  {  [CE]  cannot  find  symbol  MAX_FOLD_OPERAND  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  MAX_FOLD_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  MAX_FOLD_OPERAND)  {	  if    (rvalInt!=    MAX_BITWISE_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_OPERAND	65	None	replace
203	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
204	[BUG]  [BUGGY]  if  (rvalInt!=  MAX_FOLD_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  MAX_FOLD_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  MAX_FOLD_ERROR)  {	  if    (rvalInt!=    INDEX_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_ERROR	64	None	replace
205	[BUG]  [BUGGY]  If(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
206	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt)  {  If(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt)  {  If(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  lvalInt)  {  If(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
207	[BUG]  [BUGGY]  If(rvalInt  ==  right)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If(rvalInt  ==  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If(rvalInt  ==  right)  {	  if(rvalInt    ==    rvalInt)    {    If(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  ';'  expected	30	None	replace
208	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  rvalInt;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getNext(),  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getNext(),  rvalInt;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
209	[BUG]  [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  MAX_FOLD_NUMBER)  {  If  (rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    If    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
210	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(n.getType()  ==  Token.NAME)  {  if  (lvalInt!=  rvalInt)  {	  if    (lvalInt!=    rvalInt)    {    if    (lvalInt    >=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	55	None	replace
211	[BUG]  [BUGGY]  if  (right!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  Node  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (right!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (right!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  DiagnosticType	63	None	replace
212	[BUG]  [BUGGY]  if  (n!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  Node  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (n!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (n!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  DiagnosticType	63	None	replace
213	[BUG]  [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  <  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  rvalInt)  {  if  (lvalInt  <  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt    >=    rvalInt)    {    if  (lvalInt  <  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
214	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  If(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  If(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    If(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
215	[BUG]  [BUGGY]  if(rvalInt!=  right)  {  If  (rvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt!=  right)  {  If  (rvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt!=  right)  {  If  (rvalInt!=  lvalInt)  {	  if    (rvalInt!=    lvalInt)    {    If    (rvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
216	[BUG]  [BUGGY]  Math.min(rvalInt,  lvalInt));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(rvalInt,  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(rvalInt,  lvalInt));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
217	[BUG]  [BUGGY]  Math.min(lvalInt,  rvalInt)-  1);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  rvalInt)-  1);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  rvalInt)-  1);	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  not  a  statement	61	None	replace
218	[BUG]  [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  <  rvalInt)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt  >=  rvalInt)  {  if  (rvalInt  <  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (rvalInt    >=    rvalInt)    {    if  (rvalInt  <  rvalInt)  {	  	non-compiled	[CE]  ';'  expected	37	None	add
219	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER)  {  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if    (lvalInt!=    MAX_FOLD_NUMBER)    {    If  (lvalInt!=  MAX_FOLD_NUMBER)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
220	[BUG]  [BUGGY]  if  (lvalInt  >=  left)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >=  left)  {	  if    (lvalInt    >=    right)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	34	None	replace
221	[BUG]  [BUGGY]  if  (lvalInt  <  right)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <  right)  {	  if    (lvalInt    >=    right)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	34	None	replace
222	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  rvalInt);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.replaceChild(left,  rvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.replaceChild(left,  rvalInt);	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
223	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  rvalInt);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.replaceChild(n,  rvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.replaceChild(n,  rvalInt);	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
224	[BUG]  [BUGGY]  double  rvalInt  =(double)rvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  double  rvalInt  =(double)rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	double  rvalInt  =(double)rvalInt;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
225	[BUG]  [BUGGY]  double  rvalInt  =(double)lvalInt  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  double  rvalInt  =(double)lvalInt  +  2;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	double  rvalInt  =(double)lvalInt  +  2;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
226	[BUG]  [BUGGY]  double  rvalInt  =(double)result;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  double  rvalInt  =(double)result;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	double  rvalInt  =(double)result;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
227	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalDecimal  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
228	[BUG]  [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalAfter  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
229	[BUG]  [BUGGY]  if  (right!=  lvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (right!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (right!=  lvalInt)  {	  if    (lvalInt!=    right)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	32	None	replace
230	[BUG]  [BUGGY]  if  (lvalInt!=  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  left)  {	  if    (lvalInt!=    right)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	32	None	replace
231	[BUG]  [BUGGY]  if(rvalInt  ==  left)  {  [CE]  incomparable  types:  int  and  Node  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  left)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  left)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    ==    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  int  and  Node	27	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  lvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
233	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  lvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
235	[BUG]  [BUGGY]  if(lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  >=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
237	[BUG]  [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
238	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
239	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
240	[BUG]  [BUGGY]  if(rvalInt!=  lval)  {  If  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt!=  lval)  {  If  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt!=  lval)  {  If  (lvalInt!=  rvalInt)  {	  if    (lvalInt!=    rvalInt)    {    If    (lvalInt!=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
241	[BUG]  [BUGGY]  if(lvalInt!=  right)  {  If  (lvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  right)  {  If  (lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  right)  {  If  (lvalInt!=  rvalInt)  {	  if    (lvalInt!=    rvalInt)    {    If    (lvalInt!=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	58	None	replace
242	[BUG]  [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (rvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt!=  MAX_FOLD_NUMBER)  {  If  (rvalInt!=  MAX_FOLD_NUMBER)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    If    (rvalInt!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
243	[BUG]  [BUGGY]  If  (rvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (rvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (rvalInt!=  MAX_FOLD_NUMBER)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    If    (rvalInt!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
244	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
245	[BUG]  [BUGGY]  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  >=  rvalInt  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    rvalInt)    {    	compilable	  [FE]  AssertionFailedError  	6	2	replace
246	[BUG]  [BUGGY]  if(rvalInt  ==  INDEX_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  INDEX_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  INDEX_OUT_OF_RANGE)  {	  if(rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	69	None	replace
247	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalInt  -  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
248	[BUG]  [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  left)  {  if(rvalInt  >=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
249	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  >=  rvalInt)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  >=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(rvalInt  >=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
250	[BUG]  [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  >=  lvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right  ==  rvalInt)  {  if(rvalInt  >=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right  ==  rvalInt)  {  if(rvalInt  >=  lvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    >=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
251	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  right);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  right);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  right);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
252	[BUG]  [BUGGY]  n  =  Math.min(lvalInt,  rvalInt)-  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(lvalInt,  rvalInt)-  1;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(lvalInt,  rvalInt)-  1;	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
253	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalToInt  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
254	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalDecimal  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
255	[BUG]  [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalAfter  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
256	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	7	None	replace
257	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BITWISE_OPERAND_OUT_OF_RANGE)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND_OUT_OF_RANGE	7	None	replace
258	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BIGDECIMAL_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BIGDECIMAL_BITWISE_OPERAND  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BIGDECIMAL_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_BIGDECIMAL_BITWISE_OPERAND)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BIGDECIMAL_BITWISE_OPERAND	7	None	replace
259	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND)  {  [CE]  cannot  find  symbol  MAX_BITWISE_OPERAND  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_BITWISE_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  MAX_BITWISE_OPERAND)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BITWISE_OPERAND	73	None	replace
260	[BUG]  [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_0_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt!=  MAX_BY_0_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt!=  MAX_BY_0_ERROR)  {	  if    (lvalInt!=    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0_ERROR	73	None	replace
261	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
262	[BUG]  [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt  ==  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  left)  {  if(rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  left)  {  if(rvalInt  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
263	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
264	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  right)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  right)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt)  {  if(rvalInt  ==  right)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  ';'  expected	72	None	replace
265	[BUG]  [BUGGY]  if(lvalInt  ==  MAX_FOLD_OPERAND)  {  [CE]  cannot  find  symbol  MAX_FOLD_OPERAND  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  MAX_FOLD_OPERAND)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  MAX_FOLD_OPERAND)  {	  if(rvalInt    ==    MAX_FOLD_OPERAND)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_OPERAND	68	None	replace
266	[BUG]  [BUGGY]  Node  right  =  left.getfirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.getfirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.getfirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
267	[BUG]  [BUGGY]  Node  right  =  n.getLastChild().getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  n.getLastChild().getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  n.getLastChild().getNext();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
268	[BUG]  [BUGGY]  if  (rvalInt!=  MAX_BY_0)  {  [CE]  cannot  find  symbol  MAX_BY_0  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  MAX_BY_0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  MAX_BY_0)  {	  if    (rvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_0	66	None	replace
269	[BUG]  [BUGGY]  if  (rvalInt!=  MAX_BY_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_BY_NUMBER_ERROR  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  MAX_BY_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  MAX_BY_NUMBER_ERROR)  {	  if    (rvalInt!=    MAX_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_BY_NUMBER_ERROR	66	None	replace
270	[BUG]  [BUGGY]  if(right!=  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(right!=  rvalInt)  {  if(rvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(right!=  rvalInt)  {  if(rvalInt!=  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt!=    rvalInt)    {    	non-compiled	[CE]  ';'  expected	28	None	replace
271	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lvalInt));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lvalInt));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(MAX_FOLD_NUMBER,  lvalInt));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
272	[BUG]  [BUGGY]  Math.min(lvalInt,  right));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Math.min(lvalInt,  right));  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Math.min(lvalInt,  right));	  Math.min(lvalInt,    rvalInt));    	non-compiled	[CE]  ';'  expected	61	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
274	[BUG]  [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  <=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
276	[BUG]  [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  <=  rvalInt  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
278	[BUG]  [BUGGY]  if(lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  <  MAX_FOLD_NUMBER  ||  rvalInt  ==  rvalInt)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
279	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
280	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  n.getFirstChild().getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  n.getFirstChild().getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
281	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  n.getFirstChild();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  n.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
282	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  {  rvalInt)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt)  {  if(lvalInt  {  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt    ==    rvalInt)    {    if(lvalInt  {  rvalInt)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
283	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalToInt  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
284	[BUG]  [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  break;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalIndex  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
286	[BUG]  [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  MAX_FOLD_NUMBER  ||  lvalInt  ==  MAX_FOLD_NUMBER)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if(rvalInt  ==  lvalInt  ||  lvalInt  ==  rvalInt)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
288	[BUG]  [BUGGY]  if(rvalInt  ==  lvalInt  ||  lvalInt  ==  rvalInt)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(rvalInt  ==  lvalInt  ||  lvalInt  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(rvalInt  ==  lvalInt  ||  lvalInt  ==  rvalInt)  {	  if(rvalInt    ==    lvalInt)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
289	[BUG]  [BUGGY]  result  =  lvalOutt  <  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalOutt  <  <  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalOutt  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
290	[BUG]  [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	result  =  lvalIndex  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	16	None	replace
291	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  right.getNext();  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
292	[BUG]  [BUGGY]  n  =  left.getNext()  ||  lvalInt  >=  rvalInt;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  left.getNext()  ||  lvalInt  >=  rvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  left.getNext()  ||  lvalInt  >=  rvalInt;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
293	[BUG]  [BUGGY]  n  =  Math.min(right,  lvalInt);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  n  =  Math.min(right,  lvalInt);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	n  =  Math.min(right,  lvalInt);	  n    =    Math.min(lvalInt,    rvalInt);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
294	[BUG]  [BUGGY]  if  (lvalInt  >=  right.length)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  right.length)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >=  right.length)  {	  if    (lvalInt    >=    right)    {    	non-compiled	[CE]  cannot  find  symbol  length	34	None	replace
295	[BUG]  [BUGGY]  if  (lvalInt  >=  right.intValue)  {  [CE]  cannot  find  symbol  intValue  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  >=  right.intValue)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  >=  right.intValue)  {	  if    (lvalInt    >=    right)    {    	non-compiled	[CE]  cannot  find  symbol  intValue	34	None	replace
296	[BUG]  [BUGGY]  If  (rvalInt!=  lvalInt)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (rvalInt!=  lvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (rvalInt!=  lvalInt)  {	  if    (rvalInt!=    lvalInt)    {    If    (rvalInt!=    lvalInt)    {    	non-compiled	[CE]  ';'  expected	44	None	replace
297	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  right);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Node  right  =  left.replaceChild(n,  right);  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Node  right  =  left.replaceChild(n,  right);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
298	[BUG]  [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]            AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	69	None	replace
299	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]              AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	7	None	replace
300	[BUG]  [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  ==  rvalInt  ||  rvalInt  ==  MAX_FOLD_BOUNDS_ERROR)  {	  if(lvalInt    ==    rvalInt    ||    rvalInt    ==    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_BOUNDS_ERROR	7	None	replace
301	[BUG]  [BUGGY]  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (lvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (lvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (rvalInt    ==    MAX_FOLD_NUMBER)    {    If    (rvalInt    ==    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
302	[BUG]  [BUGGY]  Double  rvalInt  =(double)lvalInt;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  Double  rvalInt  =(double)lvalInt;  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	Double  rvalInt  =(double)lvalInt;	  double    rvalInt    =(double)lvalInt;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
303	[BUG]  [BUGGY]  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  If  (lvalInt!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	If  (lvalInt!=  MAX_FOLD_NUMBER)  {	  if    (rvalInt!=    MAX_FOLD_NUMBER)    {    If    (rvalInt!=    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ';'  expected	62	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
305	[BUG]  [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  ==  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
307	[BUG]  [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <=  MAX_FOLD_NUMBER  ||  rvalInt  >  MAX_FOLD_NUMBER)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  0)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
309	[BUG]  [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  0)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  0)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  ==  MAX_FOLD_NUMBER  ||  rvalInt  ==  0)  {	  if    (lvalInt    ==    MAX_FOLD_NUMBER    ||    rvalInt    ==    MAX_FOLD_NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	48	2	replace
310	[BUG]  [BUGGY]  if(n  ==  rvalInt)  {  [CE]  incomparable  types:  Node  and  int  [FE]        AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(n  ==  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(n  ==  rvalInt)  {	  if(rvalInt    ==    rvalInt)    {    if(rvalInt    {    rvalInt)    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	72	None	replace
311	[BUG]  [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  right!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                  AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  right!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  &&  right!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	63	None	replace
312	[BUG]  [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  rvalInt)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                    AssertionFailedError      [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  rvalInt)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (rvalInt!=  INVALID_GETELEM_INDEX_ERROR  ||  lvalInt!=  rvalInt)  {	  if    (rvalInt!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	63	None	replace
313	[BUG]  [BUGGY]  if  (lvalInt  <  <  MAX_FOLD_NUMBER)  {  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if  (lvalInt  <  <  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if  (lvalInt  <  <  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  >  expected	71	None	replace
314	[BUG]  [BUGGY]  if(lvalInt  <  >  MAX_FOLD_NUMBER)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;      [BUGGY]  if(lvalInt  <  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	if(lvalInt  <  >  MAX_FOLD_NUMBER)  {	  if    (rvalInt    <    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
