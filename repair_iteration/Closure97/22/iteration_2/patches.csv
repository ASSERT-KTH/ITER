bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Node(Node.newString(Token.NAME,  left.getFirstChild()));  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(Node.newString(Token.NAME,  left.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(Node.newString(Token.NAME,  left.getFirstChild()));	  return    new    Node(right,    left.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	55	None	replace
2	[BUG]  [BUGGY]  return  new  Node(newType,  left,  left.getFirstChild());  [CE]  cannot  find  symbol  newType  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(newType,  left,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(newType,  left,  left.getFirstChild());	  return    new    Node(right,    left.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  newType	55	None	replace
3	[BUG]  [BUGGY]  return  new  Node(newNode,  left.getFirstChild());  [CE]  cannot  find  symbol  newNode  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(newNode,  left.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(newNode,  left.getFirstChild());	  return    new    Node(right,    left.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  newNode	55	None	replace
4	[BUG]  [BUGGY]  return  new  Node(left,  right.getFirstChild());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(left,  right.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(left,  right.getFirstChild());	  return    new    Node(right,    left.getFirstChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	55	None	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(Token.ASSIGN,  left,  right.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	return  new  Node(Token.ASSIGN,  left,  right.getFirstChild());	  return    new    Node(right,    left.getFirstChild());    	compilable	  [FE]  RuntimeException  	55	20	replace
6	[BUG]  [BUGGY]  return  new  Node(Token.ASSIGN,  left,  right.getFirstChild());  [FE]  RuntimeException  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(Token.ASSIGN,  left,  right.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(Token.ASSIGN,  left,  right.getFirstChild());	  return    new    Node(right,    left.getFirstChild());    	compilable	  [FE]  RuntimeException  	55	20	replace
7	[BUG]  [BUGGY]  return  leftChild;  Node  leftChild  =  right.getFirstChild();  [CE]  cannot  find  symbol  leftChild  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  leftChild  =  right.getFirstChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	65	None	replace
8	[BUG]  [BUGGY]  return  leftChild;  Node  leftChild  =  right.getLastChild();  [CE]  cannot  find  symbol  leftChild  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  leftChild  =  right.getLastChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	65	None	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	compilable	  [FE]  RuntimeException  	65	20	replace
10	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	compilable	  [FE]  RuntimeException  	65	20	replace
11	[BUG]  [BUGGY]  return  n;  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  leftChild  =  right.getFirstChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	non-compiled	[CE]  unreachable  statement	65	None	replace
12	[BUG]  [BUGGY]  return  right;  Node  leftChild  =  left.getFirstChild();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  leftChild  =  left.getFirstChild();	  return    left;    Node    leftChild    =    right.getFirstChild();    	non-compiled	[CE]  unreachable  statement	65	None	replace
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  return  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();  return  leftChild.getFirstChild();	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
14	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  return  leftChild.getFirstChild();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  return  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();  return  leftChild.getFirstChild();	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
15	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  if(right.getFirstChild()!=  right.getLastChild())  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	if(right.getFirstChild()!=  right.getLastChild())  {  return  left.getLastChild();  }	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
16	[BUG]  [BUGGY]  if(right.getFirstChild()!=  right.getLastChild())  {  return  left.getLastChild();  }  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  if(right.getFirstChild()!=  right.getLastChild())  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	if(right.getFirstChild()!=  right.getLastChild())  {  return  left.getLastChild();  }	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
17	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  if(right.getFirstChild()!=  right.getFirstChild())  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	if(right.getFirstChild()!=  right.getFirstChild())  {  return  left.getLastChild();  }	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
18	[BUG]  [BUGGY]  if(right.getFirstChild()!=  right.getFirstChild())  {  return  left.getLastChild();  }  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  if(right.getFirstChild()!=  right.getFirstChild())  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	if(right.getFirstChild()!=  right.getFirstChild())  {  return  left.getLastChild();  }	  return    left.getLastChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	122	20	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
20	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
21	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	130	None	replace
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
23	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
25	[BUG]  [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
27	[BUG]  [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.RETURN)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.RETURN)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	130	20	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssignmentFailure(right));  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssignmentFailure(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssignmentFailure(right));	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssignmentFailure(left));  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssignmentFailure(left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssignmentFailure(left));	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right),  n);  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right),  n);	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  right));  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  right));	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  n));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssignmentFailure(right,  n));	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssignmentFailure(right));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssignmentFailure(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssignmentFailure(right));	  NodeTraversal.traverse(compiler,    left,    new    AssignmentFailure(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	102	None	replace
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  return  leftChild.getFirstChild();	  return    left.getFirstChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	117	20	replace
35	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getFirstChild();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  return  leftChild.getFirstChild();	  return    left.getFirstChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	117	20	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  return  leftChild.getLastChild();	  return    left.getFirstChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	117	20	replace
37	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getLastChild();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  return  leftChild.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  return  leftChild.getLastChild();	  return    left.getFirstChild();    return    left.getFirstChild();    	compilable	  [FE]  RuntimeException  	117	20	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext(),  left.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild().getNext(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild().getNext(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild().getNext(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild().getNext(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild().getNext(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild().getNext(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  this);  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  this);	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.getFirstChild()),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.getFirstChild()),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.getFirstChild()),  this);	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	94	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n)),  this);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n)),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n)),  this);	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  ';'  expected	94	None	replace
46	[BUG]  [BUGGY]  return  newType  <  Node>(n,  left.getFirstChild().getNext(),  right.getLastChild());  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(n,  left.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(n,  left.getFirstChild().getNext(),  right.getLastChild());	  return    newType    <    Node>(leftChild,    right.getFirstChild().getNext(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	124	None	replace
47	[BUG]  [BUGGY]  return  newType  <  Node>(right,  right.getFirstChild().getNext(),  right.getLastChild());  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(right,  right.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(right,  right.getFirstChild().getNext(),  right.getLastChild());	  return    newType    <    Node>(leftChild,    right.getFirstChild().getNext(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	124	None	replace
48	[BUG]  [BUGGY]  return  newType  <  Node>(leftChild,  left.getFirstChild().getNext(),  right.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(leftChild,  left.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(leftChild,  left.getFirstChild().getNext(),  right.getLastChild());	  return    newType    <    Node>(leftChild,    right.getFirstChild().getNext(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	124	None	replace
49	[BUG]  [BUGGY]  return  newType  <  Node>(n,  right.getFirstChild().getNext(),  right.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(n,  right.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(n,  right.getFirstChild().getNext(),  right.getLastChild());	  return    newType    <    Node>(leftChild,    right.getFirstChild().getNext(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	124	None	replace
50	[BUG]  [BUGGY]  return  newType  <  Node>(right,  left.getFirstChild().getNext(),  right.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(right,  left.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(right,  left.getFirstChild().getNext(),  right.getLastChild());	  return    newType    <    Node>(leftChild,    right.getFirstChild().getNext(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	124	None	replace
51	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
52	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
53	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	133	None	replace
54	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	133	None	replace
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
56	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.NAME)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
58	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.NAME)  {  return  left;  }  [FE]  RuntimeException  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.NAME)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.NAME)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
59	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
60	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [FE]  RuntimeException  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION  ||  leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.FUNCTION)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	133	20	replace
61	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  right.getLastChild();	  return    left.getFirstChild();    Node    left    =    right.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	34	None	replace
62	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  left  =  right.getLastChild();	  return    left.getFirstChild();    Node    left    =    right.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	34	None	replace
63	[BUG]  [BUGGY]  node  =  right.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node  =  right.getLastChild();	  return    left.getFirstChild();    Node    left    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	34	None	replace
64	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  left  =  left.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  left  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  left  =  left.getLastChild();	  return    left.getFirstChild();    Node    left    =    right.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	34	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  right);  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  right);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	89	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  left);  [CE]  cannot  find  symbol  compiler  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  left);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	89	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  n);  [CE]  cannot  find  symbol  compiler  [FE]                        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  n);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	89	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER_ERROR);  [CE]  cannot  find  symbol  compiler  [FE]                          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER_ERROR);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER_ERROR);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	89	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  compiler  [FE]                            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n,  MAX_FOLD_NUMBER);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	89	None	replace
70	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;	  return    left.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	21	None	replace
71	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;	  return    left.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	21	None	replace
72	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getType()  ==  Token.EXPR_RESULT;	  return    left.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	21	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext()));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild().getNext()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext()));    	non-compiled	[CE]  cannot  find  symbol  compiler	19	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext()));  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild().getNext()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext()));    	non-compiled	[CE]  cannot  find  symbol  compiler	19	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild(),  right.getNext()));  [CE]  cannot  find  symbol  compiler  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild(),  right.getNext()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild(),  right.getNext()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext()));    	non-compiled	[CE]  cannot  find  symbol  compiler	19	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild().getNext()),  n);  [CE]  cannot  find  symbol  compiler  [FE]                        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild().getNext()),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right.getFirstChild().getNext()),  n);	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild().getNext()));    	non-compiled	[CE]  cannot  find  symbol  compiler	19	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	75	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n.getFirstChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	75	None	replace
79	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));  [CE]  cannot  find  symbol  node  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  node	75	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n.getFirstChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	75	None	replace
81	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  leftChild  =  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	119	None	add
82	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getLastChild();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  leftChild  =  right.getLastChild();	  	non-compiled	[CE]  unreachable  statement	119	None	add
83	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  left.getFirstChild();  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  leftChild  =  left.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	119	None	add
84	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  left.getLastChild();  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  leftChild  =  left.getLastChild();	  	non-compiled	[CE]  unreachable  statement	119	None	add
85	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getNext();  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  leftChild  =  right.getNext();	  	non-compiled	[CE]  unreachable  statement	119	None	add
86	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	119	None	add
87	[BUG]  [BUGGY]  return  left.getFirstChild().getNext();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext();  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getFirstChild().getNext();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	119	None	add
88	[BUG]  [BUGGY]  return  leftChild;  Node  left  =  right.getNext();  [CE]  cannot  find  symbol  leftChild  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	69	None	replace
89	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	69	None	replace
90	[BUG]  [BUGGY]  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	69	None	replace
91	[BUG]  [BUGGY]  return  rightChild;  Node  left  =  right.getNext();  [CE]  cannot  find  symbol  rightChild  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  rightChild;  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  rightChild;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  rightChild	69	None	replace
92	[BUG]  [BUGGY]  return  right;  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  left  =  right.getNext();	  return    left;    Node    left    =    right.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	69	None	replace
93	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
94	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  return  n.getFirstChild().getNext();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  return  n.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    return  n.getFirstChild().getNext();	  	non-compiled	[CE]  unreachable  statement	127	None	add
95	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  left.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
96	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  left.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
97	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  right.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  right.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
98	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  leftChild.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  leftChild.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
99	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  leftChild.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getFirstChild().getNext();  Node  n  =  leftChild.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getFirstChild().getNext();    Node  n  =  leftChild.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	127	None	add
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n));  [CE]  cannot  find  symbol  compiler  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	90	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left));  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	90	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  false);  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  false);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  false);	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	90	None	replace
103	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	39	None	replace
104	[BUG]  [BUGGY]  Node  n  =  right.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  right.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	39	None	replace
105	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  left.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
106	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  right.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  n  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  n  =  right.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	compilable	  [FE]  RuntimeException  	39	20	replace
108	[BUG]  [BUGGY]  n  =  left.getLastChild();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n  =  left.getLastChild();	  return    n.getFirstChild();    Node    n    =    left.getLastChild();    	compilable	  [FE]  RuntimeException  	39	20	replace
109	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  left.getFirstChild();  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	42	None	replace
110	[BUG]  [BUGGY]  [FE]  Error  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(right);  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n.removeChild(right);  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
111	[BUG]  [BUGGY]  n.removeChild(right);  return  n.getFirstChild();  [FE]  Error  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(right);  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeChild(right);  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
112	[BUG]  [BUGGY]  [FE]  Error  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(right);  return  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n.removeChild(right);  return  right.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
113	[BUG]  [BUGGY]  n.removeChild(right);  return  right.getFirstChild();  [FE]  Error  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(right);  return  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeChild(right);  return  right.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
114	[BUG]  [BUGGY]  [FE]  Error  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(left);  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n.removeChild(left);  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
115	[BUG]  [BUGGY]  n.removeChild(left);  return  n.getFirstChild();  [FE]  Error  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(left);  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeChild(left);  return  n.getFirstChild();	  return    n.getFirstChild();    return    n.getFirstChild();    	compilable	  [FE]  Error  	42	20	replace
116	[BUG]  [BUGGY]  Node  n  =  leftChild.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  leftChild.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  leftChild.getNext();	  return    n.removeFirstChild();    Node    n    =    leftChild.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	62	None	replace
117	[BUG]  [BUGGY]  node.removeFirstChild();  Node  n  =  leftChild.getNext();  [CE]  cannot  find  symbol  node  [FE]                  Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  Node  n  =  leftChild.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  Node  n  =  leftChild.getNext();	  return    n.removeFirstChild();    Node    n    =    leftChild.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
118	[BUG]  [BUGGY]  node.removeChild(leftChild);  Node  n  =  leftChild.getNext();  [CE]  cannot  find  symbol  leftChild  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(leftChild);  Node  n  =  leftChild.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(leftChild);  Node  n  =  leftChild.getNext();	  return    n.removeFirstChild();    Node    n    =    leftChild.getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	62	None	replace
119	[BUG]  [BUGGY]  node.removeFirstChild();  Node  n  =  right.getNext();  [CE]  cannot  find  symbol  node  [FE]                      Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  Node  n  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  Node  n  =  right.getNext();	  return    n.removeFirstChild();    Node    n    =    leftChild.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
120	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                        Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  right.getNext();	  return    n.removeFirstChild();    Node    n    =    leftChild.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	62	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  left));  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  left));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  left));  [CE]  cannot  find  symbol  compiler  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  left));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right));  [CE]  cannot  find  symbol  compiler  [FE]                        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right),  n);  [CE]  cannot  find  symbol  compiler  [FE]                          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right),  n);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	87	None	replace
127	[BUG]  [BUGGY]  parent.replaceChild(n,  left);  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  parent.replaceChild(n,  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	parent.replaceChild(n,  left);	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    n.getFirstChild();    }    	non-compiled	[CE]  cannot  find  symbol  parent	110	None	replace
128	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  right  =  left.getFirstChild();	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    n.getFirstChild();    }    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	110	None	replace
129	[BUG]  [BUGGY]  parent.removeChild(left);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  parent.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	parent.removeChild(left);	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    n.getFirstChild();    }    	non-compiled	[CE]  cannot  find  symbol  parent	110	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	111	1	replace
131	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	111	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	111	1	replace
133	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild();  }	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  AssertionFailedError  	111	1	replace
134	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
135	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChild	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
136	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChil  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChil  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getFirstChil	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    left.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right),  n);  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right),  n);	  NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	103	None	replace
138	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  right.getFirstChild();	  return    left.getLastChild();    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	49	None	replace
139	[BUG]  [BUGGY]  return  right.getLastChild();  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  left  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild();  Node  left  =  left.getFirstChild();	  return    left.getLastChild();    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	49	None	replace
140	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  left.getFirstChild();	  return    left.getLastChild();    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	49	None	replace
141	[BUG]  [BUGGY]  node  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node  =  left.getFirstChild();	  return    left.getLastChild();    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
142	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  right.getFirstChild();	  return    n.removeFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	60	None	replace
143	[BUG]  [BUGGY]  node.removeFirstChild();  Node  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  Node  n  =  right.getFirstChild();	  return    n.removeFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
144	[BUG]  [BUGGY]  node.removeChild(right.getFirstChild());  Node  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(right.getFirstChild());  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(right.getFirstChild());  Node  n  =  right.getFirstChild();	  return    n.removeFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
145	[BUG]  [BUGGY]  node.removeChild(right);  Node  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                  Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(right);  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(right);  Node  n  =  right.getFirstChild();	  return    n.removeFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	60	None	replace
146	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  left.getFirstChild();	  return    n.removeFirstChild();    Node    n    =    right.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	60	None	replace
147	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();	  return    left;    Node    leftChild    =    right.getLastChild();    	compilable	  [FE]  RuntimeException  	67	20	replace
148	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();	  return    left;    Node    leftChild    =    right.getLastChild();    	compilable	  [FE]  RuntimeException  	67	20	replace
149	[BUG]  [BUGGY]  return  leftChild.getFirstChild();  Node  leftChild  =  right.getLastChild();  [CE]  cannot  find  symbol  leftChild  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild.getFirstChild();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild.getFirstChild();  Node  leftChild  =  right.getLastChild();	  return    left;    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	67	None	replace
150	[BUG]  [BUGGY]  return  n;  Node  leftChild  =  right.getLastChild();  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  leftChild  =  right.getLastChild();	  return    left;    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  unreachable  statement	67	None	replace
151	[BUG]  [BUGGY]  return  right;  Node  leftChild  =  left.getLastChild();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  leftChild  =  left.getLastChild();	  return    left;    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  unreachable  statement	67	None	replace
152	[BUG]  [BUGGY]  return  rightChild.removeFirstChild();  [CE]  cannot  find  symbol  rightChild  [FE]        Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  rightChild.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  rightChild.removeFirstChild();	  return    leftChild.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  rightChild	72	None	replace
153	[BUG]  [BUGGY]  return  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  node.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  node.removeFirstChild();	  return    leftChild.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
154	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild();	  return    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	81	None	replace
155	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNext()  &&  right.getFirstChild().getNext()!=  right.getLastChild());	  return    left.getNext();    	non-compiled	[CE]  ';'  expected	81	None	replace
156	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()  ==  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext()  &&  right.getFirstChild().getNext()  ==  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNext()  &&  right.getFirstChild().getNext()  ==  right.getLastChild();	  return    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	81	None	replace
157	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getNext()!=  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNext()  &&  right.getLastChild().getNext()!=  right.getLastChild();	  return    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	81	None	replace
158	[BUG]  [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(right.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext()  &&  right.getLastChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNext()  &&  right.getLastChild().getString().equals(right.getLastChild());	  return    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	81	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  PeepholeFoldConstants());	          NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  PeepholeFoldConstants());	          NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  right);	          NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PeepholeFoldConstants());  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PeepholeFoldConstants());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  PeepholeFoldConstants());	          NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  PeepholeFoldConstants(),  this);	          NodeTraversal.traverse(compiler,    left,    new    PeepholeFoldConstants());    	non-compiled	[CE]  cannot  find  symbol  compiler	85	None	replace
164	[BUG]  [BUGGY]  Node  n  =  leftChild.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  leftChild.getFirstChild();	  return    n.getFirstChild();    Node    n    =    leftChild.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	40	None	replace
165	[BUG]  [BUGGY]  n  =  leftChild.getFirstChild();  [CE]  cannot  find  symbol  leftChild  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n  =  leftChild.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n  =  leftChild.getFirstChild();	  return    n.getFirstChild();    Node    n    =    leftChild.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	40	None	replace
166	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  left.getNext();	  return    n.removeFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	59	None	replace
167	[BUG]  [BUGGY]  node.removeFirstChild();  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  Node  n  =  left.getNext();	  return    n.removeFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
168	[BUG]  [BUGGY]  node.removeChild(left);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(left);  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(left);  Node  n  =  left.getNext();	  return    n.removeFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
169	[BUG]  [BUGGY]  node.removeChild(n);  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(n);  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(n);  Node  n  =  left.getNext();	  return    n.removeFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	59	None	replace
170	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  left  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  left  =  left.getFirstChild();	  return    left.getFirstChild();    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	101	None	replace
171	[BUG]  [BUGGY]  return  leftChild;  Node  leftChild  =  right.getFirstChild().getNext();  [CE]  cannot  find  symbol  leftChild  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  leftChild  =  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  leftChild  =  right.getFirstChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	71	None	replace
172	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	71	20	replace
173	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild().getNext();  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	71	20	replace
174	[BUG]  [BUGGY]  return  leftChild;  Node  leftChild  =  right.getLastChild().getNext();  [CE]  cannot  find  symbol  leftChild  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  leftChild  =  right.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  leftChild  =  right.getLastChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	71	None	replace
175	[BUG]  [BUGGY]  return  leftChild.getNext();  Node  leftChild  =  right.getFirstChild().getNext();  [CE]  cannot  find  symbol  leftChild  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild.getNext();  Node  leftChild  =  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild.getNext();  Node  leftChild  =  right.getFirstChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	71	None	replace
176	[BUG]  [BUGGY]  return  n;  Node  leftChild  =  right.getFirstChild().getNext();  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  leftChild  =  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  leftChild  =  right.getFirstChild().getNext();	  return    left;    Node    leftChild    =    right.getFirstChild().getNext();    	non-compiled	[CE]  unreachable  statement	71	None	replace
177	[BUG]  [BUGGY]  return  right.getType()  >=  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  >=  Token.EXPR_RESULT;	  return    right.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	22	None	replace
178	[BUG]  [BUGGY]  return  right.getType()  >>  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  >>  Token.EXPR_RESULT;	  return    right.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	22	None	replace
179	[BUG]  [BUGGY]  return  right.getType()  [Delete]  Token.EXPR_RESULT;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  [Delete]  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  [Delete]  Token.EXPR_RESULT;	  return    right.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  ';'  expected	22	None	replace
180	[BUG]  [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getLastChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getLastChild();  Node  leftChild  =  right.getLastChild();	  return    left.getLastChild();    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	45	None	replace
181	[BUG]  [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getLastChild();  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild();  Node  leftChild  =  left.getLastChild();	  return    left.getLastChild();    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  unreachable  statement	45	None	replace
182	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  right.getLastChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  leftChild  =  right.getLastChild();	  return    left.getLastChild();    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  unreachable  statement	45	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [CE]  cannot  find  symbol  compiler  [FE]        Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError());  [CE]  cannot  find  symbol  compiler  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError());	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
185	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [CE]  cannot  find  symbol  node  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
186	[BUG]  [BUGGY]  n.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [CE]  cannot  find  symbol  compiler  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError());  [CE]  cannot  find  symbol  compiler  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError());	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  compiler	104	None	replace
188	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  this);  [CE]  cannot  find  symbol  node  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  this);	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.removeFirstChild()),  this);  [CE]  cannot  find  symbol  compiler  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.removeFirstChild()),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n.removeFirstChild()),  this);	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	77	None	replace
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	64	20	replace
191	[BUG]  [BUGGY]  n.removeFirstChild();  [FE]  RuntimeException  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	compilable	  [FE]  RuntimeException  	64	20	replace
192	[BUG]  [BUGGY]  return  right.removeFirstChild();  n.removeFirstChild();  [CE]  unreachable  statement  [FE]                      Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.removeFirstChild();  n.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	non-compiled	[CE]  unreachable  statement	64	None	replace
193	[BUG]  [BUGGY]  return  left.removeFirstChild();  right.removeFirstChild();  [CE]  unreachable  statement  [FE]                        Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.removeFirstChild();  right.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.removeFirstChild();  right.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	non-compiled	[CE]  unreachable  statement	64	None	replace
194	[BUG]  [BUGGY]  return  left.removeFirstChild();  left.removeFirstChild();  [CE]  unreachable  statement  [FE]                          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.removeFirstChild();  left.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.removeFirstChild();  left.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	non-compiled	[CE]  unreachable  statement	64	None	replace
195	[BUG]  [BUGGY]  node.removeFirstChild();  node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]                            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  node.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  node.removeFirstChild();	  return    n.removeFirstChild();    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getLastChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getFirstChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getFirstChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getFirstChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	84	None	replace
201	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n);  [CE]  cannot  find  symbol  node  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right),  n);	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    n);    	non-compiled	[CE]  cannot  find  symbol  node	106	None	replace
202	[BUG]  [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild();  Node  left  =  right.getFirstChild();	  return    left.getLastChild();    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	46	None	replace
203	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getNext();	  return    left.getFirstChild();    Node    leftChild    =    right.getNext();    	compilable	  [FE]  RuntimeException  	31	20	replace
204	[BUG]  [BUGGY]  Node  leftChild  =  right.getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getNext();	  return    left.getFirstChild();    Node    leftChild    =    right.getNext();    	compilable	  [FE]  RuntimeException  	31	20	replace
205	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getNext();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  leftChild  =  left.getNext();	  return    left.getFirstChild();    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  unreachable  statement	31	None	replace
206	[BUG]  [BUGGY]  node.getFirstChild();  Node  leftChild  =  right.getNext();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  leftChild  =  right.getNext();	  return    left.getFirstChild();    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	31	None	replace
207	[BUG]  [BUGGY]  return  leftChild;  Node  left  =  right.getFirstChild();  [CE]  cannot  find  symbol  leftChild  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  left  =  right.getFirstChild();	  return    left;    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	66	None	replace
208	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  left  =  right.getFirstChild();	  return    left;    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	66	None	replace
209	[BUG]  [BUGGY]  return  right;  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  left  =  right.getFirstChild();	  return    left;    Node    left    =    right.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	66	None	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n.removeChild(left);	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    n.getFirstChild();    }    	compilable	  [FE]  RuntimeException  	109	20	replace
211	[BUG]  [BUGGY]  n.removeChild(left);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeChild(left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeChild(left);	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()!=    right.getLastChild())    {    return    n.getFirstChild();    }    	compilable	  [FE]  RuntimeException  	109	20	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left.getFirstChild(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n.getFirstChild(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	14	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right));  [CE]  cannot  find  symbol  compiler  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(right));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left));    	non-compiled	[CE]  cannot  find  symbol  compiler	91	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild()));  [CE]  cannot  find  symbol  compiler  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild()));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left));    	non-compiled	[CE]  cannot  find  symbol  compiler	91	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getLastChild()));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left));    	non-compiled	[CE]  cannot  find  symbol  compiler	91	None	replace
220	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getLastChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  leftChild  =  left.getLastChild();	  return    left.getFirstChild();    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  unreachable  statement	30	None	replace
221	[BUG]  [BUGGY]  node.getFirstChild();  Node  leftChild  =  right.getLastChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  leftChild  =  right.getLastChild();	  return    left.getFirstChild();    Node    leftChild    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	30	None	replace
222	[BUG]  [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
223	[BUG]  [BUGGY]  return  right.getNext();  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	12	None	add
224	[BUG]  [BUGGY]  return  right.getNext();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	12	None	add
225	[BUG]  [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  right.getNext();  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  right.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  right.getNext();  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
226	[BUG]  [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right.getNext();  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right.getNext();  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
227	[BUG]  [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    if(!right.hasChildren()  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  right.getNext();  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
228	[BUG]  [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  right.getNext();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  right.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getNext();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  right.getNext();  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  NodeTraversal());  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  right,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	17	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(right,  left,  new  NodeTraversal());  [CE]  no  suitable  constructor  found  for  NodeTraversal()  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(right,  left,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(right,  left,  new  NodeTraversal());	  NodeTraversal.traverse(compiler,    left,    new    NodeTraversal());    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal()	17	None	replace
234	[BUG]  [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    Node  n  =  left.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	10	None	add
235	[BUG]  [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  n.getLastChild();  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  n.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  n.getLastChild();  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
236	[BUG]  [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  n.getLastChild();  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  n.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  n.getLastChild();  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
237	[BUG]  [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  n.getLastChild();  }  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  n.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  right.getLastChild())  {  return  n.getLastChild();  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
238	[BUG]  [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  n.getLastChild();  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  n.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()  ==  left.getLastChild())  {  return  n.getLastChild();  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
239	[BUG]  [BUGGY]  return  n.getLastChild();  return  n.getLastChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  return  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    return  n.getLastChild();	  	non-compiled	[CE]  unreachable  statement	10	None	add
240	[BUG]  [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getLastChild();  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getLastChild();  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    n.getLastChild();    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left.getLastChild();  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PsiElementTraversal());  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  PsiElementTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  PsiElementTraversal());	          NodeTraversal.traverse(compiler,    leftChild,    new    PsiElementTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PsiElementTraversal());  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  PsiElementTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  PsiElementTraversal());	          NodeTraversal.traverse(compiler,    leftChild,    new    PsiElementTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  this);  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  this);	          NodeTraversal.traverse(compiler,    leftChild,    new    PsiElementTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  null);  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  null);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  PsiElementTraversal(),  null);	          NodeTraversal.traverse(compiler,    leftChild,    new    PsiElementTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  this,  new  PsiElementTraversal());  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  this,  new  PsiElementTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  this,  new  PsiElementTraversal());	          NodeTraversal.traverse(compiler,    leftChild,    new    PsiElementTraversal());    	non-compiled	[CE]  cannot  find  symbol  compiler	43	None	replace
246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
247	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
248	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	132	None	replace
249	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	132	None	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
251	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR  ||  leftChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
252	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
253	[BUG]  [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [FE]  RuntimeException  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  rightChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	132	20	replace
254	[BUG]  [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR  ||  rightChild.getType()  ==  Token.BLOCK)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR    ||    leftChild.getType()    ==    Token.BLOCK)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	132	None	replace
255	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	116	None	replace
256	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	116	None	replace
257	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	116	None	replace
258	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()  >=  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()  >=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()  >=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	116	None	replace
259	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	116	None	replace
260	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()  >=  n.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()  >=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()  >=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	116	None	replace
261	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;	  return    right.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	20	None	replace
262	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getType()  ==  Token.EXPR_RESULT;	  return    right.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	20	None	replace
263	[BUG]  [BUGGY]  return  right.getType()!=  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()!=  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()!=  Token.EXPR_RESULT?  left.getString()  :  Token.EXPR_RESULT;	  return    right.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  incompatible  types	20	None	replace
264	[BUG]  [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  leftChild  =  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	80	None	add
265	[BUG]  [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getLastChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  leftChild  =  right.getLastChild();	  	non-compiled	[CE]  unreachable  statement	80	None	add
266	[BUG]  [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getNext();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  leftChild  =  right.getNext();	  	non-compiled	[CE]  unreachable  statement	80	None	add
267	[BUG]  [BUGGY]  return  left.getNext();  Node  left  =  right.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  left  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  left  =  right.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	80	None	add
268	[BUG]  [BUGGY]  return  left.getNext();  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  left  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  left  =  right.getFirstChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	80	None	add
269	[BUG]  [BUGGY]  return  left.getNext();  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  left  =  right.getLastChild();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	80	None	add
270	[BUG]  [BUGGY]  return  left.getNext();  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNext();  Node  left  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    left.getNext();    Node  left  =  left.getNext();	  	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	80	None	add
271	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right));  [CE]  cannot  find  symbol  node  [FE]        Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  node	74	None	replace
272	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	5	None	add
273	[BUG]  [BUGGY]  return  right.getLastChild();  return  right.getLastChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  return  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    return  right.getLastChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
274	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  right  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    Node  right  =  right.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	5	None	add
275	[BUG]  [BUGGY]  return  right.getLastChild();  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    Node  leftChild  =  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
276	[BUG]  [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	5	None	add
277	[BUG]  [BUGGY]  return  right.getLastChild();  return  right.getFirstChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  return  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    return  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	5	None	add
278	[BUG]  [BUGGY]  return  right.getLastChild();  Node  return  right.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  return  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getLastChild();    Node  return  right.getFirstChild();	  	non-compiled	[CE]  not  a  statement	5	None	add
279	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	129	None	replace
280	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  n.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  n.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	129	None	replace
281	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  if(left!=  null  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  n.getFirstChild();  if(left!=  null  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  n.getFirstChild();  if(left!=  null  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	129	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	compilable	  [FE]  AssertionFailedError  	129	1	replace
283	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(left!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	compilable	  [FE]  AssertionFailedError  	129	1	replace
284	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  if(right!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  left  =  right.getFirstChild();  if(right!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  left  =  right.getFirstChild();  if(right!=  null  ||  left.getFirstChild().getNext()!=  right.getLastChild())  {  return  left;  }	  return    left;    Node    left    =    right.getFirstChild();    if(left!=    null    ||    left.getFirstChild().getNext()!=    right.getLastChild())    {    return    left;    }    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	129	None	replace
285	[BUG]  [BUGGY]  node.setFirstChild();  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.setFirstChild();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.setFirstChild();  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
286	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  n  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  n  =  left.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
287	[BUG]  [BUGGY]  node.setFirstChild();  Node  n  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.setFirstChild();  Node  n  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.setFirstChild();  Node  n  =  right.getFirstChild();	  return    n.getFirstChild();    Node    n    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
288	[BUG]  [BUGGY]  return  right.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild()  +  1;	  return    right.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
289	[BUG]  [BUGGY]  Node  return  left.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  return  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  return  left.getFirstChild();	  return    left.getLastChild();    Node    return    left.getFirstChild();    	non-compiled	[CE]  not  a  statement	123	None	replace
290	[BUG]  [BUGGY]  Node  return  left.getLastChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  return  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  return  left.getLastChild();	  return    left.getLastChild();    Node    return    left.getFirstChild();    	non-compiled	[CE]  not  a  statement	123	None	replace
291	[BUG]  [BUGGY]  Node  return  right.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  return  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  return  right.getFirstChild();	  return    left.getLastChild();    Node    return    left.getFirstChild();    	non-compiled	[CE]  not  a  statement	123	None	replace
292	[BUG]  [BUGGY]  return  new  Node(leftChild,  right.getLastChild());  [CE]  cannot  find  symbol  leftChild  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(leftChild,  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(leftChild,  right.getLastChild());	  return    new    Node(leftChild,    right.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  leftChild	51	None	replace
293	[BUG]  [BUGGY]  return  new  Node(leftChild,  n.getFirstChild());  [CE]  cannot  find  symbol  leftChild  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(leftChild,  n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(leftChild,  n.getFirstChild());	  return    new    Node(leftChild,    right.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  leftChild	51	None	replace
294	[BUG]  [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getNext();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getLastChild();  Node  leftChild  =  right.getNext();	  return    left.getLastChild();    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
295	[BUG]  [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getNext();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild();  Node  leftChild  =  left.getNext();	  return    left.getLastChild();    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  unreachable  statement	48	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n));  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  n));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n));  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  n));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  compiler	93	None	replace
298	[BUG]  [BUGGY]  node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right));	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right));    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
299	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	return  right.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
300	[BUG]  [BUGGY]  return  right.getFirstChild().getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	return  right.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
302	[BUG]  [BUGGY]  return  right.getLastChild().getNext();  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
303	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	return  left.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
304	[BUG]  [BUGGY]  return  left.getLastChild().getNext();  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  RuntimeException  	128	20	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	return  n.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
306	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n.getLastChild().getNext();	  return    n.getFirstChild().getNext();    	compilable	  [FE]  AssertionFailedError  	128	1	replace
307	[BUG]  [BUGGY]  return  leftChild.getFirstChild().getNext();  [CE]  cannot  find  symbol  leftChild  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	128	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  right);  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  right);	          NodeTraversal.traverse(compiler,    right,    new    AssertionFailedError(left),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  n,  leftChild);  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  n,  leftChild);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left),  n,  leftChild);	          NodeTraversal.traverse(compiler,    right,    new    AssertionFailedError(left),    n);    	non-compiled	[CE]  cannot  find  symbol  compiler	121	None	replace
310	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	1	None	add
311	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	1	None	add
312	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  leftChild  =  right.getLastChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  leftChild  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  leftChild  =  right.getLastChild();	  	non-compiled	[CE]  unreachable  statement	1	None	add
313	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  leftChild  =  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	1	None	add
314	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  right  =  right.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  right  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  right  =  right.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	1	None	add
315	[BUG]  [BUGGY]  return  right.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    NodeTraversal.traverse(compiler,  left,  new  NodeTraversal());	  	non-compiled	[CE]  cannot  find  symbol  compiler	1	None	add
316	[BUG]  [BUGGY]  return  right.removeFirstChild();  Node  right  =  n.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.removeFirstChild();  Node  right  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.removeFirstChild();    Node  right  =  n.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	1	None	add
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  left.getFirstChild();	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  RuntimeException  	112	20	replace
318	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    left.getFirstChild();    }    	compilable	  [FE]  RuntimeException  	112	20	replace
319	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  [CE]  cannot  find  symbol  newNode  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  parent.replaceChild(n,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	parent.replaceChild(n,  newNode);	  return    n.getFirstChild();    if(!right.hasChildren()    ||    right.getFirstChild().getNext()    ==    right.getLastChild())    {    return    left.getFirstChild();    }    	non-compiled	[CE]  cannot  find  symbol  newNode	112	None	replace
320	[BUG]  [BUGGY]  return  leftChild;  Node  leftChild  =  right.getNext();  [CE]  cannot  find  symbol  leftChild  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  leftChild  =  right.getNext();	  return    left;    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  leftChild	68	None	replace
321	[BUG]  [BUGGY]  return  rightChild;  Node  leftChild  =  left.getNext();  [CE]  cannot  find  symbol  rightChild  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  rightChild;  Node  leftChild  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  rightChild;  Node  leftChild  =  left.getNext();	  return    left;    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  cannot  find  symbol  rightChild	68	None	replace
322	[BUG]  [BUGGY]  return  right;  Node  leftChild  =  left.getNext();  [CE]  unreachable  statement  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  leftChild  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  leftChild  =  left.getNext();	  return    left;    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  unreachable  statement	68	None	replace
323	[BUG]  [BUGGY]  return  n;  Node  leftChild  =  right.getNext();  [CE]  unreachable  statement  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  leftChild  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  leftChild  =  right.getNext();	  return    left;    Node    leftChild    =    right.getNext();    	non-compiled	[CE]  unreachable  statement	68	None	replace
324	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  left.getLastChild();	  return    left.getFirstChild();    Node    leftChild    =    left.getLastChild();    	compilable	  [FE]  RuntimeException  	100	20	replace
325	[BUG]  [BUGGY]  Node  leftChild  =  left.getLastChild();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getLastChild();	  return    left.getFirstChild();    Node    leftChild    =    left.getLastChild();    	compilable	  [FE]  RuntimeException  	100	20	replace
326	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	7	None	add
327	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	7	None	add
328	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  right  =  right.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  right  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  right  =  right.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	7	None	add
329	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  right  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  right  =  left.getLastChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	7	None	add
330	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  right.getFirstChild();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  leftChild  =  right.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	7	None	add
331	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  right  =  n.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  right  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right.getFirstChild();    Node  right  =  n.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	7	None	add
332	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
333	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
334	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
335	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(left.getLastChild());  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(left.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
336	[BUG]  [BUGGY]  return  left.getType()!=  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()!=  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()!=  Token.EXPR_RESULT  &&  left.getFirstChild().getString().equals(right.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
337	[BUG]  [BUGGY]  return  left.getType()!=  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()!=  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()!=  Token.EXPR_RESULT  &&  right.getFirstChild().getString().equals(right.getLastChild());	  return    n.getType()    ==    Token.EXPR_RESULT    &&    left.getFirstChild().getString().equals(right.getLastChild());    	non-compiled	[CE]  incompatible  types	115	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  this);  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right),  this);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	88	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  this);  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left),  this);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	88	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  this);  [CE]  cannot  find  symbol  compiler  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  this);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right),  this);	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right),    this);    	non-compiled	[CE]  cannot  find  symbol  compiler	88	None	replace
341	[BUG]  [BUGGY]  return  left.getNode();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getNode();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getNode();	  return    newNode;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
342	[BUG]  [BUGGY]  return  left.getChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getChild();	  return    newNode;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
343	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  return  n.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  n  =  left.getFirstChild();  return  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  n  =  left.getFirstChild();  return  n.removeFirstChild();	  return    n.removeFirstChild();    Node    n    =    left.getFirstChild();    return    n.removeFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	105	None	replace
344	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  return  right.removeFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  right  =  left.getFirstChild();  return  right.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  right  =  left.getFirstChild();  return  right.removeFirstChild();	  return    n.removeFirstChild();    Node    n    =    left.getFirstChild();    return    n.removeFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	105	None	replace
345	[BUG]  [BUGGY]  Node  leftChild  =  left.getFirstChild();  return  rightChild.removeFirstChild();  [CE]  cannot  find  symbol  rightChild  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  left.getFirstChild();  return  rightChild.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  left.getFirstChild();  return  rightChild.removeFirstChild();	  return    n.removeFirstChild();    Node    n    =    left.getFirstChild();    return    n.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  rightChild	105	None	replace
346	[BUG]  [BUGGY]  return  right.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getNext()  +  1;	  return    right.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
347	[BUG]  [BUGGY]  return  right.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getNext()  -  1;  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getNext()  -  1;	  return    right.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right.getFirstChild(),  right.getLastChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	replace
351	[BUG]  [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  node  [FE]                  Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  node	76	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getFirstChild(),  right.getLastChild()));	  return    n.removeFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	76	None	replace
353	[BUG]  [BUGGY]  return  new  Node(left,  n.getFirstChild());  [CE]  no  suitable  constructor  found  for  Node(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(left,  n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(left,  n.getFirstChild());	  return    new    Node(n,    right.getFirstChild());    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Node,Node)	56	None	replace
354	[BUG]  [BUGGY]  return  new  Node(Token.ASSIGN,  leftChild,  right.getFirstChild());  [CE]  cannot  find  symbol  leftChild  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(Token.ASSIGN,  leftChild,  right.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(Token.ASSIGN,  leftChild,  right.getFirstChild());	  return    new    Node(n,    right.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  leftChild	56	None	replace
355	[BUG]  [BUGGY]  return  new  Node(n,  leftChild.getFirstChild());  [CE]  cannot  find  symbol  leftChild  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  new  Node(n,  leftChild.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  new  Node(n,  leftChild.getFirstChild());	  return    new    Node(n,    right.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  leftChild	56	None	replace
356	[BUG]  [BUGGY]  return  right;  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
357	[BUG]  [BUGGY]  return  right;  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  right  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	25	None	add
358	[BUG]  [BUGGY]  return  right;  Node  right  =  left.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  right  =  left.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    Node  right  =  left.getNext();  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	25	None	add
359	[BUG]  [BUGGY]  return  right;  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  right  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    Node  right  =  left.getNext();	  	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	25	None	add
360	[BUG]  [BUGGY]  return  right;  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right;  }  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    if(!right.hasChildren()  ||  right.getFirstChild().getNext()!=  left.getLastChild())  {  return  right;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
361	[BUG]  [BUGGY]  return  right;  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [CE]  unreachable  statement  [FE]              AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    if(!left.hasChildren()  ||  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
362	[BUG]  [BUGGY]  return  right;  if(!right.hasChildren()  &&  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [CE]  unreachable  statement  [FE]                AssertionFailedError    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  if(!right.hasChildren()  &&  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return    right;    if(!right.hasChildren()  &&  right.getFirstChild().getNext()!=  right.getLastChild())  {  return  right;  }	  	non-compiled	[CE]  unreachable  statement	25	None	add
363	[BUG]  [BUGGY]  return  right.replaceChild(left,  n);  [CE]  incompatible  types  [FE]          Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.replaceChild(left,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.replaceChild(left,  n);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  incompatible  types	73	None	replace
364	[BUG]  [BUGGY]  return  left.replaceChild(right,  right);  [CE]  incompatible  types  [FE]            Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.replaceChild(right,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.replaceChild(right,  right);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  incompatible  types	73	None	replace
365	[BUG]  [BUGGY]  return  left.replaceChild(right,  newNode);  [CE]  cannot  find  symbol  newNode  [FE]              Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.replaceChild(right,  newNode);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.replaceChild(right,  newNode);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  cannot  find  symbol  newNode	73	None	replace
366	[BUG]  [BUGGY]  return  left.replaceChild(right,  n);  [CE]  incompatible  types  [FE]                Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.replaceChild(right,  n);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.replaceChild(right,  n);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  incompatible  types	73	None	replace
367	[BUG]  [BUGGY]  return  right.replaceChild(left,  right);  [CE]  incompatible  types  [FE]                  Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.replaceChild(left,  right);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  incompatible  types	73	None	replace
368	[BUG]  [BUGGY]  return  left.replaceChild(left,  right);  [CE]  incompatible  types  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.replaceChild(left,  right);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.replaceChild(left,  right);	  return    right.replaceChild(left,    newNode);    	non-compiled	[CE]  incompatible  types	73	None	replace
369	[BUG]  [BUGGY]  return  left.getfirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getfirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getfirstChild();	  return    right.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
370	[BUG]  [BUGGY]  return  leftChild.getfirstChild();  [CE]  cannot  find  symbol  leftChild  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild.getfirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild.getfirstChild();	  return    right.getfirstChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	96	None	replace
371	[BUG]  [BUGGY]  return  left.getFirstChild().getNext(),  right.getLastChild());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getFirstChild().getNext(),  right.getLastChild());	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	120	None	replace
372	[BUG]  [BUGGY]  return  left.getFirstChild().getNext(),  right.getLastChild();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getFirstChild().getNext(),  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getFirstChild().getNext(),  right.getLastChild();	  return    left.getFirstChild().getNext();    	non-compiled	[CE]  ';'  expected	120	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left,  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  left,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                  RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  left,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  left,  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                    RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left,  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                      RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(left,  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n,  right,  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n,  right,  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(n,  right,  left.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n,  left,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n,  left,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  right,  new  AssertionFailedError(n,  left,  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
379	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
380	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
381	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
382	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
383	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	113	None	replace
384	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()  >=  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()  >=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  left.getFirstChild().getNext()  >=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    left.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	113	None	replace
385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
386	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
387	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR)  {  return  left;  }  [CE]  cannot  find  symbol  rightChild  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(rightChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	non-compiled	[CE]  cannot  find  symbol  rightChild	131	None	replace
388	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
389	[BUG]  [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getLastChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
390	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
391	[BUG]  [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [FE]  RuntimeException  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  n.getFirstChild();  if(leftChild.getType()  ==  Token.VAR)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
392	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
393	[BUG]  [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [FE]  RuntimeException  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	Node  leftChild  =  right.getFirstChild();  if(leftChild.getType()  ==  Token.FUNCTION)  {  return  left;  }	  return    left;    Node    leftChild    =    right.getFirstChild();    if(leftChild.getType()    ==    Token.VAR)    {    return    left;    }    	compilable	  [FE]  RuntimeException  	131	20	replace
394	[BUG]  [BUGGY]  return  leftChild;  Node  left  =  right.getLastChild();  [CE]  cannot  find  symbol  leftChild  [FE]                  AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  leftChild;  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  leftChild;  Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  leftChild	70	None	replace
395	[BUG]  [BUGGY]  return  n;  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  n;  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  n;  Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	70	None	replace
396	[BUG]  [BUGGY]  return  right;  Node  left  =  right.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right;  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right;  Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	70	None	replace
397	[BUG]  [BUGGY]  return  rightChild;  Node  left  =  right.getLastChild();  [CE]  cannot  find  symbol  rightChild  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  rightChild;  Node  left  =  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  rightChild;  Node  left  =  right.getLastChild();	  return    left;    Node    left    =    right.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  rightChild	70	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right,  right.getFirstChild(),  right.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	15	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right.getFirstChild(),  left.getLastChild()));	  NodeTraversal.traverse(compiler,    leftChild,    new    AssertionFailedError(n,    right.getFirstChild(),    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	15	None	replace
400	[BUG]  [BUGGY]  node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError());	  return    n.getFirstChild();    NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError());    	non-compiled	[CE]  cannot  find  symbol  node	92	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]              RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right,  left.getLastChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getLastChild()));  [CE]  cannot  find  symbol  compiler  [FE]                RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getLastChild()));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  left,  new  AssertionFailedError(n,  right.getLastChild()));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(left,    right.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol  compiler	86	None	replace
403	[BUG]  [BUGGY]  node.getLastChild();  Node  leftChild  =  left.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getLastChild();  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getLastChild();  Node  leftChild  =  left.getFirstChild();	  return    left.getLastChild();    Node    leftChild    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
404	[BUG]  [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getLastChild();  Node  leftChild  =  right.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getLastChild();  Node  leftChild  =  right.getFirstChild();	  return    left.getLastChild();    Node    leftChild    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
405	[BUG]  [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getFirstChild();  [CE]  unreachable  statement  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getFirstChild();  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getFirstChild();  Node  leftChild  =  left.getFirstChild();	  return    left.getFirstChild();    Node    leftChild    =    left.getFirstChild();    	non-compiled	[CE]  unreachable  statement	32	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right));  [CE]  cannot  find  symbol  compiler  [FE]        RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(right));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	83	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left));  [CE]  cannot  find  symbol  compiler  [FE]          RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  n,  new  AssertionFailedError(left));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	83	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right));  [CE]  cannot  find  symbol  compiler  [FE]            RuntimeException      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right));  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	NodeTraversal.traverse(compiler,  leftChild,  new  AssertionFailedError(right));	          NodeTraversal.traverse(compiler,    left,    new    AssertionFailedError(right));    	non-compiled	[CE]  cannot  find  symbol  compiler	83	None	replace
409	[BUG]  [BUGGY]  return  newType  <  Node>(right.getFirstChild(),  left.getLastChild());  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(right.getFirstChild(),  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(right.getFirstChild(),  left.getLastChild());	  return    newType    <    Node>(leftChild.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	125	None	replace
410	[BUG]  [BUGGY]  return  newType  <  Node>(n.getFirstChild(),  right.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(n.getFirstChild(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(n.getFirstChild(),  right.getLastChild());	  return    newType    <    Node>(leftChild.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	125	None	replace
411	[BUG]  [BUGGY]  return  newType  <  Node>(left.getFirstChild(),  right.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(left.getFirstChild(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(left.getFirstChild(),  right.getLastChild());	  return    newType    <    Node>(leftChild.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	125	None	replace
412	[BUG]  [BUGGY]  return  newType  <  Node>(RIGHT.getFirstChild(),  right.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(RIGHT.getFirstChild(),  right.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(RIGHT.getFirstChild(),  right.getLastChild());	  return    newType    <    Node>(leftChild.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	125	None	replace
413	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    right.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	114	None	replace
414	[BUG]  [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  left.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    right.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	114	None	replace
415	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()  >=  n.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()  >=  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()  >=  n.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    right.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	114	None	replace
416	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  left.getLastChild();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  ||  right.getFirstChild().getNext()!=  left.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    right.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	114	None	replace
417	[BUG]  [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  right.getLastChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  right.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getType()  ==  Token.EXPR_RESULT  &&  right.getFirstChild().getNext()!=  right.getLastChild();	  return    n.getType()    ==    Token.EXPR_RESULT    ||    right.getFirstChild().getNext()!=    right.getLastChild();    	non-compiled	[CE]  incompatible  types	114	None	replace
418	[BUG]  [BUGGY]  node.removeFirstChild();  Node  n  =  left.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                  Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeFirstChild();  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeFirstChild();  Node  n  =  left.getLastChild();	  return    n.removeFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	63	None	replace
419	[BUG]  [BUGGY]  node.removeChild(left);  Node  n  =  left.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                    Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.removeChild(left);  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.removeChild(left);  Node  n  =  left.getLastChild();	  return    n.removeFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  node	63	None	replace
420	[BUG]  [BUGGY]  n.removeFirstChild();  Node  n  =  left.getLastChild();  [CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)  [FE]                      Error      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n.removeFirstChild();  Node  n  =  left.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n.removeFirstChild();  Node  n  =  left.getLastChild();	  return    n.removeFirstChild();    Node    n    =    left.getLastChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  tryFoldAssign(Node,Node,Node)	63	None	replace
421	[BUG]  [BUGGY]  return  newType  <  Node>(left.getFirstChild(),  left.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(left.getFirstChild(),  left.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(left.getFirstChild(),  left.getLastChild());	  return    newType    <    Node>(right.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	126	None	replace
422	[BUG]  [BUGGY]  return  newType  <  Node>(right.getFirstChild(),  right.getLastChild(),  left);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  newType  <  Node>(right.getFirstChild(),  right.getLastChild(),  left);  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  newType  <  Node>(right.getFirstChild(),  right.getLastChild(),  left);	  return    newType    <    Node>(right.getFirstChild(),    right.getLastChild());    	non-compiled	[CE]  ')'  expected	126	None	replace
423	[BUG]  [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getFirstChild();  [CE]  unreachable  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  right.getLastChild();  Node  leftChild  =  left.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  right.getLastChild();  Node  leftChild  =  left.getFirstChild();	  return    left.getLastChild();    Node    leftChild    =    right.getFirstChild();    	non-compiled	[CE]  unreachable  statement	44	None	replace
424	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  left.getNext();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
425	[BUG]  [BUGGY]  node.getFirstChild();  Node  n  =  right.getNext();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  node.getFirstChild();  Node  n  =  right.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	node.getFirstChild();  Node  n  =  right.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
426	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	compilable	  [FE]  RuntimeException  	37	20	replace
427	[BUG]  [BUGGY]  n  =  left.getNext();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  n  =  left.getNext();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	n  =  left.getNext();	  return    n.getFirstChild();    Node    n    =    left.getNext();    	compilable	  [FE]  RuntimeException  	37	20	replace
428	[BUG]  [BUGGY]  return  rightChild.getLastChild();  [CE]  cannot  find  symbol  rightChild  [FE]        AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  rightChild.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  rightChild.getLastChild();	  return    leftChild.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  rightChild	95	None	replace
429	[BUG]  [BUGGY]  return  next.getLastChild();  [CE]  cannot  find  symbol  next  [FE]          AssertionFailedError      [CONTEXT]      if  (!right.hasChildren()  ||  right.getFirstChild().getNext()  !=  right.getLastChild())  {        [BUGGY]  return  next.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldAssign  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  negNum  val  int  newType  Node  left  leftChild  n  newNode  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	return  next.getLastChild();	  return    leftChild.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  next	95	None	replace
