bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
2	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
3	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  rval  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >>  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  rval  <=  32))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval!=  0  &&  rval  <=  32))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
5	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval!=  0  &&  rval  <=  32))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
6	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <=    32))    {    if  (!(lval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
7	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <=    32))    {    if  (!(lval  >>  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
8	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <=    32))    {    if  (!(lval!=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
9	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <=    32))    {    if  (!(lval  ==  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
10	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  If  (!(lval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <=  32))  {  If  (!(lval  >=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <=    32))    {    If  (!(lval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
12	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	10	2	replace
13	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  >=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    if  (!(rval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
14	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  >>  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  >>  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    if  (!(rval  >>  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
15	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval!=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval!=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    if  (!(rval!=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
16	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  ==  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    if  (!(rval  ==  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
17	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  If  (!(rval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  If  (!(rval  >=  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    If  (!(rval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
18	[BUG]  [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  [Delete]  0  &&  rval  <=  32))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(rval  >=  0  &&  rval  <=  32))  {  if  (!(rval  [Delete]  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(rval    >=    0    &&    rval    <=    32))    {    if  (!(rval  [Delete]  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ')'  expected	4	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <=  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
20	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <=  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
22	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  ||  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
24	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  ||  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
25	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  right  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  right  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	8	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  0  ||  rval  <  32)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
27	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  ||  rval  <  32)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  rval  <=  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
29	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  rval  <=  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
31	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <=  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
33	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <=  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
34	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval  >  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
35	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  If(!(lval  >  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  If(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <    32))    {    If(!(lval  >  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
36	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  31))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval  >  0  &&  rval  <  31))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
37	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  64))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  if(!(lval  >  0  &&  rval  <  64))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval  >  0  &&  rval  <  64))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
38	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  right  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  right  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
39	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval!=  0  &&  right  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval!=  0  &&  right  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
40	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >>  0  &&  right  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  right  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	3	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval!=  0  &&  rval  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
42	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval!=  0  &&  rval  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	3	1	replace
43	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval);  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  lval);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <    32))    {    if  (!(lval  >=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
50	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <    32))    {    if  (!(lval  >>  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
51	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval!=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <    32))    {    if  (!(lval!=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
52	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <    32))    {    if  (!(lval  ==  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
53	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  If  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  rval  <  32))  {  If  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    rval    <    32))    {    If  (!(lval  >=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
54	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <    32))    {    if  (!(lval  <  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
55	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  If  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  If  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <    32))    {    If  (!(lval  <  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
56	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  31))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <    32))    {    if  (!(lval  <  0  &&  rval  <  31))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
57	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  33))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  if  (!(lval  <  0  &&  rval  <  33))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <    32))    {    if  (!(lval  <  0  &&  rval  <  33))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
58	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  for(!(lval  >  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  rval  <  32))  {  for(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval  >  0  &&  rval  <  32))  {	  	non-compiled	[CE]  not  a  statement	11	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
60	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
61	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  rval  <  32))  {  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval  <  0  &&  rval  <  32))  {	  	non-compiled	[CE]  not  a  statement	7	None	add
62	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  left  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  left  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	3	None	replace
63	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  n  =  left.getNext();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  lval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
67	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  lval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
68	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
69	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerBound());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.doubleValue());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerCase());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild());  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  >=  0  &&  lval  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	3	2	replace
74	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  lval  <  32))  {	  if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	3	2	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
76	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	10	1	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
78	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]    error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	5	1	replace
