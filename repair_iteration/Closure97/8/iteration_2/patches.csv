bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLowerCase());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLowerCase());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.getLowerCase());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
2	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  -  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  -  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
3	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerCase()  +  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
4	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getUpperCase());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getUpperCase());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getUpperCase());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
5	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getDouble());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getDouble());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getDouble());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
6	[BUG]  [BUGGY]  If  (!(lval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
7	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
8	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  If  (!(lval  >>  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >>  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >>  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
10	[BUG]  [BUGGY]  If  (!(lval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
11	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  INVALID_GETELEM_INDEX_ERROR))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
12	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    if  (!(lval  ==  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
13	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    if  (!(lval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
14	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    if  (!(lval  >>  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
15	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    if  (!(lval!=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
16	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  If  (!(lval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  If  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    If  (!(lval  ==  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
17	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  right  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  right  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  right  <=  32))  {	  if    (!(lval    >>    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	40	None	replace
18	[BUG]  [BUGGY]  if  (!(right!=  0  &&  lval  <  32))  {  [CE]  incomparable  types:  Node  and  int  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(right!=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(right!=  0  &&  lval  <  32))  {	  if    (!(lval    >>    0    &&    right    <    32))    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	40	None	replace
19	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  ==  0  &&  right  <  32))  {	  if    (!(lval    >>    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	40	None	replace
20	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length()  -  1);	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
21	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.length());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.length());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.length());	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
22	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  MAX_FOLD_NUMBER);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length()  -  MAX_FOLD_NUMBER);	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
23	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  2);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length()  -  2);	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
24	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length()  +  1);	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
25	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  3);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.length()  -  3);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.length()  -  3);	  Math.max(MAX_FOLD_NUMBER,    left.length());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
27	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
29	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
31	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
33	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
35	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	1	replace
36	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
37	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  0  &&  rval  <=  32)||(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
39	[BUG]  [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval  ==  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  0  &&  rval  <=  32)||(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  0  ||  rval  ==  0)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  ==  0  ||  rval  ==  0)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
41	[BUG]  [BUGGY]  if(lval  ==  0  ||  rval  ==  0)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  0  ||  rval  ==  0)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  0  ||  rval  ==  0)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
43	[BUG]  [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  0  ||  rval  ==  0)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >=  0  ||  rval  ==  0)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
45	[BUG]  [BUGGY]  if(lval  >=  0  ||  rval  ==  0)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  0  ||  rval  ==  0)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >=  0  ||  rval  ==  0)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval!=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  0  &&  rval  <=  32)||(lval!=  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
47	[BUG]  [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval!=  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  32)||(lval!=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  0  &&  rval  <=  32)||(lval!=  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
48	[BUG]  [BUGGY]  Node  right  =  n.getRight();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  n.getRight();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getRight();	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
49	[BUG]  [BUGGY]  Node  right  =  n.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  n.getNext()  +  1;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getNext()  +  1;	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
51	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
53	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
55	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
57	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
58	[BUG]  [BUGGY]  If  (!(lval  <  0  ||  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  ||  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
59	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  rval  <  0))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  rval  <  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  rval  <  0))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
60	[BUG]  [BUGGY]  If  (!(lval  <=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <=  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
61	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
62	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  rval  <  10))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  rval  <  10))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  rval  <  10))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
63	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  rval  <  4))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  rval  <  4))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  rval  <  4))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
64	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	54	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
66	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
67	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	54	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
69	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
70	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <=  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	54	None	replace
71	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.doubleValue());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.doubleValue());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.doubleValue());	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
72	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  -  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  -  1);	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
73	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  +  1);	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
74	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval.doubleValue());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval.doubleValue());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  lval.doubleValue());	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
75	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  /  2.0);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  /  2.0);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.doubleValue()  /  2.0);	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
76	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
77	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >=  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
78	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  ==  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	52	None	replace
79	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval!=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    if  (!(lval!=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
80	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    if  (!(lval  >=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
81	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    if  (!(lval  >>  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
82	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    if  (!(lval  ==  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
83	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  [Delete]  0  &&  rval  <  32))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  if  (!(lval  [Delete]  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    if  (!(lval  [Delete]  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ')'  expected	41	None	add
84	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    If    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
85	[BUG]  [BUGGY]  If  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    If    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
86	[BUG]  [BUGGY]  If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    If    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
87	[BUG]  [BUGGY]  if  (!(right  >=  0  &&  lval  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(right  >=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(right  >=  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	38	None	replace
88	[BUG]  [BUGGY]  If  (!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
89	[BUG]  [BUGGY]  If  (!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  ==  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
90	[BUG]  [BUGGY]  If  (!(lval  >>  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >>  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >>  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
91	[BUG]  [BUGGY]  If  (!(lval!=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval!=  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
92	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  right.getFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
93	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
94	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  31))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  31))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
95	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  31))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  31))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	non-compiled	[CE]  ';'  expected	56	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  31))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
97	[BUG]  [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  31))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  31))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	56	1	replace
98	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getFirstChild().getString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getFirstChild().getString());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getFirstChild().getString());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
99	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLastChild().getString());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.getLastChild().getString());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
100	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  right);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  right);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  right);	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
101	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString()  +  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
102	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getMask());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getMask());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getMask());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
103	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    if  (!(lval!=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
104	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  >=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    if  (!(lval  >=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
105	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  >>  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    if  (!(lval  >>  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
106	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    if  (!(lval  ==  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
107	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  [Delete]  0  &&  rval  <=  32))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  if  (!(lval  [Delete]  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    if  (!(lval  [Delete]  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ')'  expected	4	None	add
108	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  if(!(lval  >  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  if(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <=    32))    {    if(!(lval  >  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
109	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  If(!(lval  >  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  If(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <=    32))    {    If(!(lval  >  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
110	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  if(!(lval  >  0  &&  rval  <=  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  if(!(lval  >  0  &&  rval  <=  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <=    32))    {    if(!(lval  >  0  &&  rval  <=  31))  {	  	non-compiled	[CE]  ';'  expected	28	None	add
111	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
112	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lval;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  left.getNext(),  lval;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getNext(),  lval;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
113	[BUG]  [BUGGY]  Node  right  =  right.getNext();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  right.getNext();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  right.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
114	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  (!(lval  <=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <=    0    &&    rval    <    32))    {    if  (!(lval  <=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	19	None	add
115	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  If  (!(lval  <=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  If  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <=    0    &&    rval    <    32))    {    If  (!(lval  <=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	19	None	add
116	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  (!(lval  <=  0  &&  rval  <  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  (!(lval  <=  0  &&  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <=    0    &&    rval    <    32))    {    if  (!(lval  <=  0  &&  rval  <  31))  {	  	non-compiled	[CE]  ';'  expected	19	None	add
117	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  ((lval  <=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  if  ((lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <=    0    &&    rval    <    32))    {    if  ((lval  <=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	19	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    33))    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
119	[BUG]  [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  32))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    33))    {    	compilable	  [FE]  AssertionFailedError  	57	1	replace
120	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    33))    {    	non-compiled	[CE]  ';'  expected	57	None	replace
121	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  32))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  32)  {  if  (!(lval  <  0  ||  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    33))    {    	non-compiled	[CE]  ';'  expected	57	None	replace
122	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
123	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
124	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
125	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
126	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ')'  expected	77	None	add
127	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    If(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
128	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
129	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
130	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
131	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
132	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
133	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
135	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
137	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
139	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
141	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
143	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
144	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <    32))    {    if(!(lval  >  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
145	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  If(!(lval  >  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  If(!(lval  >  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <    32))    {    If(!(lval  >  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
146	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <    32))    {    if(!(lval  >  0  &&  lval  <  31))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
147	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  33))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  if(!(lval  >  0  &&  lval  <  33))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <    32))    {    if(!(lval  >  0  &&  lval  <  33))  {	  	non-compiled	[CE]  ';'  expected	59	None	add
148	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getFirstChild());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getFirstChild());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getFirstChild());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
149	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  -  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  -  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
150	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLastChild());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLastChild());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.getLastChild());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
151	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild()  +  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
152	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLastChild());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLastChild());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  left.getLastChild());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
153	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLowerBound());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right.getLowerBound());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right.getLowerBound());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
154	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  -  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  -  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
155	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getUpperBound());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getUpperBound());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getUpperBound());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
156	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLowerBound()  +  1);	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
157	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >>  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER  ||  rval  >  MAX_FOLD_NUMBER)  {  if  (!(lval  >>  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval!=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	51	None	replace
158	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  right  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  right  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <=  0  &&  right  <=  32))  {	  if    (!(lval    <=    0    &&    rval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	20	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
160	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
162	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
163	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    if(lval  <=  0  ||  rval  <  32)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
164	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  If(lval  <=  0  ||  rval  <  32)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  If(lval  <=  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    If(lval  <=  0  ||  rval  <  32)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
165	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  31)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  31)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    if(lval  <=  0  ||  rval  <  31)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
166	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  >=  =  0  ||  rval  <  32)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  >=  =  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    if(lval  >=  =  0  ||  rval  <  32)  {	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
167	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  64)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  if(lval  <=  0  ||  rval  <  64)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    if(lval  <=  0  ||  rval  <  64)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
168	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
169	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
170	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
171	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
172	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >>  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
173	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
174	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
176	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <=  0  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
178	[BUG]  [BUGGY]  if  (!(lval  <=  0  ||  rval  <  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <=  0  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  >  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  ||  rval  >  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
180	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  >  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  >  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  ||  rval  >  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  ||  lval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
182	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  lval  <  32))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  ||  lval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  1  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  1  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
184	[BUG]  [BUGGY]  if  (!(lval  <  1  ||  rval  <  32))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  1  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  1  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <=  0  &&  rval  <=  32))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
186	[BUG]  [BUGGY]  if(!(lval  <=  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <=  0  &&  rval  <=  32))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	1	replace
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
188	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  rval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
190	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  rval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	29	2	replace
191	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.getLastChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getLastChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
192	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
193	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    if  (!(lval  <  0  ||  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
194	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  If  (!(lval  <  0  ||  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  If  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    If  (!(lval  <  0  ||  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
195	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    if  (!(lval  <  0  ||  rval  <  31))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
196	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  64))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!(lval  <  0  ||  rval  <  64))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    if  (!(lval  <  0  ||  rval  <  64))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
197	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  left  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  left  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  left  <=  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	62	None	replace
198	[BUG]  [BUGGY]  if  (!(left  >=  0  &&  lval  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(left  >=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(left  >=  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	62	None	replace
199	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >>  0  &&  left  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  left  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	62	None	replace
200	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  left  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval!=  0  &&  left  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	62	None	replace
201	[BUG]  [BUGGY]  if(rval  <  0)  {  if(!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(rval  <  0)  {  if(!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(rval  <  0)  {  if(!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	61	None	replace
202	[BUG]  [BUGGY]  if(lval  <=  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  32)  {  if  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	61	None	replace
203	[BUG]  [BUGGY]  (!(lval  <  0  ||  rval  <  32))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	(!(lval  <  0  ||  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
205	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
207	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
209	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
211	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  rval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  32  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <=  32  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
213	[BUG]  [BUGGY]  if  (!(lval  <=  32  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  32  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <=  32  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
214	[BUG]  [BUGGY]  if  (!(right  <  0  &&  lval  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(right  <  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(right  <  0  &&  lval  <  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
215	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  right  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  right  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  right  <=  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	25	None	replace
216	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <=  0  &&  right  <  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
217	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  ||  right  <  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
218	[BUG]  [BUGGY]  if  (!(n  <  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(n  <  0  &&  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(n  <  0  &&  right  <  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
219	[BUG]  [BUGGY]  if(lval  <=  0  ||  right  <  32)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  right  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  ||  right  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	27	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  >=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  0  ||  rval  >=  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
221	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  >=  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  >=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  ||  rval  >=  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  0  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
223	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  >  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  0  ||  rval  >  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
225	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  >  32)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  >  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  ||  rval  >  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(rval  <=  0  ||  lval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(rval  <=  0  ||  lval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
227	[BUG]  [BUGGY]  if(rval  <=  0  ||  lval  <  32)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(rval  <=  0  ||  lval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(rval  <=  0  ||  lval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
228	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  right.getNext();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
229	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
230	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.getParent();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
232	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
234	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
236	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
238	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
240	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  lval  <=  32)||(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	1	replace
241	[BUG]  [BUGGY]  If(!(lval  >  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If(!(lval  >  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    If(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
242	[BUG]  [BUGGY]  If(!(lval  >  0  &&  rval  <  0))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If(!(lval  >  0  &&  rval  <  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If(!(lval  >  0  &&  rval  <  0))  {	  if(!(lval    >    0    &&    rval    <    32))    {    If(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
243	[BUG]  [BUGGY]  If(!(lval  >  0  &&  rval  <=  0))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If(!(lval  >  0  &&  rval  <=  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If(!(lval  >  0  &&  rval  <=  0))  {	  if(!(lval    >    0    &&    rval    <    32))    {    If(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	35	None	replace
244	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
245	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  lval  +  1);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  lval  +  1);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
246	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  right);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  right);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
247	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lval);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  lval);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  lval);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
248	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  n);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  n);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  lval  <=  32))  {	  if(!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	31	2	replace
250	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  lval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  lval  <=  32))  {	  if(!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	31	2	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  ||  rval  <  32))  {	  if(!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
252	[BUG]  [BUGGY]  if(!(lval  ==  0  ||  rval  <  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  ||  rval  <  32))  {	  if(!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	31	1	replace
253	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  >=  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  >=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    lval    <    32))    {    if  (!(lval  >=  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
255	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  >>  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  >>  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    lval    <    32))    {    if  (!(lval  >>  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
256	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval!=  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval!=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    lval    <    32))    {    if  (!(lval!=  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
257	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  ==  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  if  (!(lval  ==  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    lval    <    32))    {    if  (!(lval  ==  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
258	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  If  (!(lval  >=  0  &&  lval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <  32))  {  If  (!(lval  >=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    0    &&    lval    <    32))    {    If  (!(lval  >=  0  &&  lval  <  32))  {	  	non-compiled	[CE]  ';'  expected	73	None	add
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  >=  0  &&  lval  <=  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
260	[BUG]  [BUGGY]  if  (!(lval  >=  0  &&  lval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >=  0  &&  lval  <=  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
262	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	1	replace
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  ==  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
264	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  lval  <  32))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  ==  0  &&  lval  <  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	74	2	replace
265	[BUG]  [BUGGY]  for(!(lval  >  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  >  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
266	[BUG]  [BUGGY]  for(!(lval  >  0  &&  rval  <=  32))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  >  0  &&  rval  <=  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
267	[BUG]  [BUGGY]  for(!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  <  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
268	[BUG]  [BUGGY]  For(!(lval  >  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  For(!(lval  >  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	For(!(lval  >  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	58	None	replace
269	[BUG]  [BUGGY]  for(!(lval  <=  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  <=  0  &&  rval  <  32))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
270	[BUG]  [BUGGY]  for(!(lval  >  0  &&  rval  <  16))  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  >  0  &&  rval  <  16))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  >  0  &&  rval  <  16))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
271	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  right  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  right  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval!=  0  &&  right  <=  32))  {	  if    (!(lval!=    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	39	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  32)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
273	[BUG]  [BUGGY]  if(lval  <=  32)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  32)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
274	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval  ==  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
275	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  >=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  >=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval  >=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
276	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  >>  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  >>  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval  >>  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
277	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval!=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval!=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval!=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
278	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  If(!(lval  ==  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  If(!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    If(!(lval  ==  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
279	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  ==  0  &&  rval  <  31))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  ==  0  &&  rval  <  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval  ==  0  &&  rval  <  31))  {	  	non-compiled	[CE]  ';'  expected	30	None	add
280	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <=    32))    {    if  (!(lval  <  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
281	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  If  (!(lval  <  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  If  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <=    32))    {    If  (!(lval  <  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
282	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <=  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <=  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <=    32))    {    if  (!(lval  <  0  &&  rval  <=  31))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
283	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <=    32))    {    if  (!(lval  <  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <=  0  &&  lval  <  32))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
285	[BUG]  [BUGGY]  if(!(lval  <=  0  &&  lval  <  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <=  0  &&  lval  <  32))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	1	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
287	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
288	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!(lval  <  0  &&  lval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!(lval  <  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    lval    <=    32))    {    if  (!(lval  <  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
289	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  If  (!(lval  <  0  &&  lval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  If  (!(lval  <  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    lval    <=    32))    {    If  (!(lval  <  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
290	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!(lval  <  0  &&  lval  <=  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!(lval  <  0  &&  lval  <=  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    lval    <=    32))    {    if  (!(lval  <  0  &&  lval  <=  31))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
291	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  ((lval  <  0  &&  lval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  ((lval  <  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    lval    <=    32))    {    if  ((lval  <  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	66	None	add
292	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '<='  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  right  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<='	78	None	replace
293	[BUG]  [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	78	None	replace
294	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  if(!(lval  >  0  &&  lval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  if(!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <=    32))    {    if(!(lval  >  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	32	None	add
295	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  If(!(lval  >  0  &&  lval  <=  32))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  If(!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <=    32))    {    If(!(lval  >  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	32	None	add
296	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  if(!(lval  >  0  &&  lval  <=  31))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  if(!(lval  >  0  &&  lval  <=  31))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <=    32))    {    if(!(lval  >  0  &&  lval  <=  31))  {	  	non-compiled	[CE]  ';'  expected	32	None	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
298	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <=  0  &&  lval  <=  32))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
300	[BUG]  [BUGGY]  if(!(lval  <=  0  &&  lval  <=  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <=  0  &&  lval  <=  32))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	1	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
302	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <=  32)||(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
304	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
306	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	2	replace
307	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &  SHIFT_AMOUNT_OUT_OF_RANGE;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  left.getNext()  &  SHIFT_AMOUNT_OUT_OF_RANGE;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.getNext()  &  SHIFT_AMOUNT_OUT_OF_RANGE;	  Node    right    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
309	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
311	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <=  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
312	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  right!=  Integer.MAX_VALUE)  {  [CE]  incomparable  types:  Node  and  int  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  right!=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  Integer.MIN_VALUE  &&  right!=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	18	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  ==  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
314	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  ==  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  lval  ==  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    [Delete]    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	18	2	replace
315	[BUG]  [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  (!(lval  <=  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <=  0  &&  rval  <  32))  {  (!(lval  <=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <=    0    &&    rval    <    32))    {    (!(lval  <=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  not  a  statement	19	None	add
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
317	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	1	replace
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <=  0))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
319	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <=  0))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <=  0))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  &&  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  0  &&  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
321	[BUG]  [BUGGY]  if(lval  <=  0  &&  rval  <  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  &&  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  &&  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  ==  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  0  ||  rval  ==  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
323	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  ==  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  ==  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  0  ||  rval  ==  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
324	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
325	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!lval  <  0  &&  lval  <=  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  lval  <=  32))  {  if  (!lval  <  0  &&  lval  <=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    lval    <=    32))    {    if  (!lval  <  0  &&  lval  <=  32)  {	  	non-compiled	[CE]  ';'  expected	66	None	add
326	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLastChild().getString());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  left.getLastChild().getString());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
327	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getLength());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getLength());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getLength());	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
328	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  If  (!(lval!=  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <  32))  {  If  (!(lval!=  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <    32))    {    If  (!(lval!=  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ';'  expected	41	None	add
329	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLowerCase());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLowerCase());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  left.getLowerCase());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerCase());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
331	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(right!=  null)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(right!=  null)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
333	[BUG]  [BUGGY]  if(right!=  null)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(right!=  null)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(right!=  null)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	2	replace
334	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  right.doubleValue());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  right.doubleValue());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  right.doubleValue());	  Math.max(MAX_FOLD_NUMBER,    right.doubleValue());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
335	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  right);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  left.replaceChild(n,  right);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  left.replaceChild(n,  right);	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
336	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  AssertionFailedError  <=  0  ||  rval  <  32)  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  AssertionFailedError  <=  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    AssertionFailedError  <=  0  ||  rval  <  32)  {	  	non-compiled	[CE]  not  a  statement	26	None	add
337	[BUG]  [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  int  lval  =  0  ||  rval  <  32)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  0  ||  rval  <  32)  {  int  lval  =  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval    <=    0    ||    rval    <    32)    {    int  lval  =  0  ||  rval  <  32)  {	  	non-compiled	[CE]  ';'  expected	26	None	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    >>    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
339	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    >>    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	7	2	replace
340	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  (!(lval  <  0  &&  rval  <=  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  rval  <=  32))  {  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    &&    rval    <=    32))    {    (!(lval  <  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  not  a  statement	21	None	add
341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
342	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
344	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  >=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
345	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  for(!(lval  >  0  &&  lval  <  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32))  {  for(!(lval  >  0  &&  lval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <    32))    {    for(!(lval  >  0  &&  lval  <  32))  {	  	non-compiled	[CE]  not  a  statement	59	None	add
346	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  right  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >>  0  &&  right  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  right  <=  32))  {	  if    (!(lval    >=    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	38	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
348	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
349	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
350	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
351	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  {  0  &&  rval  <  32))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32))  {  if(!(lval  {  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    ==    0    &&    rval    <    32))    {    if(!(lval  {  0  &&  rval  <  32))  {	  	non-compiled	[CE]  ')'  expected	30	None	add
352	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLowerBound());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left.getLowerBound());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  left.getLowerBound());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
353	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  right  >  32))  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  right  >  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  right  >  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	25	None	replace
354	[BUG]  [BUGGY]  if  (!(right  <  0  &&  right  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(right  <  0  &&  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(right  <  0  &&  right  <  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
355	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!lval  <  0  ||  rval  <  32)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  if  (!lval  <  0  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    if  (!lval  <  0  ||  rval  <  32)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
356	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
357	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
358	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  rval!=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
359	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
360	[BUG]  [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  If  (!(lval!=  0  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval!=  0  &&  rval  <=  32))  {  If  (!(lval!=  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval!=    0    &&    rval    <=    32))    {    If  (!(lval!=  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
361	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  lval  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >>  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  lval  <=  32))  {	  if    (!(lval    >=    0    &&    lval    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	74	None	replace
362	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  for(!(lval  >  0  &&  lval  <=  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  for(!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <=    32))    {    for(!(lval  >  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  not  a  statement	32	None	add
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  rval  <=  0))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
364	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  0))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  rval  <=  0))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	34	2	replace
365	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MIN_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MIN_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MIN_VALUE))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
366	[BUG]  [BUGGY]  for(!(lval  >  0  &&  rval  <  0))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  >  0  &&  rval  <  0))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  >  0  &&  rval  <  0))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
367	[BUG]  [BUGGY]  for(!(lval  >  0  &&  rval  <=  16))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  for(!(lval  >  0  &&  rval  <=  16))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	for(!(lval  >  0  &&  rval  <=  16))  {	  if(!(lval    >    0    &&    rval    <    32))    {    for(!(lval    >    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	58	None	replace
368	[BUG]  [BUGGY]  if  (!(lval  >>  0  &&  left  <=  32))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >>  0  &&  left  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >>  0  &&  left  <=  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	62	None	replace
369	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  left  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  left  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	62	None	replace
370	[BUG]  [BUGGY]  if  (!(left  >=  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(left  >=  0  &&  left  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(left  >=  0  &&  left  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	62	None	replace
371	[BUG]  [BUGGY]  Node  right  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  node.getNext();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  node.getNext();	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
372	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  for(!(lval  >  0  &&  rval  <=  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  for(!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <=    32))    {    for(!(lval  >  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  not  a  statement	28	None	add
373	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
374	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
375	[BUG]  [BUGGY]  if(lval  <  0)  {  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0)  {  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0)  {  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
376	[BUG]  [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  32))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
377	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  right);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  right);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  right);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
379	[BUG]  [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
381	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
383	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
384	[BUG]  [BUGGY]  If  (!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    If    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
385	[BUG]  [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    If    (!(rval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	17	None	replace
386	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  32))  {  if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    if(!(lval  >=  Integer.MAX_VALUE  &&  rval  <=  32))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  lval  >  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  0  ||  lval  >  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
388	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  lval  >  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  lval  >  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  ||  lval  >  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
389	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  newNumber);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.replaceChild(n,  newNumber);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.replaceChild(n,  newNumber);	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
390	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  newNumber);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.replaceChild(left,  newNumber);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.replaceChild(left,  newNumber);	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
392	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	12	2	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  32  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if  (!(lval  <  32  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
394	[BUG]  [BUGGY]  if  (!(lval  <  32  ||  rval  <  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  32  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  32  ||  rval  <  32))  {	  if    (!(lval    <    0    ||    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	24	1	replace
395	[BUG]  [BUGGY]  Node  right  =  right.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  right.getLastChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  right.getLastChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
397	[BUG]  [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
399	[BUG]  [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	2	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&!(rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  MAX_FOLD_NUMBER)&&!(rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
401	[BUG]  [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&!(rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  MAX_FOLD_NUMBER)&&!(rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  MAX_FOLD_NUMBER)&&!(rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	36	1	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
403	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >  MAX_FOLD_NUMBER  ||  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
404	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  32)&&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  32)&&  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
405	[BUG]  [BUGGY]  if(!(lval  >=  32)&&  rval  <=  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  32)&&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  32)&&  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
406	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  32)&&  rval  <=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  32)&&  rval  <=  32)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
407	[BUG]  [BUGGY]  if(!(lval  >=  32)&&  rval  <=  32)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  32)&&  rval  <=  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  32)&&  rval  <=  32)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	2	replace
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >  MAX_FOLD_NUMBER  ||  rval  ==  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
409	[BUG]  [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  ==  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >  MAX_FOLD_NUMBER  ||  rval  ==  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >  MAX_FOLD_NUMBER  ||  rval  ==  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval!=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
411	[BUG]  [BUGGY]  if(!(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  0  ||  rval  >  MAX_FOLD_NUMBER))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  rval)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  ==  rval)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
413	[BUG]  [BUGGY]  if(lval  ==  rval)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  rval)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  rval)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  rval)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >=  rval)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
415	[BUG]  [BUGGY]  if(lval  >=  rval)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  rval)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >=  rval)  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	54	1	replace
416	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
417	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	2	replace
418	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	1	replace
419	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  32))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	78	1	replace
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
421	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    >=    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	13	2	replace
422	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastMillis());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastMillis());  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastMillis());	  Math.max(MAX_FOLD_NUMBER,    left.getLowerBound());    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
423	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
424	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
425	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  <=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if(lval  <=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if(lval  <=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
426	[BUG]  [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  {  0  &&  rval  <=  32))  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  ==  0  &&  rval  <=  32))  {  if  (!(lval  {  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    ==    0    &&    rval    <=    32))    {    if  (!(lval  {  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  ')'  expected	11	None	add
427	[BUG]  [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.min(MAX_FOLD_NUMBER,  left);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.min(MAX_FOLD_NUMBER,  left);	  Math.max(MAX_FOLD_NUMBER,    lval);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  0  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
429	[BUG]  [BUGGY]  if(!(lval  >=  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  0  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    >>    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	50	2	replace
430	[BUG]  [BUGGY]  Node  right  =  n.getParent();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  n.getParent();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.getParent();	  Node    right    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
431	[BUG]  [BUGGY]  If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <=  MAX_FOLD_NUMBER)  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
432	[BUG]  [BUGGY]  If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >  MAX_FOLD_NUMBER)&&  rval  <  32)  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    If    (!(lval    >=    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	53	None	replace
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  32  ||  rval  >  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
434	[BUG]  [BUGGY]  if(lval  <  32  ||  rval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  32  ||  rval  >  MAX_FOLD_NUMBER)  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <  64))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >=  0  &&  rval  <  64))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
436	[BUG]  [BUGGY]  if(!(lval  >=  0  &&  rval  <  64))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  0  &&  rval  <  64))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >=  0  &&  rval  <  64))  {	  if(!(lval    >    0    &&    rval    <    32))    {    if(!(lval    >    0    &&    rval    <    64))    {    	compilable	  [FE]  AssertionFailedError  	37	2	replace
437	[BUG]  [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  MAX_FOLD_NUMBER);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Math.max(MAX_FOLD_NUMBER,  left.getLastChild().getString(),  MAX_FOLD_NUMBER);	  Math.max(MAX_FOLD_NUMBER,    left.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
438	[BUG]  [BUGGY]  if  (!(lval  >  0  &&  left  <  32))  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  >  0  &&  left  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  >  0  &&  left  <  32))  {	  if    (!(lval    >=    0    &&    left    <    32))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	62	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
440	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
441	[BUG]  [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  (!(lval  <  0  ||  rval  <  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  ||  rval  <  32))  {  (!(lval  <  0  ||  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if    (!(lval    <    0    ||    rval    <    32))    {    (!(lval  <  0  ||  rval  <  32))  {	  	non-compiled	[CE]  not  a  statement	23	None	add
442	[BUG]  [BUGGY]  if  (!(lval  <  0  &&  right!=  32))  {  [CE]  incomparable  types:  Node  and  int  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if  (!(lval  <  0  &&  right!=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if  (!(lval  <  0  &&  right!=  32))  {	  if    (!(lval    <    0    &&    right    <    32))    {    	non-compiled	[CE]  incomparable  types:  Node  and  int	25	None	replace
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
444	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  16))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  16))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
446	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  16))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  16))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <=  32)||!(lval  ==  0  &&  rval  <=  16))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    if    (!(lval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	9	2	replace
447	[BUG]  [BUGGY]  if(lval  <=  32)  {  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32)  {  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  32)  {  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
448	[BUG]  [BUGGY]  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	(!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
449	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER)  {  if  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	61	None	replace
450	[BUG]  [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  MAX_FOLD_NUMBER)  {  (!(lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
451	[BUG]  [BUGGY]  if(rval!=  null)  {  (!lval  <  0  &&  rval  <  32))  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(rval!=  null)  {  (!lval  <  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(rval!=  null)  {  (!lval  <  0  &&  rval  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  not  a  statement	61	None	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
453	[BUG]  [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
455	[BUG]  [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MIN_VALUE))  {	  if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	76	2	replace
456	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
457	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.replaceChild(left,  n);  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.replaceChild(left,  n);	  n    =    left.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  >  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  >  MAX_FOLD_NUMBER))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
459	[BUG]  [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  >  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  >  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  0  &&  rval  <  32)||!(lval  <  0  &&  rval  >  MAX_FOLD_NUMBER))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    if    (!(lval    <    0    &&    rval    <    31))    {    	compilable	  [FE]  AssertionFailedError  	56	2	replace
460	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  (!(lval  >  0  &&  lval  <=  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32))  {  (!(lval  >  0  &&  lval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    lval    <=    32))    {    (!(lval  >  0  &&  lval  <=  32))  {	  	non-compiled	[CE]  not  a  statement	32	None	add
461	[BUG]  [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  (!(lval  >  0  &&  rval  <=  32))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  rval  <=  32))  {  (!(lval  >  0  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >    0    &&    rval    <=    32))    {    (!(lval  >  0  &&  rval  <=  32))  {	  	non-compiled	[CE]  not  a  statement	28	None	add
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
463	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	60	2	replace
464	[BUG]  [BUGGY]  If  (!(lval  >=  32)&&  rval  <=  32))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  32)&&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  32)&&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
465	[BUG]  [BUGGY]  If  (!(lval  >=  16  &&  rval  <=  32))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  >=  16  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  >=  16  &&  rval  <=  32))  {	  if    (!(lval    >=    0    &&    rval    <=    32))    {    If    (!(lval    >=    0    &&    rval    <=    32))    {    	non-compiled	[CE]  ';'  expected	10	None	replace
466	[BUG]  [BUGGY]  If  (!(lval  <  0  &&  right  <  32))  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  If  (!(lval  <  0  &&  right  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	If  (!(lval  <  0  &&  right  <  32))  {	  if    (!(lval    <    0    &&    rval    <    32))    {    If    (!(lval    <    0    &&    rval    <    32))    {    	non-compiled	[CE]  ';'  expected	55	None	replace
467	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
468	[BUG]  [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.RETURN;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  n  =  left.getNext()  ||  right.getType()  ==  Token.RETURN;  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	n  =  left.getNext()  ||  right.getType()  ==  Token.RETURN;	  n    =    left.getNext();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
469	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval    >=    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	75	None	add
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  32  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
471	[BUG]  [BUGGY]  if(lval  <=  32  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  32  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  32  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  32  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
473	[BUG]  [BUGGY]  if(lval  <  32  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  32  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
474	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  16  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  16  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
475	[BUG]  [BUGGY]  if(lval  <=  16  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  16  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  16  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  3  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <=  3  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
477	[BUG]  [BUGGY]  if(lval  <=  3  ||  rval  <  32)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <=  3  ||  rval  <  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <=  3  ||  rval  <  32)  {	  if(lval    <=    0    ||    rval    <    32)    {    	compilable	  [FE]  AssertionFailedError  	27	2	replace
478	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <=  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
479	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <=  32)||!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
480	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
481	[BUG]  [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  >  0  &&  lval  <=  32)||(lval  >=  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	33	2	replace
482	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
483	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32)||!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  0  &&  rval  <  32)||!(lval  ==  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
485	[BUG]  [BUGGY]  if(!(lval  ==  0  &&  rval  <  32)||!(lval  ==  0  &&  rval  <  32))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  0  &&  rval  <  32)||!(lval  ==  0  &&  rval  <  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  0  &&  rval  <  32)||!(lval  ==  0  &&  rval  <  32))  {	  if    (!(lval    >=    0    &&    rval    <    32))    {    if    (!(lval    ==    0    &&    rval    <    32))    {    	compilable	  [FE]  AssertionFailedError  	52	2	replace
486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  32  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  <  32  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
487	[BUG]  [BUGGY]  if(!(lval  <  32  &&  rval  <=  32))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  <  32  &&  rval  <=  32))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  <  32  &&  rval  <=  32))  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  >  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  32  ||  rval  >  32)  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
489	[BUG]  [BUGGY]  if(lval  <  32  ||  rval  >  32)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  rval  >  32)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  32  ||  rval  >  32)  {	  if    (!(lval    <    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	22	2	replace
490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  <  32  ||  lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
491	[BUG]  [BUGGY]  if(lval  <  32  ||  lval  >  MAX_FOLD_NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  <  32  ||  lval  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  <  32  ||  lval  >  MAX_FOLD_NUMBER)  {	  if    (!(lval    <    0    &&    lval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	67	2	replace
492	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(lval  ==  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
493	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(lval  ==  Integer.MIN_VALUE  ||  lval  ==  Integer.MAX_VALUE)  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	1	replace
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
495	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]        if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }        [BUGGY]  if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]      error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	if(!(lval  ==  Integer.MAX_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if    (!(rval    >=    0    &&    rval    <=    32))    {    if    (!(rval    ==    0    &&    rval    <=    32))    {    	compilable	  [FE]  AssertionFailedError  	16	2	replace
