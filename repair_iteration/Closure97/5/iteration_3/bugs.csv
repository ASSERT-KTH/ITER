bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  lval  =  left.getUpperBound()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getUpperBound()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getUpperBound()  +  1;	  double    lval    =    left.getUpperBound();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  Double  lval  =  right.getUpperBound();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getUpperBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getUpperBound();	  double    lval    =    left.getUpperBound();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  double  lval  =  right,  left.getUpperBound();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getUpperBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getUpperBound();	  double    lval    =    left.getUpperBound();    	non-compiled	[CE]  ';'  expected	15	None	replace
4	[BUG]  [BUGGY]  double  lval  =  right.getLowerBound()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getLowerBound()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getLowerBound()  +  1;	  double    lval    =    left.getLowerBound()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
5	[BUG]  [BUGGY]  double  lval  =  left.getLowerBound()  /  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerBound()  /  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerBound()  /  1;	  double    lval    =    left.getLowerBound()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
6	[BUG]  [BUGGY]  double  lval  =  left.getLowerBound()  *  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerBound()  *  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerBound()  *  1;	  double    lval    =    left.getLowerBound()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
7	[BUG]  [BUGGY]  double  lval  =  left.getLowerBound()  +  2;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerBound()  +  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerBound()  +  2;	  double    lval    =    left.getLowerBound()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
8	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
9	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  n.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
10	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  left  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
11	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  left  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
12	[BUG]  [BUGGY]  Double  lval  =  left.getUpperBound();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getUpperBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getUpperBound();	  Double    lval    =    left.getLong();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
13	[BUG]  [BUGGY]  Double  lval  =  left.getInt();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getInt();	  Double    lval    =    left.getLong();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
14	[BUG]  [BUGGY]  double  lval  =  right.getInt()  +  1;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getInt()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getInt()  +  1;	  double    lval    =    right.getInt();    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
15	[BUG]  [BUGGY]  double  negNum  =  left.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  negNum  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  negNum  =  left.getDouble();	  double    negNum    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	1	None	replace
16	[BUG]  [BUGGY]  double  lvalNum  =  right.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lvalNum  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lvalNum  =  right.getDouble();	  double    negNum    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	1	None	replace
17	[BUG]  [BUGGY]  double  resultNum  =  right.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  resultNum  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  resultNum  =  right.getDouble();	  double    negNum    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	1	None	replace
18	[BUG]  [BUGGY]  double  lval  =  left.getUpperCase()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getUpperCase()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getUpperCase()  +  1;	  double    lval    =    left.getUpperCase();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
19	[BUG]  [BUGGY]  Double  lval  =  right.getUpperCase();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getUpperCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getUpperCase();	  double    lval    =    left.getUpperCase();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
20	[BUG]  [BUGGY]  double  lval  =  right,  left.getUpperCase();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getUpperCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getUpperCase();	  double    lval    =    left.getUpperCase();    	non-compiled	[CE]  ';'  expected	22	None	replace
21	[BUG]  [BUGGY]  long  lval  =  right.getDouble();  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    long    lval    =    right.getDouble();    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
22	[BUG]  [BUGGY]  int  lval  =  right.getDouble();  [CE]  possible  loss  of  precision  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    long    lval    =    right.getDouble();    	non-compiled	[CE]  possible  loss  of  precision	9	None	replace
23	[BUG]  [BUGGY]  Integer  lval  =  right.getDouble();  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Integer  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Integer  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    long    lval    =    right.getDouble();    	non-compiled	[CE]  incompatible  types	9	None	replace
24	[BUG]  [BUGGY]  double  result  =  right.getDouble()  -  1;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  -  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  -  1;	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
25	[BUG]  [BUGGY]  double  result  =  right.getDouble()  /  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  /  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  /  MAX_FOLD_NUMBER;	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
26	[BUG]  [BUGGY]  double  result  =  right.getDouble()  +  1;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  +  1;	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
27	[BUG]  [BUGGY]  double  result  =  right.getDouble()  -  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  -  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  -  MAX_FOLD_NUMBER;	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
28	[BUG]  [BUGGY]  Double  lval  =  right.getLowerBound()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getLowerBound()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getLowerBound()  +  1;	  Double    lval    =    right.getLowerBound();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
29	[BUG]  [BUGGY]  Double  lval  =  node.getLowerBound();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  node.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  node.getLowerBound();	  Double    lval    =    right.getLowerBound();    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
30	[BUG]  [BUGGY]  double  result  =  left.getDouble()  +  1;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  left.getDouble()  +  1;	  double    result    =    left.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	45	None	replace
31	[BUG]  [BUGGY]  double  result  =  left.getDouble()  -  1;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  left.getDouble()  -  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  left.getDouble()  -  1;	  double    result    =    left.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	45	None	replace
32	[BUG]  [BUGGY]  double  result  =  left.getDouble()  /  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  left.getDouble()  /  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  left.getDouble()  /  MAX_FOLD_NUMBER;	  double    result    =    left.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	45	None	replace
33	[BUG]  [BUGGY]  double  result  =  left.getDouble()  -  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  left.getDouble()  -  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  left.getDouble()  -  MAX_FOLD_NUMBER;	  double    result    =    left.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	45	None	replace
34	[BUG]  [BUGGY]  long  lval  =  left.getDouble();  [CE]  possible  loss  of  precision  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
35	[BUG]  [BUGGY]  long  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
36	[BUG]  [BUGGY]  int  lval  =  left.getDouble()  +  1;  long  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                      ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble()  +  1;  long  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble()  +  1;  long  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
37	[BUG]  [BUGGY]  int  lval  =  left.getDouble();  long  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                        ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble();  long  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble();  long  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
38	[BUG]  [BUGGY]  int  lval  =  left.getDouble()  +  1;  int  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble()  +  1;  int  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble()  +  1;  int  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
39	[BUG]  [BUGGY]  double  lval  =  left.getInt()  *  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getInt()  *  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getInt()  *  1;	  double    lval    =    left.getInt()    +    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
40	[BUG]  [BUGGY]  double  lval  =  left.getInt()  /  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getInt()  /  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getInt()  /  1;	  double    lval    =    left.getInt()    +    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
41	[BUG]  [BUGGY]  Double  lval  =  left.getDouble()  +  1;  [CE]  inconvertible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    Double    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  inconvertible  types	26	None	replace
42	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  Double  lval  =  left.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  Double  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  Double  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    Double    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	26	None	replace
43	[BUG]  [BUGGY]  long  lval  =  left.getDouble();  Double  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble();  Double  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble();  Double  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    Double    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
44	[BUG]  [BUGGY]  long  lval  =  left.getDouble();  Double  lval  =  left.getDouble();  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble();  Double  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble();  Double  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    Double    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
45	[BUG]  [BUGGY]  double  lval  =  right.getLowerCase()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getLowerCase()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getLowerCase()  +  1;	  double    lval    =    right.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
46	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  int  lval  =  right.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  int  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  int  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    int    lval    =    right.getDouble();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	replace
47	[BUG]  [BUGGY]  int  lval  =  left.getDouble();  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble();	  double    lval    =    right.getDouble();    int    lval    =    right.getDouble();    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
48	[BUG]  [BUGGY]  Integer  lval  =  right.getInt();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Integer  lval  =  right.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Integer  lval  =  right.getInt();	  double    lval    =    right.getDouble();    int    lval    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
49	[BUG]  [BUGGY]  Double  lval  =  left.getDouble()  -  1;  [CE]  inconvertible  types  [FE]        ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble()  -  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble()  -  1;	  Double    lval    =    left.getDouble();    	non-compiled	[CE]  inconvertible  types	35	None	replace
50	[BUG]  [BUGGY]  Double  lval  =  left.getDouble()  *  result;  [CE]  inconvertible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble()  *  result;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble()  *  result;	  Double    lval    =    left.getDouble();    	non-compiled	[CE]  inconvertible  types	35	None	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	double  lval  =  left.getDouble();  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	compilable	  [FE]  ComparisonFailure  	10	2	replace
52	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  lval  =  right.getDouble();  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	compilable	  [FE]  ComparisonFailure  	10	2	replace
53	[BUG]  [BUGGY]  lval  =  right.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	lval  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	10	None	replace
54	[BUG]  [BUGGY]  Double  lval  =  left.getLowerBound()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getLowerBound()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getLowerBound()  +  1;	  Double    lval    =    left.getLowerBound();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
55	[BUG]  [BUGGY]  Double  lval  =  left.getUpperCase();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getUpperCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getUpperCase();	  Double    lval    =    left.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
56	[BUG]  [BUGGY]  Double  lval  =  left.getLowerCase()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getLowerCase()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getLowerCase()  +  1;	  Double    lval    =    left.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
57	[BUG]  [BUGGY]  Double  lval  =  right,  left.getLowerCase();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right,  left.getLowerCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right,  left.getLowerCase();	  Double    lval    =    left.getLowerCase();    	non-compiled	[CE]  ';'  expected	36	None	replace
58	[BUG]  [BUGGY]  double  lval  =  left,  right.getDouble();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getDouble();	  double    lval    =    left,    right.getInt();    	non-compiled	[CE]  ';'  expected	39	None	replace
59	[BUG]  [BUGGY]  double  lval  =  right,  left.getInt();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getInt();	  double    lval    =    left,    right.getInt();    	non-compiled	[CE]  ';'  expected	39	None	replace
60	[BUG]  [BUGGY]  Double  lval  =  left.getNumber()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getNumber()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getNumber()  +  1;	  Double    lval    =    left.getNumber();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
61	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  double  lval  =  right.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  double  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  double  lval  =  right.getDouble();	  double    lval    =    left.getDouble()    +    1;    double    lval    =    right.getDouble()    +    1;    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	29	None	replace
62	[BUG]  [BUGGY]  Double  lval  =  left.getDouble();  double  lval  =  right.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble();  double  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble();  double  lval  =  right.getDouble();	  double    lval    =    left.getDouble()    +    1;    double    lval    =    right.getDouble()    +    1;    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	29	None	replace
63	[BUG]  [BUGGY]  long  lval  =  left.getDouble();  long  lval  =  right.getDouble();  [CE]  possible  loss  of  precision  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble();  long  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble();  long  lval  =  right.getDouble();	  double    lval    =    left.getDouble()    +    1;    double    lval    =    right.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
64	[BUG]  [BUGGY]  Double  lval  =  right.getLowerCase()  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getLowerCase()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getLowerCase()  +  1;	  Double    lval    =    right.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
65	[BUG]  [BUGGY]  Double  lval  =  node.getLowerCase();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  node.getLowerCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  node.getLowerCase();	  Double    lval    =    right.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol  node	23	None	replace
66	[BUG]  [BUGGY]  double  lval  =  right.getNumber()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getNumber()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getNumber()  +  1;	  double    lval    =    left.getNumber()    +    1;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
67	[BUG]  [BUGGY]  double  lval  =  left.getNumber()  /  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getNumber()  /  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getNumber()  /  1;	  double    lval    =    left.getNumber()    +    1;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
68	[BUG]  [BUGGY]  double  lval  =  left.getNumber()  *  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getNumber()  *  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getNumber()  *  1;	  double    lval    =    left.getNumber()    +    1;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
69	[BUG]  [BUGGY]  double  lval  =  left.getNumber()  +  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getNumber()  +  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getNumber()  +  2;	  double    lval    =    left.getNumber()    +    1;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
70	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  double  lval  =  right.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  double  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    double  lval  =  right.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
71	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  Double  lval  =  right.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  Double  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    Double  lval  =  right.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
72	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  int  lval  =  right.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  int  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    int  lval  =  right.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
73	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  lval  =  right.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    lval  =  right.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
74	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  double  lval  =  left.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  double  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    double  lval  =  left.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
75	[BUG]  [BUGGY]  double  lval  =  right.getDouble()  +  1;  long  lval  =  right.getDouble()  +  1;  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure    [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getDouble()  +  1;  long  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double    lval    =    right.getDouble()    +    1;    long  lval  =  right.getDouble()  +  1;	  	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	31	None	add
76	[BUG]  [BUGGY]  Double  lval  =  node.getInt();  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  node.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  node.getInt();	  Double    lval    =    right.getInt();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
77	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  int  lval  =  left.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  int  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  int  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    int    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	27	None	replace
78	[BUG]  [BUGGY]  Integer  lval  =  left.getDouble();  int  lval  =  left.getDouble();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Integer  lval  =  left.getDouble();  int  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Integer  lval  =  left.getDouble();  int  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    int    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  incompatible  types	27	None	replace
79	[BUG]  [BUGGY]  int  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    int    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
80	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  Double  lval  =  right.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  Double  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  Double  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    Double    lval    =    right.getDouble();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
81	[BUG]  [BUGGY]  Double  lval  =  right.getDouble()  +  1;  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getDouble()  +  1;	  Double    lval    =    right.getDouble();    	non-compiled	[CE]  inconvertible  types	2	None	replace
82	[BUG]  [BUGGY]  Double  lval  =  right.getNumber()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right.getNumber()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right.getNumber()  +  1;	  Double    lval    =    right.getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
83	[BUG]  [BUGGY]  Double  lval  =  node.getNumber();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  node.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  node.getNumber();	  Double    lval    =    right.getNumber();    	non-compiled	[CE]  cannot  find  symbol  node	13	None	replace
84	[BUG]  [BUGGY]  result  =  left.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  result  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	result  =  left.getDouble();	  result    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	4	None	replace
85	[BUG]  [BUGGY]  result  =  n.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  result  =  n.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	result  =  n.getDouble();	  result    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	4	None	replace
86	[BUG]  [BUGGY]  result  -=  right.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  result  -=  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	result  -=  right.getDouble();	  result    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	4	None	replace
87	[BUG]  [BUGGY]  result  =  right.getDouble()  -  1;  [CE]  cannot  find  symbol  lval  [FE]                                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  result  =  right.getDouble()  -  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	result  =  right.getDouble()  -  1;	  result    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	4	None	replace
88	[BUG]  [BUGGY]  lval  =  left.getDouble();  [CE]  cannot  find  symbol  lval  [FE]            ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	lval  =  left.getDouble();	  double    lval    =    right.getDouble();    double    lval    =    left.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	7	None	replace
89	[BUG]  [BUGGY]  n  =  left.getDouble();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  n  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	n  =  left.getDouble();	  double    lval    =    right.getDouble();    double    lval    =    left.getDouble();    	non-compiled	[CE]  incompatible  types	7	None	replace
90	[BUG]  [BUGGY]  double  lval  =  right.getUpperBound()  +  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getUpperBound()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getUpperBound()  +  1;	  double    lval    =    right.getUpperBound();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	double  lval  =  left.getDouble();  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  AssertionFailedError  	28	1	replace
92	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble();  [FE]  AssertionFailedError  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  AssertionFailedError  	28	1	replace
93	[BUG]  [BUGGY]  Double  lval  =  left.getDouble();  lval  =  left.getDouble();  [CE]  inconvertible  types  [FE]                ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble();  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble();  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  inconvertible  types	28	None	replace
94	[BUG]  [BUGGY]  n  =  left.getDouble();  lval  =  left.getDouble();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  n  =  left.getDouble();  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	n  =  left.getDouble();  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  incompatible  types	28	None	replace
95	[BUG]  [BUGGY]  long  lval  =  left.getDouble()  +  1;  lval  =  left.getDouble()  +  1;  [CE]  possible  loss  of  precision  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  long  lval  =  left.getDouble()  +  1;  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	long  lval  =  left.getDouble()  +  1;  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
96	[BUG]  [BUGGY]  double  lval  =  right.getUpperCase()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getUpperCase()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getUpperCase()  +  1;	  double    lval    =    right.getUpperCase();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
97	[BUG]  [BUGGY]  double  lval  =  left.getLowerCase()  /  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerCase()  /  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerCase()  /  1;	  double    lval    =    left.getLowerCase()    +    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
98	[BUG]  [BUGGY]  double  lval  =  left.getLowerCase()  *  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerCase()  *  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerCase()  *  1;	  double    lval    =    left.getLowerCase()    +    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
99	[BUG]  [BUGGY]  double  lval  =  left.getLowerCase()  +  2;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getLowerCase()  +  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getLowerCase()  +  2;	  double    lval    =    left.getLowerCase()    +    1;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
100	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
101	[BUG]  [BUGGY]  Node  right  =  left.getNext()  +  1;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  left.getNext()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  left.getNext()  +  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
102	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
103	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  2;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  left.getNext()  -  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  left.getNext()  -  2;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
104	[BUG]  [BUGGY]  double  lval  =  right.getLocal();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right.getLocal();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right.getLocal();	  double    lval    =    right.getNumber();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
105	[BUG]  [BUGGY]  Double  lval  =  left,  right.getLong();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left,  right.getLong();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left,  right.getLong();	  Double    lval    =    left.getLong();    	non-compiled	[CE]  ';'  expected	43	None	replace
106	[BUG]  [BUGGY]  Double  lval  =  left.getDouble();  int  lval  =  right.getDouble();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble();  int  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble();  int  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    int    lval    =    right.getDouble();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	8	None	replace
107	[BUG]  [BUGGY]  Double  val  =  left.getInt();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  val  =  left.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  val  =  left.getInt();	  Double    lval    =    right.getInt();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
108	[BUG]  [BUGGY]  double  lval  =  left,  right.getInt()  +  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getInt()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getInt()  +  1;	  double    lval    =    left.getInt()    +    1;    	non-compiled	[CE]  ';'  expected	34	None	replace
109	[BUG]  [BUGGY]  double  lval  =  left.getInt()  +  2;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getInt()  +  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getInt()  +  2;	  double    lval    =    left.getInt()    +    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
110	[BUG]  [BUGGY]  double  result  =  right.getNumber();  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getNumber();	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
111	[BUG]  [BUGGY]  double  result  =  right.getDouble()  +  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  +  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  +  MAX_FOLD_NUMBER;	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
112	[BUG]  [BUGGY]  result  =  right.getNumber();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  result  =  right.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	result  =  right.getNumber();	  result    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
113	[BUG]  [BUGGY]  Double  lval  =  left.getDouble();  lval  =  right.getDouble();  [CE]  inconvertible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble();  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble();  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	non-compiled	[CE]  inconvertible  types	10	None	replace
114	[BUG]  [BUGGY]  lval  =  left.getDouble();  lval  =  right.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                    ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  lval  =  left.getDouble();  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	lval  =  left.getDouble();  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	10	None	replace
115	[BUG]  [BUGGY]  int  lval  =  left.getDouble();  Double  lval  =  right.getDouble();  [CE]  possible  loss  of  precision  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble();  Double  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble();  Double  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    Double    lval    =    right.getDouble();    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
116	[BUG]  [BUGGY]  int  lval  =  right.getDouble();  Double  lval  =  right.getDouble();  [CE]  possible  loss  of  precision  [FE]            ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  right.getDouble();  Double  lval  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  right.getDouble();  Double  lval  =  right.getDouble();	  double    lval    =    right.getDouble();    Double    lval    =    right.getDouble();    	non-compiled	[CE]  possible  loss  of  precision	6	None	replace
117	[BUG]  [BUGGY]  double  lval  =  left,  right.getLong();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getLong();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getLong();	  double    lval    =    left,    right.getInt();    	non-compiled	[CE]  ';'  expected	39	None	replace
118	[BUG]  [BUGGY]  double  lval  =  left,  right.getNumber();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getNumber();	  double    lval    =    left,    right.getInt();    	non-compiled	[CE]  ';'  expected	39	None	replace
119	[BUG]  [BUGGY]  int  lval  =  left.getDouble();  lval  =  left.getDouble();  [CE]  possible  loss  of  precision  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble();  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble();  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	28	None	replace
120	[BUG]  [BUGGY]  Double  lval  =  left,  right.getLowerBound();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left,  right.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left,  right.getLowerBound();	  Double    lval    =    left.getLowerBound();    	non-compiled	[CE]  ';'  expected	38	None	replace
121	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  left  =  left.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
122	[BUG]  [BUGGY]  Double  val  =  left.getLowerBound();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  val  =  left.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  val  =  left.getLowerBound();	  Double    lval    =    right.getLowerBound();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
123	[BUG]  [BUGGY]  Double  val  =  right.getLowerBound();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  val  =  right.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  val  =  right.getLowerBound();	  Double    lval    =    right.getLowerBound();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
124	[BUG]  [BUGGY]  Double  val  =  left.getNumber();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  val  =  left.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  val  =  left.getNumber();	  Double    lval    =    right.getNumber();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
125	[BUG]  [BUGGY]  Double  lval  =  left.getLowerCase(right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getLowerCase(right);  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getLowerCase(right);	  Double    lval    =    left.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
126	[BUG]  [BUGGY]  Double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [CE]  inconvertible  types  [FE]        ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble()  +  MAX_FOLD_NUMBER;	  Double    lval    =    left.getDouble();    	non-compiled	[CE]  inconvertible  types	35	None	replace
127	[BUG]  [BUGGY]  Double  lval  =  left.getDouble()  +  2;  [CE]  inconvertible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left.getDouble()  +  2;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left.getDouble()  +  2;	  Double    lval    =    left.getDouble();    	non-compiled	[CE]  inconvertible  types	35	None	replace
128	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  left  =  left.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
129	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
130	[BUG]  [BUGGY]  Double  val  =  left.getLong();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  val  =  left.getLong();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  val  =  left.getLong();	  Double    lval    =    right.getLong();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
131	[BUG]  [BUGGY]  double  result  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  left.getDouble()  +  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  left.getDouble()  +  MAX_FOLD_NUMBER;	  double    result    =    left.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	45	None	replace
132	[BUG]  [BUGGY]  int  lval  =  left.getDouble();  long  lval  =  left.getDouble();  [CE]  possible  loss  of  precision  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  int  lval  =  left.getDouble();  long  lval  =  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	int  lval  =  left.getDouble();  long  lval  =  left.getDouble();	  double    lval    =    left.getDouble()    +    1;    long    lval    =    left.getDouble()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	30	None	replace
133	[BUG]  [BUGGY]  Double  lval  =  right,  left.getInt();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right,  left.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right,  left.getInt();	  Double    lval    =    right.getInt();    	non-compiled	[CE]  ';'  expected	40	None	replace
134	[BUG]  [BUGGY]  Double  lval  =  left,  right.getInt();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left,  right.getInt();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left,  right.getInt();	  Double    lval    =    right.getInt();    	non-compiled	[CE]  ';'  expected	40	None	replace
135	[BUG]  [BUGGY]  double  negNum  =  n.getDouble();  [CE]  cannot  find  symbol  lval  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  negNum  =  n.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  negNum  =  n.getDouble();	  double    negNum    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  lval	1	None	replace
136	[BUG]  [BUGGY]  Double  lval  =  left,  right.getLowerCase();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left,  right.getLowerCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left,  right.getLowerCase();	  Double    lval    =    left.getLowerCase();    	non-compiled	[CE]  ';'  expected	36	None	replace
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	double  lval  =  left.getDouble();  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  ComparisonFailure  	28	2	replace
138	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble()  +  1;  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  lval  =  left.getDouble()  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  lval  =  left.getDouble()  +  1;	  double    lval    =    left.getDouble()    +    1;    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  ComparisonFailure  	28	2	replace
139	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER;	  double    lval    =    left.getDouble()    +    1;    double    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	25	2	replace
140	[BUG]  [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER;  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER;	  double    lval    =    left.getDouble()    +    1;    double    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	25	2	replace
141	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER  +  1;	  double    lval    =    left.getDouble()    +    1;    double    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	25	2	replace
142	[BUG]  [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER  +  1;  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER  +  1;  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble()  *  MAX_FOLD_NUMBER  +  1;	  double    lval    =    left.getDouble()    +    1;    double    lval    =    left.getDouble()    +    1;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	25	2	replace
143	[BUG]  [BUGGY]  double  lval  =  right,  left.getLong();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getLong();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getLong();	  double    lval    =    right.getLong();    	non-compiled	[CE]  ';'  expected	19	None	replace
144	[BUG]  [BUGGY]  Node  right  =  right.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Node  right  =  right.getFirstChild();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Node  right  =  right.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	replace
145	[BUG]  [BUGGY]  Double  lval  =  left,  right.getNumber();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  left,  right.getNumber();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  left,  right.getNumber();	  Double    lval    =    left.getNumber();    	non-compiled	[CE]  ';'  expected	41	None	replace
146	[BUG]  [BUGGY]  Double  lval  =  right,  left.getLong();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right,  left.getLong();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right,  left.getLong();	  Double    lval    =    right.getLong();    	non-compiled	[CE]  ';'  expected	42	None	replace
147	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  resultDouble  =  right.getDouble();  [CE]  cannot  find  symbol  resultDouble  [FE]                  ComparisonFailure      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left.getDouble();  resultDouble  =  right.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left.getDouble();  resultDouble  =  right.getDouble();	  double    lval    =    right.getDouble();    lval    =    right.getDouble();    	non-compiled	[CE]  cannot  find  symbol  resultDouble	10	None	replace
148	[BUG]  [BUGGY]  double  result  =  right.getDouble()  -  left.getDouble();  [CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  result  =  right.getDouble()  -  left.getDouble();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  result  =  right.getDouble()  -  left.getDouble();	  double    result    =    right.getDouble();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	44	None	replace
149	[BUG]  [BUGGY]  double  lval  =  right,  left.getLowerCase();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getLowerCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getLowerCase();	  double    lval    =    right.getLowerCase();    	non-compiled	[CE]  ';'  expected	20	None	replace
150	[BUG]  [BUGGY]  double  lval  =  left,  right.getLowerCase();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getLowerCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getLowerCase();	  double    lval    =    right.getLowerCase();    	non-compiled	[CE]  ';'  expected	20	None	replace
151	[BUG]  [BUGGY]  double  lval  =  left,  right.getUpperBound();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getUpperBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getUpperBound();	  double    lval    =    right.getUpperBound();    	non-compiled	[CE]  ';'  expected	18	None	replace
152	[BUG]  [BUGGY]  double  lval  =  left,  right.getUpperCase();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getUpperCase();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getUpperCase();	  double    lval    =    right.getUpperCase();    	non-compiled	[CE]  ';'  expected	24	None	replace
153	[BUG]  [BUGGY]  double  lval  =  right,  left.getLowerBound();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  right,  left.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  right,  left.getLowerBound();	  double    lval    =    right.getLowerBound();    	non-compiled	[CE]  ';'  expected	14	None	replace
154	[BUG]  [BUGGY]  double  lval  =  left,  right.getLowerBound();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  double  lval  =  left,  right.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	double  lval  =  left,  right.getLowerBound();	  double    lval    =    right.getLowerBound();    	non-compiled	[CE]  ';'  expected	14	None	replace
155	[BUG]  [BUGGY]  Double  lval  =  right,  left.getLowerBound();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;      [BUGGY]  Double  lval  =  right,  left.getLowerBound();  [BUGGY]      double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	Double  lval  =  right,  left.getLowerBound();	  Double    lval    =    right.getLowerBound();    	non-compiled	[CE]  ';'  expected	17	None	replace
