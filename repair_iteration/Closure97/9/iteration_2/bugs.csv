bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  lvalInt  =  (double)n;  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)n;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)n;	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
2	[BUG]  [BUGGY]  int  lvalInt  =  (int)n.intValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)n.intValue();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)n.intValue();	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  int  lvalInt  =  (int)nval;  [CE]  cannot  find  symbol  nval  [FE]              AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)nval;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)nval;	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  cannot  find  symbol  nval	2	None	replace
4	[BUG]  [BUGGY]  double  lvalInt  =  (double)Math.rint(lval);  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)Math.rint(lval);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)Math.rint(lval);	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	3	None	replace
5	[BUG]  [BUGGY]  double  lvalInt  =  (double)lval.intValue();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)lval.intValue();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)lval.intValue();	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
6	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  int  lvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  int  lvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    int  lvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
7	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
8	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  Integer  lvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  Integer  lvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    Integer  lvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
9	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  lvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  lvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  lvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
10	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  Integer  lvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  Integer  lvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  Integer  lvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
11	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
12	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
13	[BUG]  [BUGGY]  int  lval  =  left.getType();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lval  =  left.getType();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lval  =  left.getType();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
14	[BUG]  [BUGGY]  int  lval  =  left.getLastChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lval  =  left.getLastChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lval  =  left.getLastChild();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
15	[BUG]  [BUGGY]  int  lval  =  left.getLastChild().getString();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lval  =  left.getLastChild().getString();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lval  =  left.getLastChild().getString();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)Math.floor(lval);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	add	int  lvalInt  =(int)Math.floor(lval);	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
17	[BUG]  [BUGGY]  int  lvalInt  =(int)Math.floor(lval);  [FE]  AssertionFailedError  [FE]                          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)Math.floor(lval);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =(int)Math.floor(lval);	      	compilable	  [FE]  AssertionFailedError  	6	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  2;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	add	int  lvalInt  =  (int)lval  +  2;	  int    lvalInt    =    (int)lval    +    1;    	compilable	  [FE]  AssertionFailedError  	5	2	replace
19	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  2;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)lval  +  2;	  int    lvalInt    =    (int)lval    +    1;    	compilable	  [FE]  AssertionFailedError  	5	2	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  3;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	add	int  lvalInt  =  (int)lval  +  3;	  int    lvalInt    =    (int)lval    +    1;    	compilable	  [FE]  AssertionFailedError  	5	2	replace
21	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  3;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)lval  +  3;	  int    lvalInt    =    (int)lval    +    1;    	compilable	  [FE]  AssertionFailedError  	5	2	replace
22	[BUG]  [BUGGY]  float  lvalInt  =  (float)right;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  float  lvalInt  =  (float)right;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	float  lvalInt  =  (float)right;	  float    lvalInt    =    (float)lval;    	non-compiled	[CE]  inconvertible  types	1	None	replace
23	[BUG]  [BUGGY]  float  lvalInt  =  (float)negNum;  [CE]  cannot  find  symbol  negNum  [FE]          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  float  lvalInt  =  (float)negNum;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	float  lvalInt  =  (float)negNum;	  float    lvalInt    =    (float)lval;    	non-compiled	[CE]  cannot  find  symbol  negNum	1	None	replace
24	[BUG]  [BUGGY]  int  lvalInt  =  (int)n  +  1;  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)n  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)n  +  1;	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
25	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  int  rvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  int  rvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    int  rvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
26	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval  +  1;  lvalInt  =  (int)lval  +  1;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval  +  1;  lvalInt  =  (int)lval  +  1;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int    lvalInt    =    (int)lval    +    1;    lvalInt  =  (int)lval  +  1;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	4	None	add
27	[BUG]  [BUGGY]  double  lvalInt  =  (double)negNum;  [CE]  cannot  find  symbol  negNum  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)negNum;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)negNum;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  cannot  find  symbol  negNum	3	None	replace
28	[BUG]  [BUGGY]  double  lvalInt  =  (double)right;  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)right;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)right;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  inconvertible  types	3	None	replace
29	[BUG]  [BUGGY]  double  lvalInt  =  (double)node;  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)node;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)node;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  cannot  find  symbol  node	3	None	replace
30	[BUG]  [BUGGY]  double  lvalInt  =  (double)null;  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)null;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)null;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  inconvertible  types	3	None	replace
31	[BUG]  [BUGGY]  Node  lval  =  left.getFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.getFirstChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  lval  =  left.getFirstChild();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
32	[BUG]  [BUGGY]  Node  lval  =  node.getLastChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  lval  =  node.getLastChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  lval  =  node.getLastChild();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
33	[BUG]  [BUGGY]  Node  lval  =  left.getNext();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.getNext();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  lval  =  left.getNext();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
34	[BUG]  [BUGGY]  int  lvalInt  =(int)Math.floor(left);  [CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)Math.floor(left);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =(int)Math.floor(left);	      	non-compiled	[CE]  method  floor  in  class  Math  cannot  be  applied  to  given  types;	6	None	replace
35	[BUG]  [BUGGY]  int  lvalInt  =(int)Math.ceil(left);  [CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)Math.ceil(left);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =(int)Math.ceil(left);	      	non-compiled	[CE]  method  ceil  in  class  Math  cannot  be  applied  to  given  types;	6	None	replace
36	[BUG]  [BUGGY]  int  lvalInt  =  (int)n,  MAX_FOLD_NUMBER_ERROR;  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)n,  MAX_FOLD_NUMBER_ERROR;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)n,  MAX_FOLD_NUMBER_ERROR;	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
37	[BUG]  [BUGGY]  int  lvalInt  =  (int)n.intValue;  [CE]  cannot  find  symbol  intValue  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)n.intValue;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =  (int)n.intValue;	  int    lvalInt    =    (int)n;    	non-compiled	[CE]  cannot  find  symbol  intValue	2	None	replace
38	[BUG]  [BUGGY]  double  lvalInt  =  (double)lvalInt;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]            AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)lvalInt;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)lvalInt;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	3	None	replace
39	[BUG]  [BUGGY]  double  lvalInt  =  (double)mappingA_NON_NUMBER_ERROR;  [CE]  cannot  find  symbol  mappingA_NON_NUMBER_ERROR  [FE]              AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  double  lvalInt  =  (double)mappingA_NON_NUMBER_ERROR;  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	double  lvalInt  =  (double)mappingA_NON_NUMBER_ERROR;	  double    lvalInt    =    (double)lval;    	non-compiled	[CE]  cannot  find  symbol  mappingA_NON_NUMBER_ERROR	3	None	replace
40	[BUG]  [BUGGY]  Node  lvalInt  =(Node)n.getFirstChild();  [CE]  incomparable  types:  Node  and  double  [FE]                AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)n.getFirstChild();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  lvalInt  =(Node)n.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  double	6	None	replace
41	[BUG]  [BUGGY]  int  lvalInt  =(int)(Math.abs(lval)  <=  MAX_FOLD_NUMBER);  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)(Math.abs(lval)  <=  MAX_FOLD_NUMBER);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =(int)(Math.abs(lval)  <=  MAX_FOLD_NUMBER);	      	non-compiled	[CE]  inconvertible  types	6	None	replace
42	[BUG]  [BUGGY]  Node  lvalInt  =(Node)n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)n.clone();  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	Node  lvalInt  =(Node)n.clone();	      	non-compiled	[CE]  clone()  has  protected  access  in  Object	6	None	replace
43	[BUG]  [BUGGY]  int  lvalInt  =(int)(Math.abs(lval)  <  >  MAX_FOLD_NUMBER);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }      [BUGGY]  int  lvalInt  =(int)(Math.abs(lval)  <  >  MAX_FOLD_NUMBER);  [BUGGY]    if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	int  lvalInt  =(int)(Math.abs(lval)  <  >  MAX_FOLD_NUMBER);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
