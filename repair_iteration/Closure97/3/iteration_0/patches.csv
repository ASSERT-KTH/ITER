bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldShort(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
2	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldURSH(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
3	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
4	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldWord(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
5	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldInstant(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
6	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]    [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	add	  	return  tryFoldShift(subtree,  left,  right);  	compilable	  [FE]  RuntimeException  	5	2	replace
7	[BUG]  [BUGGY]    [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]    [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	  	return  tryFoldShift(subtree,  left,  right);  	compilable	  [FE]  RuntimeException  	5	2	replace
8	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldSave(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:  [BUGGY]  return  tryFoldURSh(subtree,  left,  right);  [BUGGY]    case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right);	return  tryFoldShift(subtree,  left,  right);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
