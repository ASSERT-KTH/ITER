bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldSortAssign(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortAssign(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortAssign(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
2	[BUG]  [BUGGY]  return  tryFoldSortOr(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortOr(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortOr(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
3	[BUG]  [BUGGY]  return  tryFoldSortOperator(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortOperator(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortOperator(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
4	[BUG]  [BUGGY]  return  tryFoldSort(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSort(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSort(subtree,  right,  left);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
5	[BUG]  [BUGGY]  return  tryFoldSortAnd(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortAnd(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortAnd(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
6	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtree.toString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtree.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  subtree.toString());	  return    tryFoldURSH(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
7	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right).toString();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right).toString();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right).toString();	  return    tryFoldURSH(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
8	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtractor.toString());  [CE]  cannot  find  symbol  subtractor  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtractor.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  subtractor.toString());	  return    tryFoldURSH(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol  subtractor	44	None	replace
9	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  toString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  toString());	  return    tryFoldURSH(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
10	[BUG]  [BUGGY]  return  tryFoldLore(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLore(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLore(subtree,  left,  right);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
11	[BUG]  [BUGGY]  return  tryFoldLord(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLord(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtree,  left,  right  -  1);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	58	None	replace
12	[BUG]  [BUGGY]  return  tryFoldLord(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLord(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtree,  right,  left);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
13	[BUG]  [BUGGY]  return  tryFoldLord(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLord(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtrae,  left,  right);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	58	None	replace
14	[BUG]  [BUGGY]  return  tryFoldUpper(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUpper(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUpper(subtree,  left,  right);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
15	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  MAX_FOLD_NUMBER);	          return    tryFoldURSH(subtree,    left);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
16	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  right);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  right);	          return    tryFoldURSH(subtree,    left);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  equal);  [CE]  cannot  find  symbol  equal  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  equal);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  equal);	          return    tryFoldURSH(subtree,    left);    	non-compiled	[CE]  cannot  find  symbol  equal	13	None	replace
18	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldShort(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
19	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);	  return    tryFoldShort(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	51	None	replace
20	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right)+  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right)+  1;	  return    tryFoldShort(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
21	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldShort(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
22	[BUG]  [BUGGY]  return  tryFoldShortWords(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWords(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWords(subtree,  left,  right);	  return    tryFoldWords(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
23	[BUG]  [BUGGY]  return  tryFoldWords(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWords(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWords(subtree,  left,  right  -  1);	  return    tryFoldWords(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	32	None	replace
24	[BUG]  [BUGGY]  return  tryFoldWords(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWords(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWords(subtree,  left,  right  +  1);	  return    tryFoldWords(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	32	None	replace
25	[BUG]  [BUGGY]  return  tryFoldWords(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWords(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWords(subtree,  right,  left);	  return    tryFoldWords(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
26	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtree,  left,  right  -  1);	  return    tryFoldLocalInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	11	None	replace
27	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocalInstant(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtree,  right,  left);	  return    tryFoldLocalInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
28	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocalInstant(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtrae,  left,  right);	  return    tryFoldLocalInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	11	None	replace
29	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  right,  right);	  return    tryFoldWorsh(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
30	[BUG]  [BUGGY]  return  tryFoldStd(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStd(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStd(subtree,  left,  right);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
31	[BUG]  [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdInstant(subtree,  left,  right  -  1);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	10	None	replace
32	[BUG]  [BUGGY]  return  tryFoldStdInstant(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdInstant(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdInstant(subtree,  right,  left);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
33	[BUG]  [BUGGY]  return  tryFoldStdInstant(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdInstant(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdInstant(subtrae,  left,  right);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	10	None	replace
34	[BUG]  [BUGGY]  return  tryFoldShadow(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShadow(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShadow(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
35	[BUG]  [BUGGY]  return  tryFoldShould(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShould(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShould(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
36	[BUG]  [BUGGY]  return  tryFoldShallow(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShallow(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShallow(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  return  tryFoldShaw(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShaw(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShaw(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
38	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
39	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	42	None	replace
40	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
41	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	42	None	replace
42	[BUG]  [BUGGY]  Return  tryFoldWorsh(subtree,  left,  right);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  Return  tryFoldWorsh(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	Return  tryFoldWorsh(subtree,  left,  right);	  return    tryFoldWorsh(subtrae,    left,    right);    	non-compiled	[CE]  ';'  expected	18	None	replace
43	[BUG]  [BUGGY]  Return  tryFoldURSH(subtree,  left,  right);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  Return  tryFoldURSH(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	Return  tryFoldURSH(subtree,  left,  right);	  return    tryFoldURSH(subtree,    Left,    right);    	non-compiled	[CE]  ';'  expected	43	None	replace
44	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  subtree.getShortValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  subtree.getShortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right),  subtree.getShortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
45	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  this.getShortValue();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  this.getShortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right),  this.getShortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
46	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  getShortValue();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  getShortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right),  getShortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
47	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right).getIntValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right).getIntValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right).getIntValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
48	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right).toShortValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right).toShortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right).toShortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
49	[BUG]  [BUGGY]  return  tryFoldWors(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWors(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWors(subtree,  left,  right  -  1);	          return    tryFoldWors(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	60	None	replace
50	[BUG]  [BUGGY]  return  tryFoldShortWors(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWors(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWors(subtree,  left,  right);	          return    tryFoldWors(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
51	[BUG]  [BUGGY]  return  tryFoldWors(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWors(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWors(subtree,  left,  right  +  1);	          return    tryFoldWors(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	60	None	replace
52	[BUG]  [BUGGY]  return  tryFoldWeors(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeors(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeors(subtree,  left,  right);	          return    tryFoldWors(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
53	[BUG]  [BUGGY]  return  tryFoldWors(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWors(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWors(subtree,  right,  left);	          return    tryFoldWors(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
54	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtree);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
55	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
56	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  type);  [CE]  cannot  find  symbol  type  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  type);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  type);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  type	1	None	replace
57	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtreeType);  [CE]  cannot  find  symbol  subtreeType  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtreeType);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtreeType);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtreeType	1	None	replace
58	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  false);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  false);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
59	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtractor);  [CE]  cannot  find  symbol  subtractor  [FE]                  RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  subtractor);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  subtractor);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtractor	1	None	replace
60	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  right,  right);	  return    tryFoldShortShift(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
61	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  right,  right);	  return    tryFoldURSH(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
62	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  right,  right);	  return    tryFoldShort(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
63	[BUG]  [BUGGY]  return  tryFoldShort(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtrae,  left,  right);	  return    tryFoldShort(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  subtrae	26	None	replace
64	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  Left,  right);	  return    tryFoldShort(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  Left	26	None	replace
65	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  left,  right  -  1);	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	replace
66	[BUG]  [BUGGY]  return  tryFoldUse(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtrae,  left,  right);	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	2	None	replace
67	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  left,  right  +  1);	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
68	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  right,  left);	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
69	[BUG]  [BUGGY]  return  tryFoldUser(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUser(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUser(subtree,  left,  right);	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
70	[BUG]  [BUGGY]  return  tryFoldNotUnknown(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldNotUnknown(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldNotUnknown(subtree,  left,  right);	  return    tryFoldUnknown(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
71	[BUG]  [BUGGY]  return  tryFoldNull(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldNull(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldNull(subtree,  left,  right);	  return    tryFoldUnknown(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
72	[BUG]  [BUGGY]  return  tryFoldUnknown(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUnknown(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUnknown(subtree,  left,  right  -  1);	  return    tryFoldUnknown(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	24	None	replace
73	[BUG]  [BUGGY]  return  tryFoldShortUnknown(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortUnknown(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortUnknown(subtree,  left,  right);	  return    tryFoldUnknown(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
74	[BUG]  [BUGGY]  return  tryFoldShortWord(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWord(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWord(subtree,  right,  left);	  return    tryFoldShortWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
75	[BUG]  [BUGGY]  return  tryFoldInWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInWord(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInWord(subtree,  left,  right);	  return    tryFoldShortWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
76	[BUG]  [BUGGY]  return  tryFoldUnknownWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUnknownWord(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUnknownWord(subtree,  left,  right);	  return    tryFoldShortWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
77	[BUG]  [BUGGY]  return  tryFoldShortWorsH(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWorsH(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWorsH(subtree,  left,  right);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
78	[BUG]  [BUGGY]  return  tryFoldWorsH(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsH(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsH(subtree,  right,  left);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
79	[BUG]  [BUGGY]  return  tryFoldWeorsH(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeorsH(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeorsH(subtree,  left,  right);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
80	[BUG]  [BUGGY]  return  tryFoldNew(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldNew(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldNew(subtree,  left,  right);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
81	[BUG]  [BUGGY]  return  tryFoldURS(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURS(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtrae,  left,  right);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	4	None	replace
82	[BUG]  [BUGGY]  return  tryFoldInshort(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInshort(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInshort(subtree,  left,  right);	  return    tryFoldInShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
83	[BUG]  [BUGGY]  return  tryFoldInLong(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInLong(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInLong(subtree,  left,  right);	  return    tryFoldInShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
84	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldShortShift(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
85	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldShortShift(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	34	None	replace
86	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  subtree.size()  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  subtree.size()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  subtree.size()  -  1);	  return    tryFoldShortShift(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
87	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldShortShift(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
88	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  right,  right);	  return    tryFoldWord(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
89	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
90	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	52	None	replace
91	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	52	None	replace
92	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	52	None	replace
93	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
94	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	14	None	replace
95	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
96	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	14	None	replace
97	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right  -  1);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
98	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  right,  left);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
99	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right  +  1);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
100	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right.cloneTree());	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
101	[BUG]  [BUGGY]  return  tryFoldLocal(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                    RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtrae,  left,  right);	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	3	None	replace
102	[BUG]  [BUGGY]  return  tryFoldError(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldError(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldError(subtree,  left,  right  -  1);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
103	[BUG]  [BUGGY]  return  tryFoldWarn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWarn(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWarn(subtree,  left,  right);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
104	[BUG]  [BUGGY]  return  tryFoldError(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldError(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldError(subtree,  right,  left);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
105	[BUG]  [BUGGY]  return  tryFoldWarning(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWarning(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWarning(subtree,  left,  right);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  return  tryFoldShortSave(subtree,  left,  right)  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortSave(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortSave(subtree,  left,  right)	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
107	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)!=  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)!=  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)!=  ';'	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
108	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)  ==  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)  ==  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)  ==  ';'	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
109	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)!=  ';'  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)!=  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right)!=  ';'	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
110	[BUG]  [BUGGY]  Return  tryFoldShortShift(subtree,  left,  right);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  Return  tryFoldShortShift(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	Return  tryFoldShortShift(subtree,  left,  right);	  return    tryFoldShortShift(subtree,    Left,    right);    	non-compiled	[CE]  ';'  expected	38	None	replace
111	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
112	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	40	None	replace
113	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	40	None	replace
114	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.size()  -  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.size()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  subtree.size()  -  1);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
115	[BUG]  [BUGGY]  return  tryFoldShortInstant(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortInstant(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortInstant(subtree,  right,  left);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
116	[BUG]  [BUGGY]  return  tryFoldUnknownInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUnknownInstant(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUnknownInstant(subtree,  left,  right);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
117	[BUG]  [BUGGY]  return  tryFoldLongInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLongInstant(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLongInstant(subtree,  left,  right);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
118	[BUG]  [BUGGY]  return  tryFoldVertical(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldVertical(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldVertical(subtree,  left,  right);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
119	[BUG]  [BUGGY]  return  tryFoldRight(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRight(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRight(subtree,  left,  right);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
120	[BUG]  [BUGGY]  return  tryFoldRaw(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRaw(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRaw(subtree,  left,  right);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
121	[BUG]  [BUGGY]  return  tryFoldHorizontal(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldHorizontal(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldHorizontal(subtree,  right,  left);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
122	[BUG]  [BUGGY]  return  tryFoldWeor(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeor(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeor(subtree,  left,  right);	  return    tryFoldWeorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
123	[BUG]  [BUGGY]  return  tryFoldWeorsh(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeorsh(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeorsh(subtree,  right,  left);	  return    tryFoldWeorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
124	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldWorsh(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
125	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);	  return    tryFoldWorsh(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	39	None	replace
126	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  +  1);	  return    tryFoldWorsh(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	39	None	replace
127	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
128	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	35	None	replace
129	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
130	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right)+  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right)+  1;	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
131	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
132	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	19	None	replace
133	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	19	None	replace
134	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
135	[BUG]  [BUGGY]  return  tryFoldShortSave(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortSave(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortSave(subtree,  left,  right);	  Return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
136	[BUG]  [BUGGY]  return  tryFoldShutdown(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShutdown(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShutdown(subtree,  left,  right);	  Return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
137	[BUG]  [BUGGY]  return  tryFoldStdWord(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdWord(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtree,  left,  right  -  1);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	29	None	replace
138	[BUG]  [BUGGY]  return  tryFoldStdWord(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdWord(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtree,  right,  left);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
139	[BUG]  [BUGGY]  return  tryFoldStdAssign(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdAssign(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdAssign(subtree,  left,  right);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
140	[BUG]  [BUGGY]  return  tryFoldStdWord(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdWord(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtrae,  left,  right);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	29	None	replace
141	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  Left,  right);	  return    tryFoldSave(subtrae,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  Left	21	None	replace
142	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right;	  return    tryFoldSave(subtrae,    left,    right);    	non-compiled	[CE]  ')'  expected	21	None	replace
143	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldShort(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
144	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldShort(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	50	None	replace
145	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  subtree.size()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  subtree.size()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  subtree.size()  -  1);	  return    tryFoldShort(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
146	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER  +  1);	  return    tryFoldSave(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
147	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  +  1);	  return    tryFoldSave(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	20	None	replace
148	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldSave(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
149	[BUG]  [BUGGY]  return  tryFoldWordIn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWordIn(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWordIn(subtree,  left,  right);	  return    tryFoldIn(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
150	[BUG]  [BUGGY]  return  tryFoldStdIn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdIn(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdIn(subtree,  left,  right);	  return    tryFoldIn(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
151	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left);	          return    tryFoldShort(subtree,    right);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
152	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  right,  MAX_FOLD_NUMBER);	          return    tryFoldShort(subtree,    right);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
153	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left.getLastChild());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left.getLastChild());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left.getLastChild());	          return    tryFoldShort(subtree,    right);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
154	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  subtree);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  subtree);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  subtree);	          return    tryFoldURSH(subtree);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
155	[BUG]  [BUGGY]  return  tryFoldURS(subtree,  left);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURS(subtree,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtree,  left);	          return    tryFoldURSH(subtree);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
156	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)&  1;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
157	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)/  0;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)/  0;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)/  0;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
158	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)/  2;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)/  2;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)/  2;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
159	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)-  1;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
160	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  2;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  2;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)&  2;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
161	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  ==  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  ==  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right)  ==  ';'	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
162	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)!=  ';'  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)!=  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right)!=  ';'	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
163	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right)  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right)	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
164	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right)  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right)	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
165	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.toString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  subtree.toString());	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
166	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right).toString();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right).toString();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right).toString();	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
167	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  false.toString());  [CE]  boolean  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  false.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  false.toString());	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	45	None	replace
168	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  toString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  toString());	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
169	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER  -  1);	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
170	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER_ERROR  -  1);	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	46	None	replace
171	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  MISSING_A_NON_NUMBER_ERROR  -  1);	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	46	None	replace
172	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
173	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpression(subtree,  left,  right  -  1);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	8	None	replace
174	[BUG]  [BUGGY]  return  tryFoldExpress(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldExpress(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpress(subtree,  left,  right);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
175	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldExpression(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpression(subtree,  left,  right  +  1);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
176	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldExpression(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpression(subtree,  right,  left);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
177	[BUG]  [BUGGY]  return  tryFoldExpression(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldExpression(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpression(subtrae,  left,  right);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	8	None	replace
178	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  right,  right);	  return    tryFoldURSh(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
179	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  right,  right);	  return    tryFoldSave(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
180	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right).store;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right).store;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right).store;	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
181	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.storage);  [CE]  cannot  find  symbol  storage  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.storage);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right.storage);	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  cannot  find  symbol  storage	57	None	replace
182	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.store);  [CE]  cannot  find  symbol  store  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.store);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  subtree.store);	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  cannot  find  symbol  store	57	None	replace
183	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.cloneTree());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right.cloneTree());	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
184	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtree.toString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtree.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  subtree.toString());	  return    tryFoldURSh(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
185	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right).toString();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right).toString();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right).toString();	  return    tryFoldURSh(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
186	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtractor.toString());  [CE]  cannot  find  symbol  subtractor  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtractor.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  subtractor.toString());	  return    tryFoldURSh(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol  subtractor	49	None	replace
187	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  toString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  toString());	  return    tryFoldURSh(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
188	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  right,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  right,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  right,  right);	  return    tryFoldInstant(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
189	[BUG]  [BUGGY]  return  tryFoldInstant(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtrae,  left,  right);	  return    tryFoldInstant(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  subtrae	41	None	replace
190	[BUG]  [BUGGY]  Return  tryFoldURSh(subtree,  left,  right);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  Return  tryFoldURSh(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	Return  tryFoldURSh(subtree,  left,  right);	  return    tryFoldURSh(subtrae,    left,    right);    	non-compiled	[CE]  ';'  expected	48	None	replace
191	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  Left,  right);	  return    tryFoldURSh(subtrae,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  Left	48	None	replace
192	[BUG]  [BUGGY]  return  tryFoldRotation(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtree,  left,  right  -  1);	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	61	None	replace
193	[BUG]  [BUGGY]  return  tryFoldRotation(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtree,  right,  left);	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
194	[BUG]  [BUGGY]  return  tryFoldRotation(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtree,  left,  right  +  1);	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	61	None	replace
195	[BUG]  [BUGGY]  return  tryFoldRotation(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtrae,  left,  right);	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	61	None	replace
196	[BUG]  [BUGGY]  return  tryFoldWeord(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeord(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeord(subtree,  left,  right  -  1);	  return    tryFoldWeord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	30	None	replace
197	[BUG]  [BUGGY]  return  tryFoldWeord(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeord(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeord(subtree,  right,  left);	  return    tryFoldWeord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
198	[BUG]  [BUGGY]  return  tryFoldWeord(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeord(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeord(subtree,  left,  right  +  1);	  return    tryFoldWeord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	30	None	replace
199	[BUG]  [BUGGY]  return  tryFoldWeord(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeord(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeord(subtrae,  left,  right);	  return    tryFoldWeord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	30	None	replace
200	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  *  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right  *  1);	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	35	None	replace
201	[BUG]  [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldHorizontal(subtree,  left,  right  -  1);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	53	None	replace
202	[BUG]  [BUGGY]  return  tryFoldShortHorizontal(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortHorizontal(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortHorizontal(subtree,  left,  right);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
203	[BUG]  [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldHorizontal(subtree,  left,  right  +  1);	  return    tryFoldHorizontal(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	53	None	replace
204	[BUG]  [BUGGY]  return  tryFoldLord(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLord(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtree,  left,  right  +  1);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	58	None	replace
205	[BUG]  [BUGGY]  return  tryFoldLord(subtree,  left,  right.cloneTree());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLord(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtree,  left,  right.cloneTree());	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
206	[BUG]  [BUGGY]  return  tryFoldError(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldError(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldError(subtree,  left,  right  +  1);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	12	None	replace
207	[BUG]  [BUGGY]  return  tryFoldShortError(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortError(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortError(subtree,  left,  right);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
208	[BUG]  [BUGGY]  return  tryFoldError(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldError(subtree,  left,  right.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldError(subtree,  left,  right.toString());	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
209	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  Left,  right);	  return    tryFoldWorsh(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  Left	16	None	replace
210	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  right,  subtree);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  right,  subtree);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  right,  subtree);	          return    tryFoldShort(subtree,    right);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
211	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left;  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left;	          return    tryFoldShort(subtree,    right);    	non-compiled	[CE]  ')'  expected	62	None	replace
212	[BUG]  [BUGGY]  return  tryFoldUnknown(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUnknown(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUnknown(subtree,  right,  left);	  return    tryFoldUnknown(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
213	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right)-  1;	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
214	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.nextToken()  -  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  subtree.nextToken()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  subtree.nextToken()  -  1);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
215	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right)  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right)	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
216	[BUG]  [BUGGY]  return  tryFoldShortWorsh(subtree,  left,  right)  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWorsh(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWorsh(subtree,  left,  right)	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
217	[BUG]  [BUGGY]  return  tryFoldShiddle(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShiddle(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShiddle(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
218	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  -1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  -1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)&  -1;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
219	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right)-  1;	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
220	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  subtree.nextToken()  -  1);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  subtree.nextToken()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  subtree.nextToken()  -  1);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
221	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  left,  right.cloneTree());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtree,  left,  right.cloneTree());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  left,  right.cloneTree());	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
222	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
223	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_BITWISE_OPERAND);  [CE]  cannot  find  symbol  caseToken  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_BITWISE_OPERAND);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_BITWISE_OPERAND);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  caseToken	1	None	replace
224	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);  [CE]  cannot  find  symbol  caseToken  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  caseToken.NEGATING_A_NON_NUMBER);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  caseToken	1	None	replace
225	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  MAX_FOLD_NUMBER);	          return    tryFoldURSH(subtree);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
226	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  bottom);  [CE]  cannot  find  symbol  bottom  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  bottom);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  bottom);	          return    tryFoldURSH(subtree);    	non-compiled	[CE]  cannot  find  symbol  bottom	37	None	replace
227	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left.getLastChild());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left.getLastChild());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left.getLastChild());	          return    tryFoldURSH(subtree);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
228	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right  +  1);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
229	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	42	None	replace
230	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtractor.toString());  [CE]  cannot  find  symbol  subtractor  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtractor.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  subtractor.toString());	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol  subtractor	45	None	replace
231	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  name.toString());  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  name.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  name.toString());	  return    tryFoldSave(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol  name	45	None	replace
232	[BUG]  [BUGGY]  return  tryFoldSerialize(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSerialize(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSerialize(subtree,  left,  right);	  Return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
233	[BUG]  [BUGGY]  return  tryFoldSortAndOr(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortAndOr(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortAndOr(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
234	[BUG]  [BUGGY]  return  tryFoldSortBit(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSortBit(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSortBit(subtree,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
235	[BUG]  [BUGGY]  return  tryFoldInShort(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInShort(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInShort(subtree,  left,  right  -  1);	  return    tryFoldInShort(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	25	None	replace
236	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtree,  left,  right  +  1);	  return    tryFoldLocalInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
237	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right.intValue());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right.intValue());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtree,  left,  right.intValue());	  return    tryFoldLocalInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
238	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right)-  1;	  return    tryFoldShort(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
239	[BUG]  [BUGGY]  return  tryFoldStandWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStandWord(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStandWord(subtree,  left,  right);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
240	[BUG]  [BUGGY]  return  tryFoldStdWord(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdWord(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtree,  left,  right  +  1);	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	29	None	replace
241	[BUG]  [BUGGY]  return  tryFoldStdWord(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdWord(subtree,  left,  right.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtree,  left,  right.toString());	  return    tryFoldStdWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
242	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  super.getShortValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  super.getShortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right),  super.getShortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
243	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  right,  Left);  [CE]  cannot  find  symbol  Left  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  right,  Left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  right,  Left);	  return    tryFoldShortShift(subtree,    Left,    right);    	non-compiled	[CE]  cannot  find  symbol  Left	38	None	replace
244	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	19	None	replace
245	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.size()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.size()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  subtree.size()  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
246	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.nextToken()  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  subtree.nextToken()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  subtree.nextToken()  -  1);	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
247	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)+  1;	  return    tryFoldSave(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
248	[BUG]  [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortInstant(subtree,  left,  right  -  1);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	9	None	replace
249	[BUG]  [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortInstant(subtree,  left,  right  +  1);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
250	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  Left,  right);	  return    tryFoldInstant(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  Left	41	None	replace
251	[BUG]  [BUGGY]  return  tryFoldSerialize(subtree,  left,  right)  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSerialize(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSerialize(subtree,  left,  right)	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
252	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)  >>  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)  >>  ';'	  return    tryFoldSave(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	54	None	replace
253	[BUG]  [BUGGY]  return  tryFoldWeorsh(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWeorsh(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeorsh(subtree,  left,  right  -  1);	  return    tryFoldWeorsh(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	17	None	replace
254	[BUG]  [BUGGY]  return  tryFoldShortWord(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWord(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWord(subtree,  left,  right  -  1);	  return    tryFoldShortWord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	28	None	replace
255	[BUG]  [BUGGY]  return  tryFoldShortWord(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWord(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWord(subtree,  left,  right  +  1);	  return    tryFoldShortWord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	28	None	replace
256	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right)+  1;	  return    tryFoldWorsh(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
257	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  subtree);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  subtree);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  subtree);	          return    tryFoldURSH(subtree,    left);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
258	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left  +  1);	          return    tryFoldURSH(subtree,    left);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	13	None	replace
259	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.nextToken()  -  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  subtree.nextToken()  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  subtree.nextToken()  -  1);	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
260	[BUG]  [BUGGY]  return  tryFoldStandInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStandInstant(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStandInstant(subtree,  left,  right);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
261	[BUG]  [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdInstant(subtree,  left,  right  +  1);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
262	[BUG]  [BUGGY]  return  tryFoldURS(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURS(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtree,  left,  right  -  1);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	replace
263	[BUG]  [BUGGY]  return  tryFoldURS(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURS(subtree,  right,  left);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtree,  right,  left);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
264	[BUG]  [BUGGY]  return  tryFoldURS(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURS(subtree,  left,  right.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtree,  left,  right.toString());	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
265	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right  *  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right  *  1);	  return    tryFoldShort(subtree,    left,    right    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	51	None	replace
266	[BUG]  [BUGGY]  return  tryFoldShortIn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortIn(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortIn(subtree,  left,  right);	  return    tryFoldIn(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
267	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right.toString());	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
268	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  1;  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldLocal(subtree,  left,  right)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right)+  1;	  return    tryFoldLocal(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
269	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  Left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  Left,  right);	  return    tryFoldWord(subtree,    right,    left);    	non-compiled	[CE]  cannot  find  symbol  Left	31	None	replace
270	[BUG]  [BUGGY]  return  tryFoldRotation(subtree,  left,  right).clone();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtree,  left,  right).clone();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtree,  left,  right).clone();	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
271	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  right.store);  [CE]  cannot  find  symbol  store  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  right.store);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  right.store);	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  cannot  find  symbol  store	57	None	replace
272	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right)-  1;	  return    tryFoldShortShift(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
273	[BUG]  [BUGGY]  return  tryFoldWorsH(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsH(subtree,  left,  right  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsH(subtree,  left,  right  -  1);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	15	None	replace
274	[BUG]  [BUGGY]  return  tryFoldWorsH(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsH(subtree,  left,  right  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsH(subtree,  left,  right  +  1);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	15	None	replace
275	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right)-  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right)-  1;	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
276	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtree.type  -  1);  [CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  subtree.type  -  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  subtree.type  -  1);	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  type  is  not  public  in  Node;  cannot  be  accessed  from  outside  package	46	None	replace
277	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldWorsh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
278	[BUG]  [BUGGY]  return  tryFoldWorsInHex(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsInHex(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsInHex(subtree,  left,  right);	  return    tryFoldWorsH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
279	[BUG]  [BUGGY]  return  tryFoldShortSh(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortSh(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortSh(subtree,  left,  right);	  return    tryFoldSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
280	[BUG]  [BUGGY]  return  tryFoldWords(subtree,  left,  right)  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWords(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWords(subtree,  left,  right)	  return    tryFoldWords(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	32	None	replace
281	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldUse(subtree,  left,  right.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  left,  right.toString());	  return    tryFoldUse(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
282	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldShort(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
283	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldURSh(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
284	[BUG]  [BUGGY]  return  tryFoldRord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRord(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRord(subtree,  left,  right);	  return    tryFoldLord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
285	[BUG]  [BUGGY]  return  tryFoldSave(subTREe,  left,  right);  [CE]  cannot  find  symbol  subTREe  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subTREe,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subTREe,  left,  right);	  return    tryFoldSave(subtrae,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subTREe	21	None	replace
286	[BUG]  [BUGGY]  return  tryFoldStdOutstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldStdOutstant(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdOutstant(subtree,  left,  right);	  return    tryFoldStdInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
287	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
288	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right),  MAX_FOLD_NUMBER  +  1);	  return    tryFoldShortShift(subtree,    left,    right    +    1);    	non-compiled	[CE]  ';'  expected	35	None	replace
289	[BUG]  [BUGGY]  return  tryFoldSort(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSort(subtrae,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSort(subtrae,  left,  right);	  return    tryFoldSort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	59	None	replace
290	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldSave(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
291	[BUG]  [BUGGY]  return  tryFoldRotation(subtree,  left,  right)  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldRotation(subtree,  left,  right)  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldRotation(subtree,  left,  right)	          return    tryFoldRotation(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	61	None	replace
292	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right),  right.store);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right),  right.store);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right),  right.store);	  return    tryFoldWorsh(subtree,    left,    right.store);    	non-compiled	[CE]  ';'  expected	57	None	replace
293	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldURSH(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
294	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
295	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldInstant(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
296	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  this.shortValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right),  this.shortValue();  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right),  this.shortValue();	  return    tryFoldURSH(subtree,    left,    right).getShortValue();    	non-compiled	[CE]  ';'  expected	63	None	replace
297	[BUG]  [BUGGY]  return  tryFoldShortInShort(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortInShort(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortInShort(subtree,  left,  right);	  return    tryFoldInShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
298	[BUG]  [BUGGY]  return  tryFoldNotSave(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldNotSave(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldNotSave(subtree,  left,  right);	  Return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
299	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  4;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  4;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)&  4;	  return    tryFoldSave(subtree,    left,    right)&    0;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
300	[BUG]  [BUGGY]  return  tryFoldNotError(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldNotError(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldNotError(subtree,  left,  right);	  return    tryFoldError(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
301	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  >>  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  >>  ';'  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right)  >>  ';'	  return    tryFoldWorsh(subtree,    left,    right)    	non-compiled	[CE]  ';'  expected	56	None	replace
302	[BUG]  [BUGGY]  return  tryFoldWorshInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorshInstant(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorshInstant(subtree,  left,  right);	  return    tryFoldShortInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
303	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  this);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  this);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
304	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right,  true);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right,  true);	  return    tryFoldBinaryOperator(subtree,    left,    right);    	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	1	None	replace
305	[BUG]  [BUGGY]  return  tryFoldShortExpression(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortExpression(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortExpression(subtree,  left,  right);	  return    tryFoldExpression(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
306	[BUG]  [BUGGY]  return  tryFoldShortWeord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortWeord(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWeord(subtree,  left,  right);	  return    tryFoldWeord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
307	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
308	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right,  MAX_FOLD_NUMBER)-  1;	  return    tryFoldWord(subtree,    left,    right    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
309	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right,  MAX_FOLD_NUMBER)+  1;	  return    tryFoldWorsh(subtree,    left,    right    +    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
310	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  name.toString());  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSH(subtree,  left,  right,  name.toString());  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right,  name.toString());	  return    tryFoldURSH(subtree,    left,    right.toString());    	non-compiled	[CE]  cannot  find  symbol  name	44	None	replace
311	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  right,  Right);  [CE]  cannot  find  symbol  Right  [FE]            AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldShortShift(subtree,  right,  Right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  right,  Right);	  return    tryFoldShortShift(subtree,    Left,    right);    	non-compiled	[CE]  cannot  find  symbol  Right	38	None	replace
312	[BUG]  [BUGGY]  return  tryFoldURSIn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSIn(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSIn(subtree,  left,  right);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
313	[BUG]  [BUGGY]  return  tryFoldURSIf(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:      [BUGGY]  return  tryFoldURSIf(subtree,  left,  right);  [BUGGY]        case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSIf(subtree,  left,  right);	  return    tryFoldURS(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
