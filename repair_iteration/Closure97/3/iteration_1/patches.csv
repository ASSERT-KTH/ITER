bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right);  [CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldBinaryOperator(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldBinaryOperator(subtree,  left,  right);	      	non-compiled	[CE]  method  tryFoldBinaryOperator  in  class  PeepholeFoldConstants  cannot  be  applied  to  given  types;	7	None	replace
2	[BUG]  [BUGGY]  return  tryFoldUse(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldUse(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUse(subtree,  left,  right);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
3	[BUG]  [BUGGY]  return  tryFoldLocal(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldLocal(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocal(subtree,  left,  right);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  return  tryFoldURS(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURS(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURS(subtree,  left,  right);	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]  return  tryFoldURSH(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtrae,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtrae,  left,  right);	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	2	None	replace
6	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  right,  left);	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
7	[BUG]  [BUGGY]  return  tryFoldSh(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSh(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSh(subtree,  left,  right);	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
8	[BUG]  [BUGGY]  return  tryFoldExpression(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldExpression(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldExpression(subtree,  left,  right);	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
9	[BUG]  [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortInstant(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortInstant(subtree,  left,  right);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
10	[BUG]  [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldStdInstant(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdInstant(subtree,  left,  right);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
11	[BUG]  [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldLocalInstant(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLocalInstant(subtree,  left,  right);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
12	[BUG]  [BUGGY]  return  tryFoldError(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldError(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldError(subtree,  left,  right);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
13	[BUG]  [BUGGY]      return  tryFoldURSH(subtree,  left);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]      return  tryFoldURSH(subtree,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	        return  tryFoldURSH(subtree,  left);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
14	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right  -  1);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
15	[BUG]  [BUGGY]  return  tryFoldWorsH(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsH(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsH(subtree,  left,  right);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  right,  left);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
17	[BUG]  [BUGGY]  return  tryFoldWeorsh(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWeorsh(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeorsh(subtree,  left,  right);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
18	[BUG]  [BUGGY]  return  tryFoldWorsh(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtrae,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtrae,  left,  right);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	3	None	replace
19	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right  -  1);	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	9	None	replace
20	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  left,  right  +  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right  +  1);	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
21	[BUG]  [BUGGY]  return  tryFoldSave(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtrae,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtrae,  left,  right);	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	9	None	replace
22	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  right,  left);	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
23	[BUG]  [BUGGY]  Return  tryFoldSave(subtree,  left,  right);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  Return  tryFoldSave(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	Return  tryFoldSave(subtree,  left,  right);	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	9	None	replace
24	[BUG]  [BUGGY]  return  tryFoldUnknown(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldUnknown(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldUnknown(subtree,  left,  right);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
25	[BUG]  [BUGGY]  return  tryFoldInShort(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldInShort(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInShort(subtree,  left,  right);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
26	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShort(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  right,  left);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
27	[BUG]  [BUGGY]  return  tryFoldIn(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldIn(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldIn(subtree,  left,  right);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
28	[BUG]  [BUGGY]  return  tryFoldShortWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortWord(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortWord(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
29	[BUG]  [BUGGY]  return  tryFoldStdWord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldStdWord(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldStdWord(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  return  tryFoldWeord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWeord(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWeord(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWord(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  right,  left);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
32	[BUG]  [BUGGY]  return  tryFoldWords(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWords(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWords(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
33	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortShift(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  right,  left);	  return    tryFoldShortShift(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right  -  1);	  return    tryFoldShortShift(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	8	None	replace
35	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortShift(subtree,  left,  right  +  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  left,  right  +  1);	  return    tryFoldShortShift(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	8	None	replace
36	[BUG]  [BUGGY]  return  tryFoldShortShift(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortShift(subtrae,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtrae,  left,  right);	  return    tryFoldShortShift(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	8	None	replace
37	[BUG]  [BUGGY]      return  tryFoldURSH(subtree);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]      return  tryFoldURSH(subtree);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	        return  tryFoldURSH(subtree);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
38	[BUG]  [BUGGY]  return  tryFoldShortShift(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShortShift(subtree,  Left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShortShift(subtree,  Left,  right);	  return    tryFoldShortShift(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  Left	8	None	replace
39	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtree,  left,  right  +  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right  +  1);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
40	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldInstant(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  left,  right  -  1);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	5	None	replace
41	[BUG]  [BUGGY]  return  tryFoldInstant(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldInstant(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldInstant(subtree,  right,  left);	  return    tryFoldInstant(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
42	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right  -  1);	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	replace
43	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  Left,  right);  [CE]  cannot  find  symbol  Left  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtree,  Left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  Left,  right);	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  Left	2	None	replace
44	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtree,  left,  right.toString());  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right.toString());	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
45	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  left,  right.toString());  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right.toString());	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
46	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSh(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right  -  1);	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	10	None	replace
47	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  right,  left);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSh(subtree,  right,  left);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  right,  left);	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
48	[BUG]  [BUGGY]  return  tryFoldURSh(subtrae,  left,  right);  [CE]  cannot  find  symbol  subtrae  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSh(subtrae,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtrae,  left,  right);	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  subtrae	10	None	replace
49	[BUG]  [BUGGY]  return  tryFoldURSh(subtree,  left,  right.toString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSh(subtree,  left,  right.toString());  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSh(subtree,  left,  right.toString());	  return    tryFoldURSh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
50	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShort(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right  -  1);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	1	None	replace
51	[BUG]  [BUGGY]  return  tryFoldShort(subtree,  left,  right  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldShort(subtree,  left,  right  +  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldShort(subtree,  left,  right  +  1);	  return    tryFoldShort(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
52	[BUG]  [BUGGY]  return  tryFoldWord(subtree,  left,  right  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWord(subtree,  left,  right  -  1);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWord(subtree,  left,  right  -  1);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	4	None	replace
53	[BUG]  [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldHorizontal(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldHorizontal(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
54	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  left,  right)  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	9	None	replace
55	[BUG]  [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  0;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSave(subtree,  left,  right)&  0;  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSave(subtree,  left,  right)&  0;	  return    tryFoldSave(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
56	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtree,  left,  right)  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right)	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  ';'  expected	3	None	replace
57	[BUG]  [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.store);  [CE]  cannot  find  symbol  store  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldWorsh(subtree,  left,  right.store);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldWorsh(subtree,  left,  right.store);	  return    tryFoldWorsh(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol  store	3	None	replace
58	[BUG]  [BUGGY]  return  tryFoldLord(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldLord(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldLord(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
59	[BUG]  [BUGGY]  return  tryFoldSort(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldSort(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldSort(subtree,  left,  right);	  return    tryFoldWord(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
60	[BUG]  [BUGGY]      return  tryFoldWors(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]      return  tryFoldWors(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	        return  tryFoldWors(subtree,  left,  right);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
61	[BUG]  [BUGGY]      return  tryFoldRotation(subtree,  left,  right);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]      return  tryFoldRotation(subtree,  left,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	        return  tryFoldRotation(subtree,  left,  right);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
62	[BUG]  [BUGGY]      return  tryFoldShort(subtree,  right);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]      return  tryFoldShort(subtree,  right);  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	        return  tryFoldShort(subtree,  right);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
63	[BUG]  [BUGGY]  return  tryFoldURSH(subtree,  left,  right).getShortValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    case  Token.OR:  return  tryFoldAndOr(subtree,  left,  right);  case  Token.BITAND:  case  Token.BITOR:  return  tryFoldBitAndOr(subtree,  left,  right);  case  Token.LSH:  case  Token.RSH:  case  Token.URSH:    [BUGGY]  return  tryFoldURSH(subtree,  left,  right).getShortValue();  [BUGGY]      case  Token.ASSIGN:  return  tryFoldAssign(subtree,  left,  right);  case  Token.ADD:  return  tryFoldAdd(subtree,  left,  right);  case  Token.SUB:  case  Token.MUL:  case  Token.DIV:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldBinaryOperator  [RETURN_TYPE]  Node  Node  subtree  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  Node  left  right  subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	return  tryFoldURSH(subtree,  left,  right).getShortValue();	  return    tryFoldURSH(subtree,    left,    right);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
