bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >=  >  rvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt!=  >  rvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
3	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  >  rvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
4	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  break;  [CE]  cannot  find  symbol  Delete  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  [Delete]  >  rvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  Delete	22	None	replace
5	[BUG]  [BUGGY]  result  =  rvalInt  >=  lvalInt;  break;  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  rvalInt  >=  lvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  >=  lvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	22	None	replace
6	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt!=  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	32	None	replace
7	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	32	None	replace
8	[BUG]  [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  >  rvalInt;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalLh;  [CE]  cannot  find  symbol  rvalLh  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >>  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  rvalLh;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalLh	6	None	replace
10	[BUG]  [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >=  >  rvalInt;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalLh;  [CE]  cannot  find  symbol  rvalLh  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt!=  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt!=  rvalLh;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalLh	6	None	replace
12	[BUG]  [BUGGY]  result  =  lvalLh  ==  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  ==  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  ==  >  rvalInt;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  Node  lval  =  left.getLastChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  left.getLastChild();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  left.getLastChild();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
14	[BUG]  [BUGGY]  Node  lval  =  n.getFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  n.getFirstChild();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  n.getFirstChild();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
15	[BUG]  [BUGGY]  Node  lval  =  left.getNext();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  left.getNext();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  left.getNext();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
16	[BUG]  [BUGGY]  Node  lval  =  right.getFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  right.getFirstChild();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  right.getFirstChild();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
17	[BUG]  [BUGGY]  Node  lval  =  node.getFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  node.getFirstChild();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  node.getFirstChild();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
18	[BUG]  [BUGGY]  Result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Result  =  lvalInt  >>  >  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
19	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh!=  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  >  rvalInt;	  result    =    lvalLh!=    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  result  =  lval!=  rval;  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lval!=  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lval!=  rval;	  result    =    lvalLh!=    rvalLh;    	non-compiled	[CE]  incompatible  types	28	None	replace
21	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  >  rvalLh;	  result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
22	[BUG]  [BUGGY]  error(LSH,  n.getString(),  right.getString());  [CE]  cannot  find  symbol  LSH  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  n.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  n.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	33	None	replace
23	[BUG]  [BUGGY]  error(lvalInt,  left.getString(),  right.getString());  [CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(lvalInt,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(lvalInt,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;	33	None	replace
24	[BUG]  [BUGGY]  error(LOCALE_BITWISE_OPERAND,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  LOCALE_BITWISE_OPERAND  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LOCALE_BITWISE_OPERAND,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LOCALE_BITWISE_OPERAND,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LOCALE_BITWISE_OPERAND	33	None	replace
25	[BUG]  [BUGGY]  error(LSH,  right.getString(),  left.getString());  [CE]  cannot  find  symbol  LSH  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  right.getString(),  left.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  right.getString(),  left.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	33	None	replace
26	[BUG]  [BUGGY]  error(LEFT,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  LEFT  [FE]                                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LEFT,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LEFT,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LEFT	33	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	add	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
28	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
29	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
30	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
31	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
32	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
33	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
34	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	13	None	add
35	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalInt;  break;	  result    =    lvalInt    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	21	None	replace
36	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalLh;  [CE]  cannot  find  symbol  rvalLh  [FE]              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >=  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >=  rvalLh;	  result    =    lvalInt    <    <    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  rvalLh	2	None	replace
37	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalLh;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  [Delete]  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  [Delete]  rvalLh;	  result    =    lvalInt    <    <    rvalLh;    	non-compiled	[CE]  ';'  expected	2	None	replace
38	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalLh;  [CE]  cannot  find  symbol  rvalLh  [FE]                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  rvalLh;	  result    =    lvalInt    <    <    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  rvalLh	2	None	replace
39	[BUG]  [BUGGY]  error(LSH,  right.getString());  [CE]  cannot  find  symbol  LSH  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  right.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	23	None	replace
40	[BUG]  [BUGGY]  error(LSH,  n.getString());  [CE]  cannot  find  symbol  LSH  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  n.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  n.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	23	None	replace
41	[BUG]  [BUGGY]  error(lvalInt,  left.getString());  [CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(lvalInt,  left.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(lvalInt,  left.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;	23	None	replace
42	[BUG]  [BUGGY]  error(LSH,  left.getString(),  rvalInt);  [CE]  cannot  find  symbol  LSH  [FE]                                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  left.getString(),  rvalInt);  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  left.getString(),  rvalInt);	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	23	None	replace
43	[BUG]  [BUGGY]  error(LEFT,  left.getString());  [CE]  cannot  find  symbol  LEFT  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LEFT,  left.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LEFT,  left.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LEFT	23	None	replace
44	[BUG]  [BUGGY]  result  =  lvalInt  ==  rval;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  rval;	  result    =    lvalLh    ==    rvalLh;    	non-compiled	[CE]  incompatible  types	30	None	replace
45	[BUG]  [BUGGY]  result  =  lval  ==  rvalInt;  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lval  ==  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lval  ==  rvalInt;	  result    =    lvalLh    ==    rvalLh;    	non-compiled	[CE]  incompatible  types	30	None	replace
46	[BUG]  [BUGGY]  result  =  lval  ==  rval;  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lval  ==  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lval  ==  rval;	  result    =    lvalLh    ==    rvalLh;    	non-compiled	[CE]  incompatible  types	30	None	replace
47	[BUG]  [BUGGY]  result  =  lvalOffset  ==  rvalOffset;  [CE]  cannot  find  symbol  lvalOffset  [FE]                                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalOffset  ==  rvalOffset;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalOffset  ==  rvalOffset;	  result    =    lvalLh    ==    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  lvalOffset	30	None	replace
48	[BUG]  [BUGGY]  Result  =  lvalInt  ==  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Result  =  lvalInt  ==  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Result  =  lvalInt  ==  rvalInt;	  result    =    rvalInt    ==    lvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	11	None	replace
49	[BUG]  [BUGGY]  result  =  rvalInt  ==  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  rvalInt  ==  >  lvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  ==  >  lvalInt;	  result    =    rvalInt    ==    lvalInt;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  result  =  lvalLSH  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLSH  >>  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLSH  >>  >  rvalInt;	  result    =    lvalLSH    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	add	result  =  rvalInt  >>  lvalInt;	  result    =    rvalInt    >=    lvalInt;    	compilable	  [FE]  ComparisonFailure  	31	2	replace
52	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  [FE]  ComparisonFailure  [FE]              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  >>  lvalInt;	  result    =    rvalInt    >=    lvalInt;    	compilable	  [FE]  ComparisonFailure  	31	2	replace
53	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
54	[BUG]  [BUGGY]  result  =  lval  >>  rval;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lval  >>  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lval  >>  rval;	  result    =    lvalLh    >>    rvalLh;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	27	None	replace
55	[BUG]  [BUGGY]  result  =  lvalOffset  >>  rvalOffset;  [CE]  cannot  find  symbol  lvalOffset  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalOffset  >>  rvalOffset;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalOffset  >>  rvalOffset;	  result    =    lvalLh    >>    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  lvalOffset	27	None	replace
56	[BUG]  [BUGGY]  Result  =  lvalInt!=  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Result  =  lvalInt!=  rvalInt;	  result    =    rvalInt!=    lvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	26	None	replace
57	[BUG]  [BUGGY]  Node  lval  =  left.removeFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  left.removeFirstChild();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  left.removeFirstChild();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
58	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  [CE]  cannot  find  symbol  Result  [FE]                  ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	19	None	replace
59	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                    ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	19	None	replace
60	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  result  =  lvalLh  >>  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh!=  rvalInt;  result  =  lvalLh  >>  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  rvalInt;  result  =  lvalLh  >>  rvalLh;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	18	None	replace
61	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  result  =  lvalLh!=  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                  ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  rvalInt;  result  =  lvalLh!=  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalInt;  result  =  lvalLh!=  rvalLh;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	18	None	replace
62	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  result  =  lvalLh  >>  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                    ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  rvalInt;  result  =  lvalLh  >>  rvalLh;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalInt;  result  =  lvalLh  >>  rvalLh;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	18	None	replace
63	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());  [CE]  cannot  find  symbol  LEGATING_A_NON_NUMBER_ERROR  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LEGATING_A_NON_NUMBER_ERROR	23	None	replace
64	[BUG]  [BUGGY]  error(left,  left.getString());  [CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(left,  left.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(left,  left.getString());	  error(LSH,    left.getString());    	non-compiled	[CE]  method  error  in  class  AbstractPeepholeOptimization  cannot  be  applied  to  given  types;	23	None	replace
65	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh!=  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  rvalInt;  break;	  result    =    lvalInt    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	21	None	replace
66	[BUG]  [BUGGY]  Result  =  lvalInt  >=  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Result  =  lvalInt  >=  rvalInt;	  result    =    rvalInt    >=    lvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	31	None	replace
67	[BUG]  [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  >  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
68	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh!=  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  >  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
69	[BUG]  [BUGGY]  result  =  lvalLSH  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLSH  >>  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLSH  >>  >  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
70	[BUG]  [BUGGY]  result  =  lval  >=  rval;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lval  >=  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lval  >=  rval;	  result    =    lvalLh    >=    rvalLh;    	non-compiled	[CE]  incompatible  types	29	None	replace
71	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  >>  >  lvalInt;	  result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  LEGATING_A_NON_NUMBER_ERROR  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LEGATING_A_NON_NUMBER_ERROR,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LEGATING_A_NON_NUMBER_ERROR	33	None	replace
73	[BUG]  [BUGGY]  error(LSH_BITWISE_OPERAND,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  LSH_BITWISE_OPERAND  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH_BITWISE_OPERAND,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH_BITWISE_OPERAND,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH_BITWISE_OPERAND	33	None	replace
74	[BUG]  [BUGGY]  error(NUMBER_OPERAND,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  NUMBER_OPERAND  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(NUMBER_OPERAND,  left.getString(),  right.getString());  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(NUMBER_OPERAND,  left.getString(),  right.getString());	  error(LSH,    left.getString(),    right.getString());    	non-compiled	[CE]  cannot  find  symbol  NUMBER_OPERAND	33	None	replace
75	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rval;  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  <  <  rval;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  <  <  rval;	  result    =    lvalInt    <    <    rvalLh;    	non-compiled	[CE]  >  expected	2	None	replace
76	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                  ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	19	None	replace
77	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                    ComparisonFailure      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	19	None	replace
78	[BUG]  [BUGGY]  result  =  lvalLh  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  >=  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >=  rvalInt;  break;	  result    =    lvalInt    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	22	None	replace
79	[BUG]  [BUGGY]  result  =  lvalLsh  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLsh  >>  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLsh  >>  >  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
80	[BUG]  [BUGGY]  result  =  lvalLswer!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLswer!=  >  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLswer!=  >  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
81	[BUG]  [BUGGY]  result  =  lvalInt  ==  RvalInt;  [CE]  cannot  find  symbol  RvalInt  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  RvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  RvalInt;	  result    =    rvalInt    ==    lvalInt;    	non-compiled	[CE]  cannot  find  symbol  RvalInt	11	None	replace
82	[BUG]  [BUGGY]  error(LSH,  left.getString(),  right);  [CE]  cannot  find  symbol  LSH  [FE]                          AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  error(LSH,  left.getString(),  right);  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  left.getString(),  right);	  error(LSH,    left.getString());    	non-compiled	[CE]  cannot  find  symbol  LSH	23	None	replace
83	[BUG]  [BUGGY]  result  =  lvalLh  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLh  [Delete]  >  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  [Delete]  >  rvalInt;	  result    =    lvalLh    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	6	None	replace
84	[BUG]  [BUGGY]  result  =  lvalLsh  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLsh  [FE]                      AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLsh  >>  rvalInt;  break;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLsh  >>  rvalInt;  break;	  result    =    lvalInt    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLsh	21	None	replace
85	[BUG]  [BUGGY]  Node  lval  =  left.getFirstChild().getNext();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  Node  lval  =  left.getFirstChild().getNext();  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  left.getFirstChild().getNext();	  Node    lval    =    left.getFirstChild();    	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
86	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                            AssertionFailedError      [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalInt  ==  rvalOutt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  rvalOutt;	  result    =    lvalLh    ==    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	30	None	replace
87	[BUG]  [BUGGY]  result  =  lvalLsh  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLsh  [FE]    AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLsh  >>  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLsh  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLsh	14	None	replace
88	[BUG]  [BUGGY]  result  =  lvalLsh!=  rvalInt;  [CE]  cannot  find  symbol  lvalLsh  [FE]      AssertionFailedError    [CONTEXT]      }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:      [BUGGY]  result  =  lvalLsh!=  rvalInt;  [BUGGY]      break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLsh!=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLsh	14	None	replace
