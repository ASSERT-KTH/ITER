bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]        AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  >>  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
2	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalLh;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  <  <  rvalLh;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  <  <  rvalLh;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  >  expected	8	None	replace
3	[BUG]  [BUGGY]  result  =  lvalLh  >=  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]            AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  >=  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >=  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
4	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]              AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh!=  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
5	[BUG]  [BUGGY]  result  =  lvalLh  ==  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]                AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  ==  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  ==  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
6	[BUG]  [BUGGY]  result  =  lvalLh  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  [Delete]  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  [Delete]  rvalInt;	  result    =    lvalLh    <    <    rvalInt;    	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  >  rvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  ==  >  rvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt!=  >  rvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >=  >  rvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  result  =  rvalInt  ==  lvalInt;  [CE]  incompatible  types  [FE]                      AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  rvalInt  ==  lvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  ==  lvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  incompatible  types	5	None	replace
12	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  Delete  [FE]                        AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  [Delete]  >  rvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Delete	5	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	add	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
14	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
15	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
16	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
17	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
18	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  rvalInt;	  	non-compiled	[CE]  ';'  expected	1	None	add
19	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]              ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    Result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
20	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [BUGGY]  rvalInt;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [BUGGY]  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [BUGGY]  rvalInt;	  	non-compiled	[CE]  ';'  expected	1	None	add
21	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [CE]  unreachable  statement  [FE]                  AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  rvalInt;  break;	      	non-compiled	[CE]  unreachable  statement	7	None	replace
22	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >=  rvalInt;  break;	      	non-compiled	[CE]  incompatible  types	7	None	replace
23	[BUG]  [BUGGY]  error(LSH,  left.getString());  [CE]  cannot  find  symbol  LSH  [FE]                      AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  error(LSH,  left.getString());  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  left.getString());	      	non-compiled	[CE]  cannot  find  symbol  LSH	7	None	replace
24	[BUG]  [BUGGY]  Node  lval  =  left.getFirstChild();  [CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  Node  lval  =  left.getFirstChild();  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	Node  lval  =  left.getFirstChild();	      	non-compiled	[CE]  variable  lval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	7	None	replace
25	[BUG]  [BUGGY]  result  =  lvalLSH  >>  rvalInt;  [CE]  cannot  find  symbol  lvalLSH  [FE]    ComparisonFailure    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLSH  >>  rvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLSH  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLSH	2	None	replace
26	[BUG]  [BUGGY]  result  =  rvalInt!=  lvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  rvalInt!=  lvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt!=  lvalInt;	  result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  incompatible  types	4	None	replace
27	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                  AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  >>  rvalLh;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >>  rvalLh;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	7	None	replace
28	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                    AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh!=  rvalLh;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh!=  rvalLh;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	7	None	replace
29	[BUG]  [BUGGY]  result  =  lvalLh  >=  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                      AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  >=  rvalLh;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  >=  rvalLh;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	7	None	replace
30	[BUG]  [BUGGY]  result  =  lvalLh  ==  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]                        AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalLh  ==  rvalLh;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalLh  ==  rvalLh;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	7	None	replace
31	[BUG]  [BUGGY]  result  =  rvalInt  >=  lvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  rvalInt  >=  lvalInt;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  rvalInt  >=  lvalInt;	  result    =    lvalInt    >=    rvalInt;    	non-compiled	[CE]  incompatible  types	3	None	replace
32	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	result  =  lvalInt  >>  >  rvalInt;  break;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  error(LSH,  left.getString(),  right.getString());  [CE]  cannot  find  symbol  LSH  [FE]                    AssertionFailedError    [CONTEXT]    }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:    [BUGGY]  error(LSH,  left.getString(),  right.getString());  [BUGGY]    break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	error(LSH,  left.getString(),  right.getString());	      	non-compiled	[CE]  cannot  find  symbol  LSH	7	None	replace
