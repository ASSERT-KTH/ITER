bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  rvalInt  =(float)n.intValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)n.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n.intValue();	  float    rvalInt    =(float)n;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
2	[BUG]  [BUGGY]  float  rvalInt  =(float)n.length;  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)n.length;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n.length;	  float    rvalInt    =(float)n;    	non-compiled	[CE]  cannot  find  symbol  length	29	None	replace
3	[BUG]  [BUGGY]  float  rvalInt  =(float)n.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)n.getValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n.getValue();	  float    rvalInt    =(float)n;    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
4	[BUG]  [BUGGY]  float  rvalInt  =(float)n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)n.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n.clone();	  float    rvalInt    =(float)n;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	29	None	replace
5	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    int    lvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
6	[BUG]  [BUGGY]  int  rvalInt  =  (int)n;  int  lvalInt  =  (int)lval;  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =  (int)n;  int  lvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =  (int)n;  int  lvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    int    lvalInt    =    (int)lval;    	non-compiled	[CE]  inconvertible  types	24	None	replace
7	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  int  lvalInt  =  (int)lval;  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  int  lvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  int  lvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    int    lvalInt    =    (int)lval;    	non-compiled	[CE]  inconvertible  types	24	None	replace
8	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  n.getLastChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
9	[BUG]  [BUGGY]  Node  rval  =  n.getFirstChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  n.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
10	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  n.getNext();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
11	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  left  =  n.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	16	None	replace
12	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lvalInt);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getNext(),  lvalInt);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getNext(),  lvalInt);	  Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	19	None	replace
13	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	19	None	replace
14	[BUG]  [BUGGY]  Node  right  =  left.getNext()  &  lvalInt;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getNext()  &  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getNext()  &  lvalInt;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	19	None	replace
15	[BUG]  [BUGGY]  Node  right  =  left.getNext(),  lvalInt;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getNext(),  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getNext(),  lvalInt;	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	19	None	replace
16	[BUG]  [BUGGY]  int  rvalInt  =(int)left;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left;	  int    rvalInt    =(int)rightMask;    	non-compiled	[CE]  inconvertible  types	28	None	replace
17	[BUG]  [BUGGY]  int  rvalInt  =(int)result;  [CE]  variable  result  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)result;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)result;	  int    rvalInt    =(int)rightMask;    	non-compiled	[CE]  variable  result  might  not  have  been  initialized	28	None	replace
18	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.intValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.intValue();	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.clone();	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	5	None	replace
20	[BUG]  [BUGGY]  Integer  rvalInt  =(int)n;  [CE]  inconvertible  types  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(int)n;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(int)n;	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  inconvertible  types	5	None	replace
21	[BUG]  [BUGGY]  double  rvalInt  =(double)right.intValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right.intValue();	  double    rvalInt    =(double)right;    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
22	[BUG]  [BUGGY]  double  rvalInt  =(double)right.intValue;  [CE]  cannot  find  symbol  intValue  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right.intValue;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right.intValue;	  double    rvalInt    =(double)right;    	non-compiled	[CE]  cannot  find  symbol  intValue	11	None	replace
23	[BUG]  [BUGGY]  double  rvalInt  =(double)rightLval;  [CE]  cannot  find  symbol  rightLval  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)rightLval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)rightLval;	  double    rvalInt    =(double)right;    	non-compiled	[CE]  cannot  find  symbol  rightLval	11	None	replace
24	[BUG]  [BUGGY]  double  rvalInt  =(double)right.cloneTree();  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right.cloneTree();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right.cloneTree();	  double    rvalInt    =(double)right;    	non-compiled	[CE]  inconvertible  types	11	None	replace
25	[BUG]  [BUGGY]  double  rvalInt  =(double)right.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right.clone();	  double    rvalInt    =(double)right;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	11	None	replace
26	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  int  rvalInt  =  (int)lval;  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  int  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  int  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	non-compiled	[CE]  inconvertible  types	25	None	replace
27	[BUG]  [BUGGY]  double  rvalInt  =  (double)lval;  rvalInt  =  (double)lval;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)lval;  rvalInt  =  (double)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lval;  rvalInt  =  (double)lval;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	25	None	replace
28	[BUG]  [BUGGY]  n  =(int)lval;  n  =(int)lval;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  n  =(int)lval;  n  =(int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	n  =(int)lval;  n  =(int)lval;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	non-compiled	[CE]  incompatible  types	25	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	Integer  rvalInt  =  (Integer)lvalInt;	  Integer    rvalInt    =    (Integer)lval;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
30	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lvalInt;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lvalInt;	  Integer    rvalInt    =    (Integer)lval;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
31	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval.intValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval.intValue();	  Integer    rvalInt    =    (Integer)lval;    	non-compiled	[CE]  double  cannot  be  dereferenced	13	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  new  Integer(lvalInt);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	Integer  rvalInt  =  new  Integer(lvalInt);	  Integer    rvalInt    =    (Integer)lval;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
33	[BUG]  [BUGGY]  Integer  rvalInt  =  new  Integer(lvalInt);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  new  Integer(lvalInt);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  new  Integer(lvalInt);	  Integer    rvalInt    =    (Integer)lval;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
34	[BUG]  [BUGGY]  Double  rvalInt  =  (double)lvalInt;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Double  rvalInt  =  (double)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Double  rvalInt  =  (double)lvalInt;	  double    rvalInt    =    (double)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	6	None	replace
35	[BUG]  [BUGGY]  int  rvalInt  =(int)right.int;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right.int;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.int;	  int    rvalInt    =(int)right.intValue;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  int  rvalInt  =(int)left.intValue;  [CE]  cannot  find  symbol  intValue  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left.intValue;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left.intValue;	  int    rvalInt    =(int)right.intValue;    	non-compiled	[CE]  cannot  find  symbol  intValue	9	None	replace
37	[BUG]  [BUGGY]  double  rvalInt  =  result;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  result;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  result;	  double    rvalInt    =    (double)result;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	38	None	replace
38	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    }    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	37	None	replace
39	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  inconvertible  types  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    }    	non-compiled	[CE]  inconvertible  types	37	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	int  rvalInt  =(int)lvalInt  +  1;	  int    rvalInt    =(int)lvalInt;    	compilable	  [FE]  AssertionFailedError  	35	2	replace
41	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lvalInt  +  1;	  int    rvalInt    =(int)lvalInt;    	compilable	  [FE]  AssertionFailedError  	35	2	replace
42	[BUG]  [BUGGY]  Node  rvalInt  =  right.getLastChild();  [CE]  incomparable  types:  Node  and  double  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getLastChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  right.getLastChild();	  Node    rvalInt    =    left.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	33	None	replace
43	[BUG]  [BUGGY]  Node  rvalInt  =  n.getLastChild();  [CE]  incomparable  types:  Node  and  double  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  n.getLastChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  n.getLastChild();	  Node    rvalInt    =    left.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	33	None	replace
44	[BUG]  [BUGGY]  Node  rvalInt  =  left.getLastChild().getNext();  [CE]  incomparable  types:  Node  and  double  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getLastChild().getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getLastChild().getNext();	  Node    rvalInt    =    left.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	33	None	replace
45	[BUG]  [BUGGY]  Node  rvalInt  =  right.getNext();  [CE]  incomparable  types:  Node  and  double  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  right.getNext();	  Node    rvalInt    =    left.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  double	32	None	replace
46	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getNext()  +  1;	  Node    rvalInt    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	32	None	replace
47	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext()  -  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getNext()  -  1;	  Node    rvalInt    =    left.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	32	None	replace
48	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext(),  lvalInt);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext(),  lvalInt);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getNext(),  lvalInt);	  Node    rvalInt    =    left.getNext();    	non-compiled	[CE]  ';'  expected	32	None	replace
49	[BUG]  [BUGGY]  int  rvalInt  =(int)left.length;  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left.length;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left.length;	  int    rvalInt    =(int)right.length;    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
50	[BUG]  [BUGGY]  int  rvalInt  =(int)right.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right.length  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.length  +  1;	  int    rvalInt    =(int)right.length;    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
51	[BUG]  [BUGGY]  Node  rval  =  right.getNext();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  right.getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  right.getNext();	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
52	[BUG]  [BUGGY]  Node  rval  =  left.getNext()  +  1;  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.getNext()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getNext()  +  1;	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
53	[BUG]  [BUGGY]  Node  rval  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
54	[BUG]  [BUGGY]  Node  rval  =  left.getNext()  ||  n.getType()  ==  Token.FUNCTION;  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.getNext()  ||  n.getType()  ==  Token.FUNCTION;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getNext()  ||  n.getType()  ==  Token.FUNCTION;	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
55	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getLastChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	18	None	replace
56	[BUG]  [BUGGY]  int  rvalInt  =(int)n.int;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.int;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.int;	  int    rvalInt    =(int)n.intValue;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
57	[BUG]  [BUGGY]  int  rvalInt  =(int)n.getIntValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.getIntValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.getIntValue();	  int    rvalInt    =(int)n.intValue;    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
58	[BUG]  [BUGGY]  Node  rval  =  left.getLastChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.getLastChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getLastChild();	  Node    rval    =    left.getFirstChild();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	14	None	replace
59	[BUG]  [BUGGY]  Node  rval  =  right.getFirstChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  right.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  right.getFirstChild();	  Node    rval    =    left.getFirstChild();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	14	None	replace
60	[BUG]  [BUGGY]  Node  rval  =  node.getFirstChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  node.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  node.getFirstChild();	  Node    rval    =    left.getFirstChild();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	14	None	replace
61	[BUG]  [BUGGY]  Node  rvalInt  =  right.getFirstChild();  [CE]  incomparable  types:  Node  and  double  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  right.getFirstChild();	  Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	15	None	replace
62	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  [CE]  incomparable  types:  Node  and  double  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getFirstChild().getNext();	  Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	15	None	replace
63	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().intValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getFirstChild().intValue();	  Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
64	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;  if  (lvalInt!=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	36	None	replace
65	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  int  rvalInt  =(int)lvalInt;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  int  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    int  rvalInt  =(int)lvalInt;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	34	None	add
66	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	34	None	add
67	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	34	None	add
68	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  Int  rvalInt  =(int)lvalInt;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  Int  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    Int  rvalInt  =(int)lvalInt;	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
69	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  int  lvalInt  =(int)lvalInt;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  int  lvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    int  lvalInt  =(int)lvalInt;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	34	None	add
70	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left;  return  n;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left;  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left;  return  n;  }	  	non-compiled	[CE]  ')'  expected	34	None	add
71	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt  +  1;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)lvalInt  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lvalInt  +  1;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	7	None	replace
72	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)lvalInt.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lvalInt.intValue();	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
73	[BUG]  [BUGGY]  Double  rvalInt  =  (Double)lvalInt;  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Double  rvalInt  =  (Double)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Double  rvalInt  =  (Double)lvalInt;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  inconvertible  types	7	None	replace
74	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  long  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  long  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    long  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
75	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
76	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
77	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  long  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  long  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  long  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
78	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  Long  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  Long  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    Long  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
79	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  long  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  long  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  long  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
80	[BUG]  [BUGGY]  int  rvalInt  =(int)n.length  +  1;  [CE]  cannot  find  symbol  length  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.length  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.length  +  1;	  int    rvalInt    =(int)n.length;    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
81	[BUG]  [BUGGY]  int  rvalInt  =(int)n.getLength();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.getLength();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.getLength();	  int    rvalInt    =(int)n.length;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  int  rvalInt  =(int)n.length  -  1;  [CE]  cannot  find  symbol  length  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.length  -  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.length  -  1;	  int    rvalInt    =(int)n.length;    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
83	[BUG]  [BUGGY]  double  rvalInt  =(double)n.intValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n.intValue();	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
84	[BUG]  [BUGGY]  double  rvalInt  =(double)nval;  [CE]  cannot  find  symbol  nval  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)nval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)nval;	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol  nval	2	None	replace
85	[BUG]  [BUGGY]  double  rvalInt  =(double)n.getValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n.getValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n.getValue();	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
86	[BUG]  [BUGGY]  double  rvalInt  =(double)n.getType();  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n.getType();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n.getType();	  double    rvalInt    =(double)n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	2	None	replace
87	[BUG]  [BUGGY]  double  rvalInt  =(double)n.length;  [CE]  cannot  find  symbol  length  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n.length;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n.length;	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
88	[BUG]  [BUGGY]  int  rvalInt  =(int)n.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.intValue()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.intValue()  +  1;	  int    rvalInt    =(int)n.intValue();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
89	[BUG]  [BUGGY]  int  rvalInt  =(int)m.intValue();  [CE]  cannot  find  symbol  m  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)m.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)m.intValue();	  int    rvalInt    =(int)n.intValue();    	non-compiled	[CE]  cannot  find  symbol  m	1	None	replace
90	[BUG]  [BUGGY]  int  rvalInt  =(int)left.intValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left.intValue();	  int    rvalInt    =(int)n.intValue();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
91	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  int  rvalInt  =  (int)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  int  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;  int  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    int    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	21	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	long  rvalInt  =  (long)lvalInt;	  long    rvalInt    =    (long)lval;    	compilable	  [FE]  AssertionFailedError  	31	2	replace
93	[BUG]  [BUGGY]  long  rvalInt  =  (long)lvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long  rvalInt  =  (long)lvalInt;	  long    rvalInt    =    (long)lval;    	compilable	  [FE]  AssertionFailedError  	31	2	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	Integer  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Integer    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	23	2	replace
95	[BUG]  [BUGGY]  Integer  rvalInt  =  (int)lval;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Integer    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	23	2	replace
96	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  Integer  rvalInt  =  (int)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  Integer  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;  Integer  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Integer    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	23	None	replace
97	[BUG]  [BUGGY]  int  rvalInt  =(int)n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.clone();	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	27	None	replace
98	[BUG]  [BUGGY]  int  rvalInt  =(int)left.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left.clone();	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	27	None	replace
99	[BUG]  [BUGGY]  float  rvalInt  =(float)right.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)right.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)right.clone();	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	27	None	replace
100	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)right.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)right.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)right.clone();	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	27	None	replace
101	[BUG]  [BUGGY]  float  rvalInt  =  (float)right.intValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)right.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)right.intValue();	  float    rvalInt    =    (float)right;    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
102	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt,  right;  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt,  right;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lvalInt,  right;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	39	None	replace
103	[BUG]  [BUGGY]  double  rvalInt  =(double)right,  lvalInt;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right,  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right,  lvalInt;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  inconvertible  types	39	None	replace
104	[BUG]  [BUGGY]  int  rvalInt  =(int)left,  lvalInt;  [CE]  inconvertible  types  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)left,  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)left,  lvalInt;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  inconvertible  types	39	None	replace
105	[BUG]  [BUGGY]  float  rvalInt  =(float)right,  lvalInt;  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)right,  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)right,  lvalInt;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  inconvertible  types	39	None	replace
106	[BUG]  [BUGGY]  int  rvalInt  =(int)right,  left,  lvalInt;  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right,  left,  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right,  left,  lvalInt;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  inconvertible  types	39	None	replace
107	[BUG]  [BUGGY]  int  rvalInt  =(int)lval.intValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval.intValue();	  int    rvalInt    =(int)right.intValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
108	[BUG]  [BUGGY]  int  rvalInt  =(int)right.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right.intValue()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.intValue()  +  1;	  int    rvalInt    =(int)right.intValue();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
109	[BUG]  [BUGGY]  int  rvalInt  =(int)n.doubleValue()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.doubleValue()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.doubleValue()  +  1;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
110	[BUG]  [BUGGY]  double  rvalInt  =(double)n  +  1;  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n  +  1;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  inconvertible  types	4	None	replace
111	[BUG]  [BUGGY]  int  rvalInt  =(int)n.getValue()  +  1;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.getValue()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.getValue()  +  1;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
112	[BUG]  [BUGGY]  Int  rvalInt  =  (int)lval;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Int  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Int  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Int    rvalInt    =    (int)lval;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
113	[BUG]  [BUGGY]  int  lvalInt  =  (int)lval;  Int  rvalInt  =  (int)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =  (int)lval;  Int  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =  (int)lval;  Int  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Int    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	22	None	replace
114	[BUG]  [BUGGY]  double  rvalInt  =(double)nvalInt;  [CE]  cannot  find  symbol  nvalInt  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)nvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)nvalInt;	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol  nvalInt	2	None	replace
115	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  left  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  variable  left  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	19	None	replace
116	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  float  lvalInt  =  (float)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lval;  float  lvalInt  =  (float)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;  float  lvalInt  =  (float)lval;	  int    rvalInt    =    (int)lval;    int    lvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
117	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  int  lvalInt  =(int)lvalInt;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  int  lvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval;  int  lvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    int    lvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	24	None	replace
118	[BUG]  [BUGGY]  Node  rval  =  left.removeFirstChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.removeFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.removeFirstChild();	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
119	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  inconvertible  types  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	non-compiled	[CE]  inconvertible  types	36	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	int  rvalInt  =(int)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
121	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
122	[BUG]  [BUGGY]  int  rvalInt  =(int)n.intValue  +  1;  [CE]  cannot  find  symbol  intValue  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.intValue  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.intValue  +  1;	  int    rvalInt    =(int)n.intValue;    	non-compiled	[CE]  cannot  find  symbol  intValue	40	None	replace
123	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)lvalInt.doubleValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lvalInt.doubleValue();	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
124	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    int    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	21	None	replace
125	[BUG]  [BUGGY]  int  lvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  lvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  lvalInt  =(int)lval;  int  rvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    int    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	21	None	replace
126	[BUG]  [BUGGY]  float  rvalInt  =  (float)lvalInt  +  1;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lvalInt  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lvalInt  +  1;	  float    rvalInt    =    (float)lvalInt;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	20	None	replace
127	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.intValue;  [CE]  cannot  find  symbol  intValue  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.intValue;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.intValue;	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  cannot  find  symbol  intValue	5	None	replace
128	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.cloneTree();  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.cloneTree();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.cloneTree();	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  inconvertible  types	5	None	replace
129	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.getValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.getValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.getValue();	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
130	[BUG]  [BUGGY]  double  rvalInt  =(double)right.value;  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)right.value;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right.value;	  double    rvalInt    =(double)right;    	non-compiled	[CE]  cannot  find  symbol  value	11	None	replace
131	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  long  lvalInt  =  (long)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  long  lvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    long  lvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
132	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  int  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  int  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    int  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
133	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().removeFirstChild();  [CE]  incomparable  types:  Node  and  double  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().removeFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getFirstChild().removeFirstChild();	  Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	15	None	replace
134	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(ROOT_BITWISE_OPERAND,  left);  return  n;  }  [CE]  cannot  find  symbol  ROOT_BITWISE_OPERAND  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt;  if  (lvalInt!=  rval)  {  error(ROOT_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =(int)lvalInt;    if  (lvalInt!=  rval)  {  error(ROOT_BITWISE_OPERAND,  left);  return  n;  }	  	non-compiled	[CE]  cannot  find  symbol  ROOT_BITWISE_OPERAND	34	None	add
135	[BUG]  [BUGGY]  int  rvalInt  =(int)n  +  2;  [CE]  inconvertible  types  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n  +  2;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n  +  2;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  inconvertible  types	4	None	replace
136	[BUG]  [BUGGY]  int  rvalInt  =(int)n  +  1L;  [CE]  inconvertible  types  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n  +  1L;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n  +  1L;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  inconvertible  types	4	None	replace
137	[BUG]  [BUGGY]  int  rvalInt  =(int)n  +  3;  [CE]  inconvertible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n  +  3;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n  +  3;	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  inconvertible  types	4	None	replace
138	[BUG]  [BUGGY]  int  rvalInt  =(int)n.substring(1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)n.substring(1);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.substring(1);	  int    rvalInt    =(int)n    +    1;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
139	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  float  rvalInt  =  (float)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lval;  float  rvalInt  =  (float)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;  float  rvalInt  =  (float)lval;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	25	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	int  rvalInt  =(int)lval;  rvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	25	2	replace
141	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  rvalInt  =(int)lvalInt;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval;  rvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	25	2	replace
142	[BUG]  [BUGGY]  double  rvalInt  =(double)null;  [CE]  inconvertible  types  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)null;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)null;	  double    rvalInt    =    (double)result;    	non-compiled	[CE]  inconvertible  types	38	None	replace
143	[BUG]  [BUGGY]  int  rvalInt  =(int)right.intVal;  [CE]  cannot  find  symbol  intVal  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right.intVal;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.intVal;	  int    rvalInt    =(int)right.intValue;    	non-compiled	[CE]  cannot  find  symbol  intVal	9	None	replace
144	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)right;  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)right;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)right;	  Integer    rvalInt    =    (Integer)lval;    	non-compiled	[CE]  inconvertible  types	13	None	replace
145	[BUG]  [BUGGY]  int  rvalInt  =(int)right.clone()  +  1;  [CE]  clone()  has  protected  access  in  Object  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right.clone()  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.clone()  +  1;	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	27	None	replace
146	[BUG]  [BUGGY]  int  rvalInt  =(int)right,  lvalInt  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)right,  lvalInt  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right,  lvalInt  +  1;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  ';'  expected	39	None	replace
147	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)right,  lvalInt;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)right,  lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)right,  lvalInt;	  int    rvalInt    =(int)right,    lvalInt;    	non-compiled	[CE]  inconvertible  types	39	None	replace
148	[BUG]  [BUGGY]  float  rvalInt  =(float)n  +  1;  [CE]  inconvertible  types  [FE]              AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =(float)n  +  1;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n  +  1;	  float    rvalInt    =(float)n;    	non-compiled	[CE]  inconvertible  types	29	None	replace
149	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  Int  rvalInt  =  (int)lval;  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  Int  rvalInt  =  (int)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  Int  rvalInt  =  (int)lval;	  int    rvalInt    =    (int)lval;    Int    rvalInt    =    (int)lval;    	non-compiled	[CE]  inconvertible  types	22	None	replace
150	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  Int  rvalInt  =  (float)lval;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lval;  Int  rvalInt  =  (float)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;  Int  rvalInt  =  (float)lval;	  int    rvalInt    =    (int)lval;    Int    rvalInt    =    (int)lval;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
151	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  inconvertible  types  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;  if  (rvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    }    	non-compiled	[CE]  inconvertible  types	37	None	replace
152	[BUG]  [BUGGY]  Node  rvalInt  =  left.getParent();  [CE]  incomparable  types:  Node  and  double  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getParent();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getParent();	  Node    rvalInt    =    left.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  double	32	None	replace
153	[BUG]  [BUGGY]  Node  rvalInt  =  left.removeFirstChild();  [CE]  incomparable  types:  Node  and  double  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.removeFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.removeFirstChild();	  Node    rvalInt    =    left.getLastChild();    	non-compiled	[CE]  incomparable  types:  Node  and  double	33	None	replace
154	[BUG]  [BUGGY]  double  rvalInt  =(double)rightEmpty;  [CE]  cannot  find  symbol  rightEmpty  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)rightEmpty;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)rightEmpty;	  double    rvalInt    =(double)right;    	non-compiled	[CE]  cannot  find  symbol  rightEmpty	11	None	replace
155	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  int  rvalInt  =  (float)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lval;  int  rvalInt  =  (float)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;  int  rvalInt  =  (float)lval;	  int    rvalInt    =    (int)lval;    int    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	21	None	replace
156	[BUG]  [BUGGY]  float  rvalInt  =  (float)right.intValue;  [CE]  cannot  find  symbol  intValue  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)right.intValue;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)right.intValue;	  float    rvalInt    =    (float)right;    	non-compiled	[CE]  cannot  find  symbol  intValue	26	None	replace
157	[BUG]  [BUGGY]  if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
158	[BUG]  [BUGGY]  if(lvalInt!=  right)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  if(lvalInt!=  right)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	if(lvalInt!=  right)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
159	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  float  rvalInt  =  (float)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	36	None	replace
160	[BUG]  [BUGGY]  Node  rval  =  left.replaceChild(n,  newNumber);  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.replaceChild(n,  newNumber);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.replaceChild(n,  newNumber);	  Node    rval    =    left.getFirstChild();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	14	None	replace
161	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt.clone();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt.clone();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lvalInt.clone();	  int    rvalInt    =(int)right.clone();    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
162	[BUG]  [BUGGY]  double  rvalInt  =  (double)resultInt;  [CE]  cannot  find  symbol  resultInt  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)resultInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)resultInt;	  double    rvalInt    =    (double)result;    	non-compiled	[CE]  cannot  find  symbol  resultInt	38	None	replace
163	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lvalInt.intValue();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lvalInt.intValue();	  int    rvalInt    =(int)right.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
164	[BUG]  [BUGGY]  double  rvalInt  =  (double)LvalInt;  [CE]  cannot  find  symbol  LvalInt  [FE]                    AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)LvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)LvalInt;	  double    rvalInt    =    (double)lvalInt;    	non-compiled	[CE]  cannot  find  symbol  LvalInt	7	None	replace
165	[BUG]  [BUGGY]  int  rvalInt  =(int)lval;  Integer  rvalInt  =(int)lvalInt;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  int  rvalInt  =(int)lval;  Integer  rvalInt  =(int)lvalInt;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lval;  Integer  rvalInt  =(int)lvalInt;	  int    rvalInt    =    (int)lval;    Integer    rvalInt    =    (int)lval;    	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	23	None	replace
166	[BUG]  [BUGGY]  Node  rvalInt  =  left.getLastChild().getString();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getLastChild().getString();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getLastChild().getString();	  Node    rvalInt    =    left.getLastChild();    	non-compiled	[CE]  incompatible  types	33	None	replace
167	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    left.getFirstChild();    	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	18	None	replace
168	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n.removeFirst();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Integer  rvalInt  =(Integer)n.removeFirst();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n.removeFirst();	  Integer    rvalInt    =(Integer)n;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
169	[BUG]  [BUGGY]  Node  rval  =  left.getParent();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  Node  rval  =  left.getParent();  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getParent();	  Node    rval    =    left.getNext();    	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	17	None	replace
170	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  double  rvalInt  =  (long)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  long  rvalInt  =  (long)lval;  double  rvalInt  =  (long)lval;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long    rvalInt    =    (long)lval;    double  rvalInt  =  (long)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	30	None	add
171	[BUG]  [BUGGY]  double  rvalInt  =(double)n.intValue;  [CE]  cannot  find  symbol  intValue  [FE]                AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =(double)n.intValue;  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n.intValue;	  double    rvalInt    =(double)n;    	non-compiled	[CE]  cannot  find  symbol  intValue	2	None	replace
172	[BUG]  [BUGGY]  if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	if(lvalInt!=  rval)  {  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  int    rvalInt    =    (int)lval;    if    (lvalInt!=    rval)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
173	[BUG]  [BUGGY]  double  rvalInt  =  (double)(lvalInt);  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                  AssertionFailedError      [CONTEXT]      return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }      [BUGGY]  double  rvalInt  =  (double)(lvalInt);  [BUGGY]      if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)(lvalInt);	  double    rvalInt    =    (double)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	6	None	replace
