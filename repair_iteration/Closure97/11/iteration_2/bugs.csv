bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rvalInt  =(int)n.intValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)n.intValue();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.intValue();	  int    rvalInt    =(int)n;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
2	[BUG]  [BUGGY]  double  rvalInt  =(double)n;  [CE]  inconvertible  types  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  double  rvalInt  =(double)n;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)n;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
3	[BUG]  [BUGGY]  int  rvalInt  =(int)n.length;  [CE]  cannot  find  symbol  length  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)n.length;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.length;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
4	[BUG]  [BUGGY]  int  rvalInt  =(int)n  +  1;  [CE]  inconvertible  types  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)n  +  1;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n  +  1;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
5	[BUG]  [BUGGY]  Integer  rvalInt  =(Integer)n;  [CE]  inconvertible  types  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Integer  rvalInt  =(Integer)n;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =(Integer)n;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
6	[BUG]  [BUGGY]  double  rvalInt  =  (double)lval;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  double  rvalInt  =  (double)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lval;	  double    rvalInt    =    (double)rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	5	None	replace
7	[BUG]  [BUGGY]  double  rvalInt  =  (double)lvalInt;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  double  rvalInt  =  (double)lvalInt;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)lvalInt;	  double    rvalInt    =    (double)rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	5	None	replace
8	[BUG]  [BUGGY]  int  rvalInt  =(int)right.intValue();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)right.intValue();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.intValue();	  int    rvalInt    =(int)right;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  int  rvalInt  =(int)right.intValue;  [CE]  cannot  find  symbol  intValue  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)right.intValue;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.intValue;	  int    rvalInt    =(int)right;    	non-compiled	[CE]  cannot  find  symbol  intValue	7	None	replace
10	[BUG]  [BUGGY]  int  rvalInt  =(int)right.length;  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)right.length;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.length;	  int    rvalInt    =(int)right;    	non-compiled	[CE]  cannot  find  symbol  length	7	None	replace
11	[BUG]  [BUGGY]  double  rvalInt  =(double)right;  [CE]  inconvertible  types  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  double  rvalInt  =(double)right;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =(double)right;	  int    rvalInt    =(int)right;    	non-compiled	[CE]  inconvertible  types	7	None	replace
12	[BUG]  [BUGGY]  float  rvalInt  =  (float)lval;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  float  rvalInt  =  (float)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lval;	  int    rvalInt    =    (int)lval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	4	None	replace
13	[BUG]  [BUGGY]  Integer  rvalInt  =  (Integer)lval;  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Integer  rvalInt  =  (Integer)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Integer  rvalInt  =  (Integer)lval;	  int    rvalInt    =    (int)lval;    	non-compiled	[CE]  inconvertible  types	4	None	replace
14	[BUG]  [BUGGY]  Node  rval  =  left.getFirstChild();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  rval  =  left.getFirstChild();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getFirstChild();	      	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
15	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  [CE]  incomparable  types:  Node  and  double  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  rvalInt  =  left.getFirstChild();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  double	6	None	replace
16	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
17	[BUG]  [BUGGY]  Node  rval  =  left.getNext();  [CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  rval  =  left.getNext();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rval  =  left.getNext();	      	non-compiled	[CE]  variable  rval  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
18	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
19	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  variable  right  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	6	None	replace
20	[BUG]  [BUGGY]  float  rvalInt  =  (float)lvalInt;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  float  rvalInt  =  (float)lvalInt;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)lvalInt;	  float    rvalInt    =    (float)rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	1	None	replace
21	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  int  rvalInt  =  (int)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  int  rvalInt  =  (int)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    int  rvalInt  =  (int)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
22	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  Int  rvalInt  =  (int)lval;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  Int  rvalInt  =  (int)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    Int  rvalInt  =  (int)lval;	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
23	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  Integer  rvalInt  =  (int)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  Integer  rvalInt  =  (int)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    Integer  rvalInt  =  (int)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
24	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  int  lvalInt  =  (int)lval;  [CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  int  lvalInt  =  (int)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    int  lvalInt  =  (int)lval;	  	non-compiled	[CE]  variable  lvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
25	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  rvalInt  =  (int)lval;  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  rvalInt  =  (int)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    rvalInt  =  (int)lval;	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
26	[BUG]  [BUGGY]  float  rvalInt  =  (float)right;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  float  rvalInt  =  (float)right;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =  (float)right;	  float    rvalInt    =    (float)rval;    	non-compiled	[CE]  inconvertible  types	1	None	replace
27	[BUG]  [BUGGY]  int  rvalInt  =(int)right.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)right.clone();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right.clone();	  int    rvalInt    =(int)right;    	non-compiled	[CE]  clone()  has  protected  access  in  Object	7	None	replace
28	[BUG]  [BUGGY]  int  rvalInt  =(int)rightMask;  [CE]  cannot  find  symbol  rightMask  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)rightMask;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)rightMask;	  int    rvalInt    =(int)right;    	non-compiled	[CE]  cannot  find  symbol  rightMask	7	None	replace
29	[BUG]  [BUGGY]  float  rvalInt  =(float)n;  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  float  rvalInt  =(float)n;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	float  rvalInt  =(float)n;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  inconvertible  types	2	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  long  rvalInt  =  (long)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	long  rvalInt  =  (long)lval;	  int    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
31	[BUG]  [BUGGY]  long  rvalInt  =  (long)lval;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  long  rvalInt  =  (long)lval;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	long  rvalInt  =  (long)lval;	  int    rvalInt    =    (int)lval;    	compilable	  [FE]  AssertionFailedError  	4	2	replace
32	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext();  [CE]  incomparable  types:  Node  and  double  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  rvalInt  =  left.getNext();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getNext();	      	non-compiled	[CE]  incomparable  types:  Node  and  double	6	None	replace
33	[BUG]  [BUGGY]  Node  rvalInt  =  left.getLastChild();  [CE]  incomparable  types:  Node  and  double  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  Node  rvalInt  =  left.getLastChild();  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	Node  rvalInt  =  left.getLastChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  double	6	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)lvalInt;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	int  rvalInt  =(int)lvalInt;	      	compilable	  [FE]  AssertionFailedError  	6	2	replace
35	[BUG]  [BUGGY]  int  rvalInt  =(int)lvalInt;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)lvalInt;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)lvalInt;	      	compilable	  [FE]  AssertionFailedError  	6	2	replace
36	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
37	[BUG]  [BUGGY]  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =  (int)lval;  if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int    rvalInt    =    (int)lval;    if  (lvalInt!=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  	non-compiled	[CE]  variable  rvalInt  is  already  defined  in  method  tryFoldShift(Node,Node,Node)	3	None	add
38	[BUG]  [BUGGY]  double  rvalInt  =  (double)result;  [CE]  bad  operand  types  for  binary  operator  '<<'  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  double  rvalInt  =  (double)result;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	double  rvalInt  =  (double)result;	  double    rvalInt    =    (double)rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<<'	5	None	replace
39	[BUG]  [BUGGY]  int  rvalInt  =(int)right,  lvalInt;  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)right,  lvalInt;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)right,  lvalInt;	  int    rvalInt    =(int)right;    	non-compiled	[CE]  inconvertible  types	7	None	replace
40	[BUG]  [BUGGY]  int  rvalInt  =(int)n.intValue;  [CE]  cannot  find  symbol  intValue  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  int  lvalInt  =  (int)  lval;  if  (lvalInt  !=  lval)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }    [BUGGY]  int  rvalInt  =(int)n.intValue;  [BUGGY]    if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	int  rvalInt  =(int)n.intValue;	  int    rvalInt    =(int)n;    	non-compiled	[CE]  cannot  find  symbol  intValue	2	None	replace
