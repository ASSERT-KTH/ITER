bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] result = lvalInt >>> rvalInt; [FE] AssertionFailedError [CONTEXT] case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    [BUGGY] result = lvalInt >>> rvalInt; [BUGGY] break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange();  [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    [BUGGY] [BUGGY] result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange();  [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	
3	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; [BUGGY] break; [BUGGY] default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; [BUGGY] [BUGGY] break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	
5	[BUG] [BUGGY] return tryFoldShift(subtree, left, right); [FE] AssertionFailedError [CONTEXT] case Token.OR: return tryFoldAndOr(subtree, left, right); case Token.BITAND: case Token.BITOR: return tryFoldBitAndOr(subtree, left, right); case Token.LSH: case Token.RSH: case Token.URSH: [BUGGY] return tryFoldShift(subtree, left, right); [BUGGY]  case Token.ASSIGN: return tryFoldAssign(subtree, left, right); case Token.ADD: return tryFoldAdd(subtree, left, right); case Token.SUB: case Token.MUL: case Token.DIV: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.OR: return tryFoldAndOr(subtree, left, right); case Token.BITAND: case Token.BITOR: return tryFoldBitAndOr(subtree, left, right); case Token.LSH: case Token.RSH: case Token.URSH: [BUGGY] [BUGGY] return tryFoldShift(subtree, left, right); case Token.ASSIGN: return tryFoldAssign(subtree, left, right); case Token.ADD: return tryFoldAdd(subtree, left, right); case Token.SUB: case Token.MUL: case Token.DIV: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	123	123	1	add	
7	[BUG] [BUGGY] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldShift(Node n, Node left, Node right) { [BUGGY] if (left.getType() == Token.NUMBER &&  right.getType() == Token.NUMBER) { [BUGGY] right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble();   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldShift(Node n, Node left, Node right) { [BUGGY] [BUGGY] if (left.getType() == Token.NUMBER &&  right.getType() == Token.NUMBER) { right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble();   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	
9	[BUG] [BUGGY] double lval = left.getDouble(); [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; [BUGGY] double lval = left.getDouble(); [BUGGY] double rval = right.getDouble();   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; [BUGGY] [BUGGY] double lval = left.getDouble(); double rval = right.getDouble();   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	657	657	1	add	
11	[BUG] [BUGGY] double rval = right.getDouble(); [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); [BUGGY] double rval = right.getDouble(); [BUGGY]    if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }    [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	658	658	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); [BUGGY] [BUGGY] double rval = right.getDouble();   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }    [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	658	658	1	add	
13	[BUG] [BUGGY] if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble();   [BUGGY] if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { [BUGGY] error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result; double lval = left.getDouble(); double rval = right.getDouble();   [BUGGY] [BUGGY] if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	
15	[BUG] [BUGGY] if (!(rval >= 0 && rval < 32)) { [FE] AssertionFailedError [CONTEXT]   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   [BUGGY] if (!(rval >= 0 && rval < 32)) { [BUGGY] error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; }   [BUGGY] [BUGGY] if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	669	669	1	add	
17	[BUG] [BUGGY] int lvalInt = (int) lval; [FE] AssertionFailedError [CONTEXT] }   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  [BUGGY] int lvalInt = (int) lval; [BUGGY] if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  [BUGGY] [BUGGY] int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	675	675	1	add	
19	[BUG] [BUGGY] if (lvalInt != lval) { [FE] AssertionFailedError [CONTEXT]   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  int lvalInt = (int) lval; [BUGGY] if (lvalInt != lval) { [BUGGY] error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }  int lvalInt = (int) lval; [BUGGY] [BUGGY] if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; }  [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	676	676	1	add	
21	[BUG] [BUGGY] int rvalInt = (int) rval; [FE] AssertionFailedError [CONTEXT] return n; }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } [BUGGY] int rvalInt = (int) rval; [BUGGY] if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return n; }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } [BUGGY] [BUGGY] int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	681	681	1	add	
23	[BUG] [BUGGY] if (rvalInt != rval) { [FE] AssertionFailedError [CONTEXT] }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; [BUGGY] if (rvalInt != rval) { [BUGGY] error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; [BUGGY] [BUGGY] if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	682	682	1	add	
25	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } [BUGGY] switch (n.getType()) { [BUGGY] case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } [BUGGY] [BUGGY] switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	
27	[BUG] [BUGGY] result = lvalInt << rvalInt; [FE] AssertionFailedError [CONTEXT] } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: [BUGGY] result = lvalInt << rvalInt; [BUGGY] break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; break; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: [BUGGY] [BUGGY] result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; break; [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	689	689	1	add	
29	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; [BUGGY] break; [BUGGY] case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; break; default: [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; [BUGGY] [BUGGY] break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; break; default: [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	add	
31	[BUG] [BUGGY] result = lvalInt >> rvalInt; [FE] AssertionFailedError [CONTEXT] if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: [BUGGY] result = lvalInt >> rvalInt; [BUGGY] break; case Token.URSH:    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	692	692	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: [BUGGY] [BUGGY] result = lvalInt >> rvalInt; break; case Token.URSH:    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	692	692	1	add	
33	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; [BUGGY] break; [BUGGY] case Token.URSH:    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] error(FRACTIONAL_BITWISE_OPERAND, right); return n; } switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; [BUGGY] [BUGGY] break; case Token.URSH:    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	693	693	1	add	
35	[BUG] [BUGGY] Node newNumber = Node.newNumber(result); [FE] AssertionFailedError [CONTEXT]    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } [BUGGY] Node newNumber = Node.newNumber(result); [BUGGY] n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } [BUGGY] [BUGGY] Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	705	705	1	add	
37	[BUG] [BUGGY] n.getParent().replaceChild(n, newNumber); [FE] AssertionFailedError [CONTEXT]   result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); [BUGGY] n.getParent().replaceChild(n, newNumber); [BUGGY] reportCodeChange(); return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); [BUGGY] [BUGGY] n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	706	706	1	add	
39	[BUG] [BUGGY] reportCodeChange(); [FE] AssertionFailedError [CONTEXT]  result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); [BUGGY] reportCodeChange(); [BUGGY]  return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  result = lvalInt >>> rvalInt; break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); [BUGGY] [BUGGY] reportCodeChange(); return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	707	707	1	add	
41	[BUG] [BUGGY] return newNumber; [FE] AssertionFailedError [CONTEXT] break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); [BUGGY] return newNumber; [BUGGY] } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] break; default: throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); [BUGGY] [BUGGY] return newNumber; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldShift [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER lval negNum result resultDouble rval val int lvalInt rvalInt Node left n newNumber right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	709	709	1	add	
43	[BUG] [BUGGY] return n; [FE] AssertionFailedError [CONTEXT] if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) {  [BUGGY] return n; [BUGGY] } [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) {  [BUGGY] [BUGGY] return n; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.22360679774997896	335	335	1	add	
45	[BUG] [BUGGY] return tryFoldAssign(subtree, left, right); [FE] AssertionFailedError [CONTEXT] case Token.BITAND: case Token.BITOR: return tryFoldBitAndOr(subtree, left, right); case Token.LSH: case Token.RSH: case Token.URSH: return tryFoldShift(subtree, left, right); case Token.ASSIGN: [BUGGY] return tryFoldAssign(subtree, left, right); [BUGGY]  case Token.ADD: return tryFoldAdd(subtree, left, right); case Token.SUB: case Token.MUL: case Token.DIV: return tryFoldArithmetic(subtree, left, right); case Token.LT: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	126	126	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.BITAND: case Token.BITOR: return tryFoldBitAndOr(subtree, left, right); case Token.LSH: case Token.RSH: case Token.URSH: return tryFoldShift(subtree, left, right); case Token.ASSIGN: [BUGGY] [BUGGY] return tryFoldAssign(subtree, left, right); case Token.ADD: return tryFoldAdd(subtree, left, right); case Token.SUB: case Token.MUL: case Token.DIV: return tryFoldArithmetic(subtree, left, right); case Token.LT: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	126	126	1	add	
47	[BUG] [BUGGY] Preconditions.checkArgument(n.getType() == Token.ASSIGN); [FE] AssertionFailedError [CONTEXT] private Node tryFoldAssign(Node n, Node left, Node right) { [BUGGY] Preconditions.checkArgument(n.getType() == Token.ASSIGN); [BUGGY]   if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) {  return n; } if (NodeUtil.mayHaveSideEffects(left)) { return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	329	329	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldAssign(Node n, Node left, Node right) { [BUGGY] [BUGGY] Preconditions.checkArgument(n.getType() == Token.ASSIGN);  if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) {  return n; } if (NodeUtil.mayHaveSideEffects(left)) { return n; [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	329	329	1	add	
49	[BUG] [BUGGY] if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldAssign(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.ASSIGN);  [BUGGY] if (!right.hasChildren() ||  right.getFirstChild().getNext() != right.getLastChild()) { [BUGGY] right.getFirstChild().getNext() != right.getLastChild()) {  return n; } if (NodeUtil.mayHaveSideEffects(left)) { return n; } Node leftChild = right.getFirstChild(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	332	333	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldAssign(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.ASSIGN);  [BUGGY] [BUGGY] if (!right.hasChildren() ||  right.getFirstChild().getNext() != right.getLastChild()) { right.getFirstChild().getNext() != right.getLastChild()) {  return n; } if (NodeUtil.mayHaveSideEffects(left)) { return n; } Node leftChild = right.getFirstChild(); [CLASS] PeepholeFoldConstants [METHOD] tryFoldAssign [RETURN_TYPE] Node  Node n Node left Node right [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER negNum val int newType Node left leftChild n newNode right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.2182178902359924	332	333	1	add	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error( "JSC_DIVIDE_BY_0_ERROR", "Divide by 0"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	33	33	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error( "JSC_DIVIDE_BY_0_ERROR", "Divide by 0"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	33	33	1	add	
53	[BUG] [BUGGY] static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error( "JSC_DIVIDE_BY_0_ERROR", "Divide by 0"); [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(  "JSC_DIVIDE_BY_0_ERROR",   "Divide by 0"); [BUGGY] "JSC_DIVIDE_BY_0_ERROR", "Divide by 0"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	35	37	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(  "JSC_DIVIDE_BY_0_ERROR",   "Divide by 0"); "JSC_DIVIDE_BY_0_ERROR", "Divide by 0"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	35	37	1	add	
55	[BUG] [BUGGY] static final DiagnosticType INVALID_GETELEM_INDEX_ERROR = DiagnosticType.error(  "JSC_INVALID_GETELEM_INDEX_ERROR", [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =  DiagnosticType.error(     "JSC_INVALID_GETELEM_INDEX_ERROR", [BUGGY] DiagnosticType.error( "JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	39	41	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =  DiagnosticType.error(     "JSC_INVALID_GETELEM_INDEX_ERROR", DiagnosticType.error( "JSC_INVALID_GETELEM_INDEX_ERROR", "Array index not integer: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	39	41	1	add	
57	[BUG] [BUGGY] static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = DiagnosticType.error(  "JSC_INDEX_OUT_OF_BOUNDS_ERROR", [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =  DiagnosticType.error(     "JSC_INDEX_OUT_OF_BOUNDS_ERROR", [BUGGY] DiagnosticType.error( "JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	44	46	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =  DiagnosticType.error(     "JSC_INDEX_OUT_OF_BOUNDS_ERROR", DiagnosticType.error( "JSC_INDEX_OUT_OF_BOUNDS_ERROR", "Array index out of bounds: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	44	46	1	add	
59	[BUG] [BUGGY] static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR = DiagnosticType.error(  "JSC_NEGATING_A_NON_NUMBER_ERROR", [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =  DiagnosticType.error(     "JSC_NEGATING_A_NON_NUMBER_ERROR", [BUGGY] DiagnosticType.error( "JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	49	51	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =  DiagnosticType.error(     "JSC_NEGATING_A_NON_NUMBER_ERROR", DiagnosticType.error( "JSC_NEGATING_A_NON_NUMBER_ERROR", "Can't negate non-numeric value: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	49	51	1	add	
61	[BUG] [BUGGY] static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = DiagnosticType.error(  "JSC_BITWISE_OPERAND_OUT_OF_RANGE", [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =  DiagnosticType.error(     "JSC_BITWISE_OPERAND_OUT_OF_RANGE", [BUGGY] DiagnosticType.error( "JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	54	56	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =  DiagnosticType.error(     "JSC_BITWISE_OPERAND_OUT_OF_RANGE", DiagnosticType.error( "JSC_BITWISE_OPERAND_OUT_OF_RANGE", "Operand out of range, bitwise operation will lose information: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	54	56	1	add	
63	[BUG] [BUGGY] static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error( "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}"); [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(  "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS",   "Shift amount out of bounds: {0}"); [BUGGY] "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	59	61	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(  "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS",   "Shift amount out of bounds: {0}"); "JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS", "Shift amount out of bounds: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	59	61	1	add	
65	[BUG] [BUGGY] static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error( "JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}"); [FE] AssertionFailedError [CONTEXT] [BUGGY] static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(  "JSC_FRACTIONAL_BITWISE_OPERAND",   "Fractional bitwise operand: {0}"); [BUGGY] "JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	63	65	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(  "JSC_FRACTIONAL_BITWISE_OPERAND",   "Fractional bitwise operand: {0}"); "JSC_FRACTIONAL_BITWISE_OPERAND", "Fractional bitwise operand: {0}"); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	63	65	1	add	
67	[BUG] [BUGGY] private static final double MAX_FOLD_NUMBER = Math.pow(2, 53); [FE] AssertionFailedError [CONTEXT] [BUGGY] private static final double MAX_FOLD_NUMBER = Math.pow(2, 53); [BUGGY]  [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	67	67	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private static final double MAX_FOLD_NUMBER = Math.pow(2, 53); [CLASS] PeepholeFoldConstants  [VARIABLES] 	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	67	67	1	add	
69	[BUG] [BUGGY] switch(subtree.getType()) { [FE] AssertionFailedError [CONTEXT] Node optimizeSubtree(Node subtree) { [BUGGY] switch(subtree.getType()) { [BUGGY] case Token.CALL: return tryFoldKnownMethods(subtree); case Token.TYPEOF: return tryFoldTypeof(subtree); case Token.NOT: case Token.NEG: case Token.BITNOT: return tryFoldUnaryOperator(subtree); [CLASS] PeepholeFoldConstants [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	71	71	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node optimizeSubtree(Node subtree) { [BUGGY] [BUGGY] switch(subtree.getType()) { case Token.CALL: return tryFoldKnownMethods(subtree); case Token.TYPEOF: return tryFoldTypeof(subtree); case Token.NOT: case Token.NEG: case Token.BITNOT: return tryFoldUnaryOperator(subtree); [CLASS] PeepholeFoldConstants [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	71	71	1	add	
71	[BUG] [BUGGY] return tryFoldBinaryOperator(subtree); [FE] AssertionFailedError [CONTEXT] case Token.TYPEOF: return tryFoldTypeof(subtree); case Token.NOT: case Token.NEG: case Token.BITNOT: return tryFoldUnaryOperator(subtree); default: [BUGGY] return tryFoldBinaryOperator(subtree); [BUGGY] } } [CLASS] PeepholeFoldConstants [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	84	84	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.TYPEOF: return tryFoldTypeof(subtree); case Token.NOT: case Token.NEG: case Token.BITNOT: return tryFoldUnaryOperator(subtree); default: [BUGGY] [BUGGY] return tryFoldBinaryOperator(subtree); } } [CLASS] PeepholeFoldConstants [METHOD] optimizeSubtree [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	84	84	1	add	
73	[BUG] [BUGGY] Node left = subtree.getFirstChild(); [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { [BUGGY] Node left = subtree.getFirstChild(); [BUGGY]  if (left == null) { return subtree; } Node right = left.getNext(); if (right == null) { return subtree; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	89	89	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { [BUGGY] [BUGGY] Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext(); if (right == null) { return subtree; } [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	89	89	1	add	
75	[BUG] [BUGGY] if (left == null) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); [BUGGY] if (left == null) { [BUGGY] return subtree; } Node right = left.getNext(); if (right == null) { return subtree; }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	91	91	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); [BUGGY] [BUGGY] if (left == null) { return subtree; } Node right = left.getNext(); if (right == null) { return subtree; }   [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	91	91	1	add	
77	[BUG] [BUGGY] return subtree; [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { [BUGGY] return subtree; [BUGGY] } Node right = left.getNext(); if (right == null) { return subtree; }  switch(subtree.getType()) { [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	92	92	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { [BUGGY] [BUGGY] return subtree; } Node right = left.getNext(); if (right == null) { return subtree; }  switch(subtree.getType()) { [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	92	92	1	add	
79	[BUG] [BUGGY] Node right = left.getNext(); [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } [BUGGY] Node right = left.getNext(); [BUGGY]  if (right == null) { return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right);  [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	95	95	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } [BUGGY] [BUGGY] Node right = left.getNext(); if (right == null) { return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right);  [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	95	95	1	add	
81	[BUG] [BUGGY] if (right == null) { [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext(); [BUGGY] if (right == null) { [BUGGY] return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right); [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	97	97	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext(); [BUGGY] [BUGGY] if (right == null) { return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right); [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	97	97	1	add	
83	[BUG] [BUGGY] return subtree; [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext(); if (right == null) { [BUGGY] return subtree; [BUGGY] }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right);  [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	98	98	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext(); if (right == null) { [BUGGY] [BUGGY] return subtree; }  switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right);  [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	98	98	1	add	
85	[BUG] [BUGGY] switch(subtree.getType()) { [FE] AssertionFailedError [CONTEXT] return subtree; } Node right = left.getNext(); if (right == null) { return subtree; }  [BUGGY] switch(subtree.getType()) { [BUGGY] case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right); case Token.INSTANCEOF: return tryFoldInstanceof(subtree, left, right); case Token.AND: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	102	102	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return subtree; } Node right = left.getNext(); if (right == null) { return subtree; }  [BUGGY] [BUGGY] switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right); case Token.INSTANCEOF: return tryFoldInstanceof(subtree, left, right); case Token.AND: [CLASS] PeepholeFoldConstants [METHOD] tryFoldBinaryOperator [RETURN_TYPE] Node  Node subtree [VARIABLES] boolean DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE DIVIDE_BY_0_ERROR FRACTIONAL_BITWISE_OPERAND INDEX_OUT_OF_BOUNDS_ERROR INVALID_GETELEM_INDEX_ERROR NEGATING_A_NON_NUMBER_ERROR SHIFT_AMOUNT_OUT_OF_BOUNDS double MAX_FOLD_NUMBER Node left right subtree  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.20412414523193154	102	102	1	add	
