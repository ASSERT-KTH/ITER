bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  switch  (left.getType(),  n)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (left.getType(),  n)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType(),  n)  {	  switch    (n.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
2	[BUG]  [BUGGY]  switch  (n.getType(),  right)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType(),  right)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType(),  right)  {	  switch    (n.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
3	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	3	None	add
4	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]      ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
5	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]        ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
6	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  (n.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  (n.getType()  &  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    (n.getType()  &  Token.LSH)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
7	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
8	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  rvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
9	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
10	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
11	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
12	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
13	[BUG]  [BUGGY]  switch(left.getType())  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
14	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
15	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
16	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  left  =  left.getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
17	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]        AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	7	None	replace
18	[BUG]  [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	7	None	replace
19	[BUG]  [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  left)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
20	[BUG]  [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	7	None	replace
21	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n))  {  [CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n))  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(n))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;	8	None	replace
22	[BUG]  [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(right,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(right,  left))  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  NodeUtil.isLhs(right,  left))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	8	None	replace
23	[BUG]  [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(right,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(right,  right))  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  NodeUtil.isLhs(right,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	8	None	replace
24	[BUG]  [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(left,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(left,  right))  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  NodeUtil.isLhs(left,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	8	None	replace
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getFirstChild().getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getFirstChild().getType())  {	  switch(left.getType())    {    	compilable	  [FE]  RuntimeException  	2	2	replace
26	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  [FE]  RuntimeException  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getFirstChild().getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())  {	  switch(left.getType())    {    	compilable	  [FE]  RuntimeException  	2	2	replace
27	[BUG]  [BUGGY]  switch(left.getType(),  right)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType(),  right)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType(),  right)  {	  switch(left.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
28	[BUG]  [BUGGY]  switch(left.getType(),  left)  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType(),  left)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType(),  left)  {	  switch(left.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xffff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  &  0xffff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
30	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xffff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  0xffff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
31	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  right  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
32	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  right  =  left.getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  right  =  left.getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
33	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
34	[BUG]  [BUGGY]  switch(right.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
35	[BUG]  [BUGGY]  switch(right.getType())  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
36	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  right  =  left.getNext();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  right  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
37	[BUG]  [BUGGY]  switch(right.getType())  {  int  lvalInt  =  left.getType();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  int  lvalInt  =  left.getType();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    int  lvalInt  =  left.getType();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
38	[BUG]  [BUGGY]  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  result  =  lval  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lval  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	6	None	replace
39	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	6	None	replace
40	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
41	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
42	[BUG]  [BUGGY]  Node  lval  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  lval  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.getFirstChild();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
43	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  rvalInt  =  left.getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getNext();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
44	[BUG]  [BUGGY]  switch(right.getType(),  left)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType(),  left)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  left)  {	  switch(right.getType())    {    	non-compiled	[CE]  ')'  expected	10	None	replace
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getFirstChild().getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(right.getFirstChild().getType())  {	  switch(right.getType())    {    	compilable	  [FE]  RuntimeException  	10	2	replace
46	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  [FE]  RuntimeException  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getFirstChild().getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())  {	  switch(right.getType())    {    	compilable	  [FE]  RuntimeException  	10	2	replace
47	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left))  {  [CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left))  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  NodeUtil.isLhs(left))  {	  switch(right.getType())    {    	non-compiled	[CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;	10	None	replace
48	[BUG]  [BUGGY]  switch  (n.getType()  <  Token.LSH)  {  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  <  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  <  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	4	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch  (left.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	4	2	replace
50	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  [FE]  AssertionError  [FE]      ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	4	2	replace
51	[BUG]  [BUGGY]  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
52	[BUG]  [BUGGY]  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
53	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
54	[BUG]  [BUGGY]  switch(right.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    AssertionFailedError  <  Node>  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
55	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lval  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  case  Token.SEMI:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lval  <  <  rvalInt;  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
56	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lval  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  case  Token.CALL:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lval  <  <  rvalInt;  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
57	[BUG]  [BUGGY]  switch  (n.getType()  ==  Token.LSH)  {  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  ==  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  ==  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	4	None	replace
58	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
59	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]      ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
60	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
61	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
62	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xfff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  &  0xfff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
64	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xfff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  0xfff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xFFFF)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  &  0xFFFF)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
66	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xFFFF)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  0xFFFF)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  &  0xff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
68	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  0xff)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  0xff)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
69	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  -  1)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  -  1)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
70	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  -  1)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  -  1)  {	  switch(left.getType())    {    	compilable	  [FE]  AssertionError  	2	2	replace
71	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]        AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	7	None	replace
72	[BUG]  [BUGGY]  switch(right.getType()  &  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType()  &  DIVIDE_BY_0_ERROR)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  DIVIDE_BY_0_ERROR)  {	  switch(right.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	10	None	replace
73	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
74	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
75	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
76	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
77	[BUG]  [BUGGY]  switch(right.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {	  switch(right.getType())    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE	10	None	replace
78	[BUG]  [BUGGY]  switch(right.getType()  &  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType()  &  MAX_FOLD_NUMBER)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MAX_FOLD_NUMBER)  {	  switch(right.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	10	None	replace
79	[BUG]  [BUGGY]  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  rvalInt;  break;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
80	[BUG]  [BUGGY]  Node  lvalInt  =(Node)right.clone();  break;  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  lvalInt  =(Node)right.clone();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)right.clone();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
81	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getNext();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
82	[BUG]  [BUGGY]  switch(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {	  switch(left.getType())    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE	2	None	replace
83	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_FOLD_NUMBER)  {	  switch(left.getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	2	None	replace
84	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  switch  (n.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]    ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  switch  (n.getType()  &  Token.LSH)  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    switch  (n.getType()  &  Token.LSH)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
85	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	3	None	add
86	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        ComparisonFailure    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch  (n.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (n.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	3	None	add
87	[BUG]  [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
88	[BUG]  [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
89	[BUG]  [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  rvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
90	[BUG]  [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  rvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
91	[BUG]  [BUGGY]  switch(right.getType())  {  switch(right.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  switch(right.getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    switch(right.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
92	[BUG]  [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  rvalInt  =  right.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
93	[BUG]  [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())    {    Node  lvalInt  =  right.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	add
94	[BUG]  [BUGGY]  switch(left.getType())  {  switch(left.getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  switch(left.getType())  {  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    switch(left.getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
95	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  rvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
96	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  rvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
97	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  lvalInt  =  left.getLastChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
98	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }    [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())    {    Node  lvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
