bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	4	None	replace
2	[BUG]  [BUGGY]  switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
3	[BUG]  [BUGGY]  switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }  else  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  >  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }  else  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(n.getType()  ==  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  }  else  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	4	None	replace
5	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
6	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
7	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  duplicate  case  label  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  duplicate  case  label	5	None	replace
8	[BUG]  [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
9	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  not  a  statement	74	None	replace
10	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  not  a  statement	74	None	replace
11	[BUG]  [BUGGY]  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  not  a  statement	74	None	replace
12	[BUG]  [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
13	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	74	None	replace
14	[BUG]  [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	asPosition(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
15	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild();  [CE]  orphaned  case  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	88	None	replace
16	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	88	None	replace
17	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	88	None	replace
18	[BUG]  [BUGGY]  Node  lvalInt  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	88	None	replace
19	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	76	None	replace
20	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	76	None	replace
21	[BUG]  [BUGGY]  Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	76	None	replace
22	[BUG]  [BUGGY]  n(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	76	None	replace
23	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;  [CE]  orphaned  case  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
24	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt  >>  rvalInt;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt  >>  rvalInt;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
25	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt  >=  rvalInt;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt  >=  rvalInt;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
26	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt  <  <  rvalInt;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
27	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt!=  rvalInt;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt!=  rvalInt;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
28	[BUG]  [BUGGY]  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	62	None	replace
29	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	62	None	replace
30	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	62	None	replace
31	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext();  result  =  rvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                      ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext();  result  =  rvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getNext();  result  =  rvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	62	None	replace
32	[BUG]  [BUGGY]  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	62	None	replace
33	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  n)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  n)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  n)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR,    left)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
34	[BUG]  [BUGGY]  switch  (n.getType()  &  Token.LSH,  left)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  Token.LSH,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  Token.LSH,  left)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR,    left)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
35	[BUG]  [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  right)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  right)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  DIVIDE_BY_0_ERROR,  right)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR,    left)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
36	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR,  left)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR,    left)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
37	[BUG]  [BUGGY]  switch  (right.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  &  DIVIDE_BY_0_ERROR,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  &  DIVIDE_BY_0_ERROR,  left)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR,    left)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
38	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
39	[BUG]  [BUGGY]  n(left.getType())  {  lvalInt  <  <  rvalInt;  break;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n(left.getType())  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n(left.getType())  {  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  switch(left.getType())  {  lvalInt  -  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  lvalInt  -  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  lvalInt  -  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
41	[BUG]  [BUGGY]  switch(left.getType())  {  lvalInt  -  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  lvalInt  -  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  lvalInt  -  rvalInt;  break;  }	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
42	[BUG]  [BUGGY]  switch(left.getType(),  newNumber)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType(),  newNumber)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType(),  newNumber)  {	  switch(left.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
43	[BUG]  [BUGGY]  switch(right.getType(),  right)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType(),  right)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  right)  {	  switch(left.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
44	[BUG]  [BUGGY]  switch(rvalInt.getType())  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(rvalInt.getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(rvalInt.getType())  {	  switch(left.getType())    {    switch(left.getType())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	94	None	replace
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getLastChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getLastChild().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	26	2	replace
46	[BUG]  [BUGGY]  switch(left.getLastChild().getType())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getLastChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getLastChild().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	26	2	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(n.getFirstChild().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  AssertionError  	26	2	replace
48	[BUG]  [BUGGY]  switch(n.getFirstChild().getType())  {  [FE]  AssertionError  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getFirstChild().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  AssertionError  	26	2	replace
49	[BUG]  [BUGGY]  switch(left.getFirstChild().getType(),  right)  {  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType(),  right)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType(),  right)  {	  switch(left.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	26	None	replace
50	[BUG]  [BUGGY]  switch(left.getFirstChild().getType(),  left)  {  [CE]  ')'  expected  [FE]          RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType(),  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType(),  left)  {	  switch(left.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	26	None	replace
51	[BUG]  [BUGGY]  switch(left.getFirstChild().getType(),  left.getLastChild())  {  [CE]  ')'  expected  [FE]            RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType(),  left.getLastChild())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType(),  left.getLastChild())  {	  switch(left.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	26	None	replace
52	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	86	None	replace
53	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	86	None	replace
54	[BUG]  [BUGGY]  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  left.getFirstChild().getNext();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
55	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild().getNext();  break;  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild().getNext();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
56	[BUG]  [BUGGY]  switch  (n.getType()!=  Token.LSH)  {  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()!=  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()!=  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	48	None	replace
57	[BUG]  [BUGGY]  switch  (n.getType()  >=  Token.LSH)  {  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  >=  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  >=  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	48	None	replace
58	[BUG]  [BUGGY]  switch  (left.getType()  <  Token.LSH)  {  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  <  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  <  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	48	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  >>  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch  (n.getType()  >>  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	compilable	  [FE]  AssertionError  	48	2	replace
60	[BUG]  [BUGGY]  switch  (n.getType()  >>  Token.LSH)  {  [FE]  AssertionError  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  >>  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  >>  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	compilable	  [FE]  AssertionError  	48	2	replace
61	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  duplicate  case  label  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  duplicate  case  label	7	None	replace
62	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
63	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
64	[BUG]  [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                      ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
65	[BUG]  [BUGGY]  switch(n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]                        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
66	[BUG]  [BUGGY]  switch(n.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE	77	None	replace
67	[BUG]  [BUGGY]  switch(right.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MISSING_AMOUNT_OUT_OF_RANGE  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_AMOUNT_OUT_OF_RANGE	77	None	replace
68	[BUG]  [BUGGY]  switch(right.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	77	None	replace
69	[BUG]  [BUGGY]  switch  (left.getType(),  rvalInt)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType(),  rvalInt)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType(),  rvalInt)  {	  switch    (left.getType(),    n)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
70	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  n))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  n))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(right,  n))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	24	None	replace
71	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n,  right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(n,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	24	None	replace
72	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  left))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(right,  left))  {	  switch    (n.getType()    &    NodeUtil.isLhs(left,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	24	None	replace
73	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getFirstChild();  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
74	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getLastChild();  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	10	None	replace
75	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getLastChild();  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	10	None	replace
76	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	10	None	replace
77	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getLastChild();  break;  }	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	10	None	replace
78	[BUG]  [BUGGY]  switch  (right.getType(),  n)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType(),  n)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType(),  n)  {	  switch    (n.getType(),    right)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
79	[BUG]  [BUGGY]  switch(right.getType()  ||  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  ||  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  ||  DIVIDE_BY_0_ERROR)  {	  switch(right.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	72	None	replace
80	[BUG]  [BUGGY]  switch(right.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {	  switch(right.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	72	None	replace
81	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
82	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  +  1);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  +  1);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  +  1);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
83	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
84	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  -  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  -  1);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left  -  1);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
85	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.intValue());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.intValue());  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.intValue());	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
86	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.getType());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.getType());  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left.getType());	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
87	[BUG]  [BUGGY]  switch(right.getType(),  left  +  1)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType(),  left  +  1)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  left  +  1)  {	  switch(right.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
88	[BUG]  [BUGGY]  switch(right.getType(),  left),  result)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType(),  left),  result)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  left),  result)  {	  switch(right.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
89	[BUG]  [BUGGY]  switch(left.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  MISSING_AMOUNT_OUT_OF_RANGE  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MISSING_AMOUNT_OUT_OF_RANGE)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_AMOUNT_OUT_OF_RANGE	82	None	replace
90	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_SHIFT_NUMBER)  {  [CE]  cannot  find  symbol  MAX_SHIFT_NUMBER  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_SHIFT_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_SHIFT_NUMBER)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_SHIFT_NUMBER	82	None	replace
91	[BUG]  [BUGGY]  switch(left.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MISSING_A_NON_NUMBER_ERROR)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MISSING_A_NON_NUMBER_ERROR	82	None	replace
92	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_FOLD_NUMBER_ERROR)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	82	None	replace
93	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
94	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	51	None	replace
95	[BUG]  [BUGGY]  switch  (left.getType()  ==  Token.LSH)  {  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  ==  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  ==  Token.LSH)  {	  switch    (n.getType()    ==    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
96	[BUG]  [BUGGY]  switch  (right.getType()  ==  Token.LSH)  {  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  ==  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  ==  Token.LSH)  {	  switch    (n.getType()    ==    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	57	None	replace
97	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  >=  rvalInt;  break;	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	12	None	replace
98	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  >>  rvalInt;  break;	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	12	None	replace
99	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  +  rvalInt;  break;	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	12	None	replace
100	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  +  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  result  =  lvalInt  +  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  result  =  lvalInt  +  rvalInt;  break;  }	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	replace
101	[BUG]  [BUGGY]  switch(left.getType()  &  NodeUtil.isLhs(right))  {  [CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  NodeUtil.isLhs(right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  NodeUtil.isLhs(right))  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;	47	None	replace
102	[BUG]  [BUGGY]  switch(n.getType()  &  NodeUtil.isLhs(right))  {  [CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  NodeUtil.isLhs(right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  NodeUtil.isLhs(right))  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  method  isLhs  in  class  NodeUtil  cannot  be  applied  to  given  types;	47	None	replace
103	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(n,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(n,  left))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  NodeUtil.isLhs(n,  left))  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	47	None	replace
104	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left,  left))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  NodeUtil.isLhs(left,  left))  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	47	None	replace
105	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(n,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(n,  right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  NodeUtil.isLhs(n,  right))  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	47	None	replace
106	[BUG]  [BUGGY]  (n.getType()  &  Token.LSH)  {  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  (n.getType()  &  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	(n.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
107	[BUG]  [BUGGY]  switch(n.getType())  {  (n.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  (n.getType()  &  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  (n.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
108	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  (left.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  (left.getType()  &  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  (left.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
109	[BUG]  [BUGGY]  switch  (n.getType())  {  (n.getType()  |  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType())  {  (n.getType()  |  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType())  {  (n.getType()  |  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
110	[BUG]  [BUGGY]  int  lvalInt  =  left.getType();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	int  lvalInt  =  left.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  orphaned  case	37	None	replace
111	[BUG]  [BUGGY]  switch(left.getType())  {  int  lvalInt  =  right.getType();  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  int  lvalInt  =  right.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  int  lvalInt  =  right.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
112	[BUG]  [BUGGY]  int  lvalInt  =  right.getType();  [CE]  orphaned  case  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  int  lvalInt  =  right.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	int  lvalInt  =  right.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  orphaned  case	37	None	replace
113	[BUG]  [BUGGY]  Integer  lvalInt  =  left.getType();  [CE]  orphaned  case  [FE]                          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Integer  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Integer  lvalInt  =  left.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  orphaned  case	37	None	replace
114	[BUG]  [BUGGY]  lvalInt  =  left.getType();  [CE]  orphaned  case  [FE]                            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  left.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  orphaned  case	37	None	replace
115	[BUG]  [BUGGY]  switch(left.getType())  {  int  lvalInt  =  left.getType();  [CE]  case,  default,  or  '}'  expected  [FE]                              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  int  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  int  lvalInt  =  left.getType();	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
116	[BUG]  [BUGGY]  switch  (left.getType()  >  Token.LSH)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  >  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  >  Token.LSH)  {	  switch    (left.getType()    &    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	50	None	replace
117	[BUG]  [BUGGY]  switch(lvalInt.getType())  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(lvalInt.getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(lvalInt.getType())  {	  switch(right.getType())    {    switch(right.getType())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	91	None	replace
118	[BUG]  [BUGGY]  Switch(left.getType())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {	  switch(right.getType())    {    switch(right.getType())    {    	non-compiled	[CE]  ';'  expected	91	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(right.getType()  &  0xfff)  {	  switch(right.getType())    {    switch(right.getType())    {    	compilable	  [FE]  AssertionError  	91	2	replace
120	[BUG]  [BUGGY]  switch(right.getType()  &  0xfff)  {  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  0xfff)  {	  switch(right.getType())    {    switch(right.getType())    {    	compilable	  [FE]  AssertionError  	91	2	replace
121	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(right,  right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(right,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(right,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	23	None	replace
122	[BUG]  [BUGGY]  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	3	None	replace
123	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	3	None	replace
124	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >=  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	3	None	replace
125	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getLastChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getLastChild();  break;	  Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	81	None	replace
126	[BUG]  [BUGGY]  Node  lvalInt  =  right.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  right.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  right.getFirstChild().getNext();  break;	  Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	81	None	replace
127	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext()  +  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getNext()  +  1;  break;	  Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	81	None	replace
128	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getNext();	  Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	81	None	replace
129	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	8	None	replace
130	[BUG]  [BUGGY]  Node  rvalInt  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getLastChild();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	8	None	replace
131	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	8	None	replace
132	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	8	None	replace
133	[BUG]  [BUGGY]  result  =  lval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lval  <  <  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lval  <  <  1;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
134	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  rval;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	38	None	replace
135	[BUG]  [BUGGY]  result  =  lval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lval  <  <  4;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lval  <  <  4;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
136	[BUG]  [BUGGY]  result  =  lval  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lval  <  <  2;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lval  <  <  2;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
137	[BUG]  [BUGGY]  result  =  lval  <  <  24;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lval  <  <  24;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lval  <  <  24;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
138	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
139	[BUG]  [BUGGY]  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
140	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  >  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
141	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	59	None	replace
142	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
143	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  lvalInt;  break;  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
144	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	89	None	replace
145	[BUG]  [BUGGY]  Node  rvalInt  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	89	None	replace
146	[BUG]  [BUGGY]  switch  (left.getType()  |  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  |  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  |  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	71	None	replace
147	[BUG]  [BUGGY]  switch  (left.getType()  ||  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  ||  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  ||  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	71	None	replace
148	[BUG]  [BUGGY]  switch  (left.getType()  >  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  >  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  >  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	71	None	replace
149	[BUG]  [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left;  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  ')'  expected	73	None	replace
150	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getFirstChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
151	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getLastChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	11	None	replace
152	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getLastChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	11	None	replace
153	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getFirstChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	11	None	replace
154	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  left.getLastChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  |  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
156	[BUG]  [BUGGY]  switch(left.getType()  |  0xff)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  |  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  +  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
158	[BUG]  [BUGGY]  switch(left.getType()  +  0xff)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  -  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
160	[BUG]  [BUGGY]  switch(left.getType()  -  0xff)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  -  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionError  	68	2	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(n.getType()  &  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
162	[BUG]  [BUGGY]  switch(n.getType()  &  0xff)  {  [FE]  AssertionFailedError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  0xff)  {	  switch(left.getType()    &    0xff)    {    	compilable	  [FE]  AssertionFailedError  	68	1	replace
163	[BUG]  [BUGGY]  switch(left.getType()  ||  0xff)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  0xff)  {	  switch(left.getType()    &    0xff)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	68	None	replace
164	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	14	None	replace
165	[BUG]  [BUGGY]  Node  lvalInt  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getNext();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	14	None	replace
166	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
167	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	25	None	add
168	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  switch(left.getFirstChild().getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  switch(left.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    switch(left.getFirstChild().getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
169	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    int  lvalInt  =  left.getFirstChild().getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
170	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
171	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    int  lvalInt  =  left.getFirstChild().getType();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
172	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
173	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild().getNext();  break;	  Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	41	None	replace
174	[BUG]  [BUGGY]  Node  rvalInt  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.removeFirstChild();  break;	  Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	41	None	replace
175	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
176	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
177	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  switch(left.getType()  &  0xffff)  {  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  switch(left.getType()  &  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    switch(left.getType()  &  0xffff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
178	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
179	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  int  lvalInt  =  left.getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  int  lvalInt  =  left.getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    int  lvalInt  =  left.getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
180	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
181	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
182	[BUG]  [BUGGY]  Node  rvalInt  =  right.getNext();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  right.getNext();  break;	  Node    rvalInt    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
183	[BUG]  [BUGGY]  Node  rvalInt  =  left.getNext()  +  1;  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getNext()  +  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getNext()  +  1;  break;	  Node    rvalInt    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
184	[BUG]  [BUGGY]  Node  rvalInt  =  left.getParent();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getParent();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getParent();  break;	  Node    rvalInt    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
185	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
186	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
187	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
188	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  int  lvalInt  =  left.getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  int  lvalInt  =  left.getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    int  lvalInt  =  left.getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
189	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
190	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
191	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
192	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	87	None	replace
193	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	15	None	replace
194	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.LSH)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()  ==  Token.LSH)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
195	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.LSH)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()!=  Token.LSH)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
196	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()  ==  Token.NAME)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
197	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	61	None	replace
198	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	61	None	replace
199	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
200	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	49	None	add
201	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  int  lvalInt  =  left.getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  int  lvalInt  =  left.getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    int  lvalInt  =  left.getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
202	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
203	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
204	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
205	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >>  rvalInt;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  >>  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
206	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >=  rvalInt;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  >=  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
207	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  <  <  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
208	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt!=  rvalInt;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt!=  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
209	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lval  <  <  1;  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lval  <  <  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lval  <  <  1;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
210	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
211	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
212	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
213	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  int  lvalInt  =  left.getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  int  lvalInt  =  left.getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    int  lvalInt  =  left.getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
214	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
215	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
216	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
217	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	18	None	replace
218	[BUG]  [BUGGY]  switch  (n.getType()  ==  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  incomparable  types:  int  and  DiagnosticType  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  ==  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  ==  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  incomparable  types:  int  and  DiagnosticType	18	None	replace
219	[BUG]  [BUGGY]  switch  (n.getType()  <  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  <  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  <  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	18	None	replace
220	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR,  left)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR,  left)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
221	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  Token.NAME)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
222	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
223	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
224	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
225	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  int  lvalInt  =  left.getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  int  lvalInt  =  left.getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    int  lvalInt  =  left.getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
226	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
227	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
228	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
229	[BUG]  [BUGGY]  Node  lvalInt  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
230	[BUG]  [BUGGY]  Node  lvalInt  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  right.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  right.getLastChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
231	[BUG]  [BUGGY]  lvalInt  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	93	None	replace
232	[BUG]  [BUGGY]  Node  lval  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.getLastChild();  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
233	[BUG]  [BUGGY]  Node  lval  =  left.getNext();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.getNext();  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
234	[BUG]  [BUGGY]  Node  lval  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  right.getFirstChild();  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
235	[BUG]  [BUGGY]  Node  lval  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  right.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  right.getLastChild();  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
236	[BUG]  [BUGGY]  Node  lval  =  left.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.getLastChild();	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
237	[BUG]  [BUGGY]  switch(left.getType()  ||  0xFFFF)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	66	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  |  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionError  	66	2	replace
239	[BUG]  [BUGGY]  switch(left.getType()  |  0xFFFF)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  |  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionError  	66	2	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(n.getType()  &  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
241	[BUG]  [BUGGY]  switch(n.getType()  &  0xFFFF)  {  [FE]  AssertionFailedError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  +  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionError  	66	2	replace
243	[BUG]  [BUGGY]  switch(left.getType()  +  0xFFFF)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	compilable	  [FE]  AssertionError  	66	2	replace
244	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild();	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	90	None	replace
245	[BUG]  [BUGGY]  Node  rvalInt  =  left.getLastChild();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getLastChild();	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	90	None	replace
246	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	90	None	replace
247	[BUG]  [BUGGY]  Node  rvalInt  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	90	None	replace
248	[BUG]  [BUGGY]  switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
249	[BUG]  [BUGGY]  switch(right.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
250	[BUG]  [BUGGY]  switch(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
251	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().intValue();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().intValue();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().intValue();  break;	  Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	40	None	replace
252	[BUG]  [BUGGY]  Node  rvalInt  =  right.getLastChild();  break;  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  right.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  right.getLastChild();  break;	  switch(right.getType())    {    Node    rvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
253	[BUG]  [BUGGY]  rvalInt  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  rvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	rvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    rvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
254	[BUG]  [BUGGY]  lvalInt  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  left.getLastChild();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getLastChild();    break;    	non-compiled	[CE]  orphaned  case	97	None	replace
255	[BUG]  [BUGGY]  Node  lvalInt  =(Node)n.clone();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)n.clone();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)n.clone();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
256	[BUG]  [BUGGY]  Node  lvalInt  =(Node)left.clone();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)left.clone();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)left.clone();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
257	[BUG]  [BUGGY]  Node  lvalInt  =(Node)newNumber.clone();  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)newNumber.clone();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)newNumber.clone();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
258	[BUG]  [BUGGY]  Node  lvalInt  =  left.clone();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.clone();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.clone();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
259	[BUG]  [BUGGY]  Node  rvalInt  =(Node)right.clone();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =(Node)right.clone();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =(Node)right.clone();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
260	[BUG]  [BUGGY]  result  =  lvalInt  <  <  len;  break;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  len;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  len;  break;	  switch(right.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	34	None	replace
261	[BUG]  [BUGGY]  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [CE]  orphaned  case  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	85	None	replace
262	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	85	None	replace
263	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	replace
264	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                      ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getLastChild();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	9	None	replace
265	[BUG]  [BUGGY]  switch  (n.getType()  |  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  INVALID_GETELEM_INDEX_ERROR)  {	  switch    (n.getType()    &    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	20	None	replace
266	[BUG]  [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR,  left)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR,  left)  {	  switch    (n.getType()    &    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
267	[BUG]  [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR  ||  left.getType()  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR  ||  left.getType()  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  INVALID_GETELEM_INDEX_ERROR  ||  left.getType()  ==  INVALID_GETELEM_INDEX_ERROR)  {	  switch    (n.getType()    &    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	20	None	replace
268	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  1;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
269	[BUG]  [BUGGY]  result  =  lvalInt  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  4;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  4;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
270	[BUG]  [BUGGY]  result  =  lvalInt  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  <  <  2;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  <  <  2;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
271	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getNext();	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  orphaned  case	36	None	replace
272	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  right.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  right.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  right.getNext();	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
273	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
274	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }  [CE]  case,  default,  or  '}'  expected  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  }	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
275	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]                          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getNext();	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	36	None	replace
276	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getNext();  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  right.getNext();	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	36	None	replace
277	[BUG]  [BUGGY]  Node  right  =  left.getNext();  break;  [CE]  orphaned  case  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
278	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  right.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  right.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  right.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
279	[BUG]  [BUGGY]  Node  left  =  left.getNext();  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	32	None	replace
280	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
281	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.FUNCTION)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
282	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.VAR)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.VAR)  {  switch(right.getType())  {  Node  right  =  left.getNext();  break;  }	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
283	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	53	None	replace
284	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	53	None	replace
285	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  right.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	53	None	replace
286	[BUG]  [BUGGY]  Node  right  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	53	None	replace
287	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	96	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  |  0xffff)  {	  switch(left.getType()    &    0xffff)    {    	compilable	  [FE]  AssertionError  	30	2	replace
289	[BUG]  [BUGGY]  switch(left.getType()  |  0xffff)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  |  0xffff)  {	  switch(left.getType()    &    0xffff)    {    	compilable	  [FE]  AssertionError  	30	2	replace
290	[BUG]  [BUGGY]  switch(left.getType()  ||  0xffff)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  0xffff)  {	  switch(left.getType()    &    0xffff)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	30	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  +  0xffff)  {	  switch(left.getType()    &    0xffff)    {    	compilable	  [FE]  AssertionError  	30	2	replace
292	[BUG]  [BUGGY]  switch(left.getType()  +  0xffff)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xffff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  0xffff)  {	  switch(left.getType()    &    0xffff)    {    	compilable	  [FE]  AssertionError  	30	2	replace
293	[BUG]  [BUGGY]  Node  left  =  left.getNext();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	75	None	replace
294	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	75	None	replace
295	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  left.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	75	None	replace
296	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  left  =  left.getNext();  }  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  left  =  left.getNext();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  Node  left  =  left.getNext();  }	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  orphaned  case	75	None	replace
297	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  n.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  n.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  n.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	75	None	replace
298	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	33	None	replace
299	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  right.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  right.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	33	None	replace
300	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	33	None	replace
301	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getLastChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	33	None	replace
302	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  right.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	33	None	replace
303	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  right  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
304	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  switch(right.getFirstChild().getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  switch(right.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    switch(right.getFirstChild().getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
305	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
306	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    int  lvalInt  =  left.getFirstChild().getType();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
307	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  right  =  left.getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
308	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  change(right.getFirstChild().getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]              RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  change(right.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    change(right.getFirstChild().getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
309	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  [CE]  case,  default,  or  '}'  expected  [FE]                RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  int  lvalInt  =  left.getFirstChild().getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    int  lvalInt  =  left.getFirstChild().getType();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
310	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	95	None	replace
311	[BUG]  [BUGGY]  switch(left.getType()  |  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  |  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	83	None	replace
312	[BUG]  [BUGGY]  switch(n.getType()  &  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	83	None	replace
313	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER  ||  left.getType()  >  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_FOLD_NUMBER  ||  left.getType()  >  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_FOLD_NUMBER  ||  left.getType()  >  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	83	None	replace
314	[BUG]  [BUGGY]  switch(left.getType()  +  MAX_FOLD_NUMBER)  {  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  possible  loss  of  precision	83	None	replace
315	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  break;  [CE]  orphaned  case  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getFirstChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
316	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
317	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  break;  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
318	[BUG]  [BUGGY]  Node  right  =  left.getLastChild();  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getLastChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	31	None	replace
319	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
320	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch  (n.getType()  |  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    switch    (n.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	84	1	replace
321	[BUG]  [BUGGY]  switch  (n.getType()  |  Token.LSH)  {  [FE]  AssertionError  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    switch    (n.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	84	1	replace
322	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
323	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
324	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  result  =  rvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild().getNext();  result  =  rvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild().getNext();  result  =  rvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
325	[BUG]  [BUGGY]  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
326	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
327	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getLastChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(right.getLastChild().getType())  {	  switch(right.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	46	2	replace
328	[BUG]  [BUGGY]  switch(right.getLastChild().getType())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getLastChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getLastChild().getType())  {	  switch(right.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	46	2	replace
329	[BUG]  [BUGGY]  switch(right.getFirstChild().getType(),  left)  {  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType(),  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType(),  left)  {	  switch(right.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	46	None	replace
330	[BUG]  [BUGGY]  switch(left.getType(),  rval)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType(),  rval)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType(),  rval)  {	  switch(left.getType(),    right)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
331	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild();  result  =  rvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	58	None	replace
332	[BUG]  [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	58	None	replace
333	[BUG]  [BUGGY]  Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getLastChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	58	None	replace
334	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	58	None	replace
335	[BUG]  [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  NodeUtil.isLhs(n,  left))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  NodeUtil.isLhs(n,  left))  {	  switch    (left.getType()    &    NodeUtil.isLhs(n))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	21	None	replace
336	[BUG]  [BUGGY]  lvalInt  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  1;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
337	[BUG]  [BUGGY]  lvalInt  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  2;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  2;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
338	[BUG]  [BUGGY]  lvalInt  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  4;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  4;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
339	[BUG]  [BUGGY]  lvalInt  <  <  len;  break;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  len;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  len;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
340	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	16	None	replace
341	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.VAR)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.VAR)  {  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	16	None	replace
342	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getNext();  break;  }	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	16	None	replace
343	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getNext();  break;	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	16	None	replace
344	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  |  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionError  	64	2	replace
345	[BUG]  [BUGGY]  switch(left.getType()  |  0xfff)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  |  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  |  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionError  	64	2	replace
346	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  +  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionError  	64	2	replace
347	[BUG]  [BUGGY]  switch(left.getType()  +  0xfff)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionError  	64	2	replace
348	[BUG]  [BUGGY]  switch(left.getType()  ||  0xfff)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	64	None	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(n.getType()  &  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
350	[BUG]  [BUGGY]  switch(n.getType()  &  0xfff)  {  [FE]  AssertionFailedError  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType()  &  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	compilable	  [FE]  AssertionFailedError  	64	1	replace
351	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
352	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
353	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  left  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
354	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  left  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
355	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
356	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
357	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
358	[BUG]  [BUGGY]  n(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  ';'  expected	98	None	replace
359	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <  Node>  left  =  left.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	54	None	replace
360	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getLastChild();  [CE]  orphaned  case  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <  Node>  left  =  left.getLastChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	54	None	replace
361	[BUG]  [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  asPosition(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	asPosition(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	54	None	replace
362	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	54	None	replace
363	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <  Node>  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <  Node>  left  =  left.getNext();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	54	None	replace
364	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	54	None	replace
365	[BUG]  [BUGGY]  switch(right.getType()  |  MAX_FOLD_NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  |  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  |  MAX_FOLD_NUMBER)  {	  switch(right.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	78	None	replace
366	[BUG]  [BUGGY]  switch(right.getType()  +  MAX_FOLD_NUMBER)  {  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  +  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  +  MAX_FOLD_NUMBER)  {	  switch(right.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
367	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	62	None	replace
368	[BUG]  [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  not  a  statement	62	None	replace
369	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	62	None	replace
370	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                      ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	62	None	replace
371	[BUG]  [BUGGY]  switch(left.getType()  <  MAX_FOLD_NUMBER)  {  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  <  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  <  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  incompatible  types	83	None	replace
372	[BUG]  [BUGGY]  switch(left.getType()  >  MAX_FOLD_NUMBER)  {  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  >  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  >  MAX_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  incompatible  types	83	None	replace
373	[BUG]  [BUGGY]  switch(left.getType()  &  NUMBER_NUMBER)  {  [CE]  cannot  find  symbol  NUMBER_NUMBER  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  NUMBER_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  NUMBER_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_NUMBER	83	None	replace
374	[BUG]  [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  &  NodeUtil.isLhs(right,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(right,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	23	None	replace
375	[BUG]  [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(left,  right))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(left,  right))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  &  NodeUtil.isLhs(left,  right))  {	  switch    (n.getType()    &    NodeUtil.isLhs(right,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	23	None	replace
376	[BUG]  [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  n))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  n))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  &  NodeUtil.isLhs(right,  n))  {	  switch    (n.getType()    &    NodeUtil.isLhs(right,    right))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	23	None	replace
377	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	45	None	add
378	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  right  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
379	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  right  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
380	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  right  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  right  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
381	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	59	None	replace
382	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	59	None	replace
383	[BUG]  [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  not  a  statement	59	None	replace
384	[BUG]  [BUGGY]  if(left!=  null)  {  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left!=  null)  {  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left!=  null)  {  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	76	None	replace
385	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	76	None	replace
386	[BUG]  [BUGGY]  switch(right.getType()  &  MAX_FLAG)  {  [CE]  cannot  find  symbol  MAX_FLAG  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MAX_FLAG)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MAX_FLAG)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FLAG	77	None	replace
387	[BUG]  [BUGGY]  switch(right.getType()  &  MAX_FOLD)  {  [CE]  cannot  find  symbol  MAX_FOLD  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MAX_FOLD)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MAX_FOLD)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD	77	None	replace
388	[BUG]  [BUGGY]  switch(left.getType()  &  SHIFT_AMOUNT)  {  [CE]  cannot  find  symbol  SHIFT_AMOUNT  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  SHIFT_AMOUNT)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  SHIFT_AMOUNT)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_AMOUNT	77	None	replace
389	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
390	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getNext();  break;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  right.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  ';'  expected	32	None	replace
391	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getNext();  break;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  left.getNext();  break;	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  ';'  expected	32	None	replace
392	[BUG]  [BUGGY]  switch  (left.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  INVALID_GETELEM_INDEX_ERROR)  {	  switch    (n.getType()    &    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	20	None	replace
393	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt  <  <  rval;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt  <  <  rval;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
394	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalInt  >>  rval;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalInt  >>  rval;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalInt  >>  rval;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
395	[BUG]  [BUGGY]  case  Token.CALL:  result  =  lvalAfter  <  rvalInt;  break;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.CALL:  result  =  lvalAfter  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.CALL:  result  =  lvalAfter  <  rvalInt;  break;	  case    Token.CALL:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	56	None	replace
396	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	98	None	replace
397	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	98	None	replace
398	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	98	None	replace
399	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
400	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  switch  (left.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  switch  (left.getType()  &  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    switch  (left.getType()  &  Token.LSH)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
401	[BUG]  [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch    (left.getType()    &    Token.LSH)    {    Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	49	None	add
402	[BUG]  [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	5	None	replace
403	[BUG]  [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >>  rvalInt;  break;  [CE]  duplicate  case  label  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  case  Token.LSH:  result  =  lvalInt  >>  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  duplicate  case  label	3	None	replace
404	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	3	None	replace
405	[BUG]  [BUGGY]  switch  (n.getType()  |  NEGATING_A_NON_NUMBER_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  NEGATING_A_NON_NUMBER_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  NEGATING_A_NON_NUMBER_ERROR)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
406	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  |  left)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  |  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR  |  left)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
407	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	13	None	replace
408	[BUG]  [BUGGY]  Switch(right.getType())  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(right.getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(right.getType())  {	  switch(left.getType())    {    switch(left.getType())    {    	non-compiled	[CE]  ';'  expected	94	None	replace
409	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  int  lvalInt  =  left.getType();  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  int  lvalInt  =  left.getType();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  int  lvalInt  =  left.getType();  }	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
410	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  lvalInt  =  left.getType();  }  [CE]  case,  default,  or  '}'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  lvalInt  =  left.getType();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  lvalInt  =  left.getType();  }	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
411	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  lvalInt  =  left.getType();  }  [CE]  case,  default,  or  '}'  expected  [FE]                        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  lvalInt  =  left.getType();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(left.getType())  {  lvalInt  =  left.getType();  }	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  case,  default,  or  '}'  expected	37	None	replace
412	[BUG]  [BUGGY]  assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  ';'  expected	74	None	replace
413	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  not  a  statement	74	None	replace
414	[BUG]  [BUGGY]  Node  lval  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.removeFirstChild();  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
415	[BUG]  [BUGGY]  Node  lval  =  left.replaceChild(n,  newNumber);  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lval  =  left.replaceChild(n,  newNumber);  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lval  =  left.replaceChild(n,  newNumber);  break;	  Node    lval    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	42	None	replace
416	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	31	None	replace
417	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	85	None	replace
418	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.LSH:  result  =  lval  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    case    Token.LSH:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	85	None	replace
419	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
420	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
421	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
422	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
423	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  left  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
424	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt  [Delete]  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	39	None	replace
425	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  break;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  left.getNext();  break;	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  ';'  expected	16	None	replace
426	[BUG]  [BUGGY]  switch(left.getType())  {  n  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  n  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  n  =  left.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  case,  default,  or  '}'  expected	75	None	replace
427	[BUG]  [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  case,  default,  or  '}'  expected	52	None	replace
428	[BUG]  [BUGGY]  assertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  assertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	assertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	52	None	replace
429	[BUG]  [BUGGY]  assertionFailedError  =  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  assertionFailedError  =  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	assertionFailedError  =  error(FRACTIONAL_BITWISE_OPERAND,  left);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  orphaned  case	52	None	replace
430	[BUG]  [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType()  &  Token.LSH)  {  Node  rvalInt  =  left.getFirstChild();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	8	None	replace
431	[BUG]  [BUGGY]  switch(left.getType()  <  0xFFFF)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  <  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  <  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	non-compiled	[CE]  incompatible  types	66	None	replace
432	[BUG]  [BUGGY]  switch(left.getType()  >  0xFFFF)  {  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  >  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  >  0xFFFF)  {	  switch(left.getType()    &    0xFFFF)    {    	non-compiled	[CE]  incompatible  types	66	None	replace
433	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  (right.getType()  &  Token.LSH)  {  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  (right.getType()  &  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  (right.getType()  &  Token.LSH)  {	  switch    (n.getType()    &    Token.LSH)    {    (n.getType()    &    Token.LSH)    {    	non-compiled	[CE]  case,  default,  or  '}'  expected	6	None	replace
434	[BUG]  [BUGGY]  Switch(left.getType(),  right)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType(),  right)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType(),  right)  {	  switch    (n.getType(),    right)    {    	non-compiled	[CE]  ';'  expected	2	None	replace
435	[BUG]  [BUGGY]  switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
436	[BUG]  [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
437	[BUG]  [BUGGY]  switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
438	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()!=  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()!=  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()!=  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	71	None	replace
439	[BUG]  [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left),  left)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  NodeUtil.isLhs(left),  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  NodeUtil.isLhs(left),  left)  {	  switch(right.getType()    &    NodeUtil.isLhs(left))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
440	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  left  =  left.getFirstChild();  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
441	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  left  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  left  =  left.getFirstChild();  break;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
442	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
443	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  int  lvalInt  =  left.getType();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  int  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    int  lvalInt  =  left.getType();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
444	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  lval  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  lval  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  lval  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
445	[BUG]  [BUGGY]  lvalInt  <  <  rvalInt  +  1;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  rvalInt  +  1;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  rvalInt  +  1;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
446	[BUG]  [BUGGY]  lvalInt  +  rvalInt;  break;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  +  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  +  rvalInt;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  not  a  statement	79	None	replace
447	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	90	None	replace
448	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  }	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	90	None	replace
449	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  left.getFirstChild();  }  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  left.getFirstChild();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  left.getFirstChild();  }	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	90	None	replace
450	[BUG]  [BUGGY]  switch  (left.getType()!=  Token.LSH)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()!=  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()!=  Token.LSH)  {	  switch    (left.getType()    &    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	50	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  >>  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch  (left.getType()  >>  Token.LSH)  {	  switch    (left.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	50	2	replace
452	[BUG]  [BUGGY]  switch  (left.getType()  >>  Token.LSH)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  >>  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  >>  Token.LSH)  {	  switch    (left.getType()    &    Token.LSH)    {    	compilable	  [FE]  AssertionError  	50	2	replace
453	[BUG]  [BUGGY]  switch  (left.getType()  >=  Token.LSH)  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  >=  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  >=  Token.LSH)  {	  switch    (left.getType()    &    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	50	None	replace
454	[BUG]  [BUGGY]  switch(right.getType()  &  MAX_GETELEM_INDEX_ERROR)  {  [CE]  cannot  find  symbol  MAX_GETELEM_INDEX_ERROR  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MAX_GETELEM_INDEX_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MAX_GETELEM_INDEX_ERROR)  {	  switch(right.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_GETELEM_INDEX_ERROR	72	None	replace
455	[BUG]  [BUGGY]  Switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
456	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  right.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  right.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  right.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	18	None	replace
457	[BUG]  [BUGGY]  switch  (n.getType()  >>  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  >>  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  >>  DIVIDE_BY_0_ERROR  ||  left.getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    &    DIVIDE_BY_0_ERROR    ||    left.getType()    ==    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	replace
458	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
459	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
460	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
461	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
462	[BUG]  [BUGGY]  Node  lvalInt  =  left.removeFirstChild();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.removeFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.removeFirstChild();  break;	  Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	40	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getNext().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getNext().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  AssertionError  	26	2	replace
464	[BUG]  [BUGGY]  switch(left.getNext().getType())  {  [FE]  AssertionError  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getNext().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getNext().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  AssertionError  	26	2	replace
465	[BUG]  [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  left))  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  &  NodeUtil.isLhs(right,  left))  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  &  NodeUtil.isLhs(right,  left))  {	  switch    (n.getType()    &    NodeUtil.isLhs(right,    left))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	22	None	replace
466	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  }	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	87	None	replace
467	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_GOLD_NUMBER)  {  [CE]  cannot  find  symbol  MAX_GOLD_NUMBER  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_GOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_GOLD_NUMBER)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_GOLD_NUMBER	82	None	replace
468	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_FLAG)  {  [CE]  cannot  find  symbol  MAX_FLAG  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_FLAG)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_FLAG)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FLAG	82	None	replace
469	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_FOLD)  {  [CE]  cannot  find  symbol  MAX_FOLD  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_FOLD)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_FOLD)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD	82	None	replace
470	[BUG]  [BUGGY]  switch(left.getType()  &  MAX_LSH)  {  [CE]  cannot  find  symbol  MAX_LSH  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  MAX_LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  MAX_LSH)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_LSH	82	None	replace
471	[BUG]  [BUGGY]  switch(right.getType()  &  MAX_FOLD_NUMBER,  left)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  MAX_FOLD_NUMBER,  left)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  MAX_FOLD_NUMBER,  left)  {	  switch(right.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
472	[BUG]  [BUGGY]  switch(right.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }	  switch(right.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
473	[BUG]  [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  not  a  statement	58	None	replace
474	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	58	None	replace
475	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
476	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    AssertionError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
477	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
478	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
479	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getNext();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  left.getNext();	  switch(right.getType())    {    Node    right    =    left.getNext();    	non-compiled	[CE]  ';'  expected	36	None	replace
480	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	88	None	replace
481	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	86	None	replace
482	[BUG]  [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  not  a  statement	86	None	replace
483	[BUG]  [BUGGY]  Node  lvalInt  =(Node)right.getNext();  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)right.getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)right.getNext();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
484	[BUG]  [BUGGY]  Node  lvalInt  =(Node)right.cloneTree();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =(Node)right.cloneTree();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =(Node)right.cloneTree();  break;	  Node    lvalInt    =(Node)right.clone();    break;    	non-compiled	[CE]  orphaned  case	80	None	replace
485	[BUG]  [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalAfter  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalAfter  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	38	None	replace
486	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  right.getFirstChild();  break;  }	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	89	None	replace
487	[BUG]  [BUGGY]  switch(right.getType(),  left),  rvalInt)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType(),  left),  rvalInt)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  left),  rvalInt)  {	  switch(right.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
488	[BUG]  [BUGGY]  switch(right.getType(),  left),  lvalInt)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType(),  left),  lvalInt)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType(),  left),  lvalInt)  {	  switch(right.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
489	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	9	None	replace
490	[BUG]  [BUGGY]  assertionFailedError(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  assertionFailedError(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	assertionFailedError(right.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  ';'  expected	51	None	replace
491	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	53	None	replace
492	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	53	None	replace
493	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  lvalInt  =  left.getFirstChild();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
494	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getNext();  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  left  =  left.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  left  =  left.getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
495	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  int  lvalInt  =  left.getType();  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  int  lvalInt  =  left.getType();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    int  lvalInt  =  left.getType();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
496	[BUG]  [BUGGY]  switch(left.getType()  >  0xfff)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  >  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  >  0xfff)  {	  switch(left.getType()    &    0xfff)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
497	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  right.getFirstChild();  break;  }  [CE]  orphaned  case  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  right.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  Node  rvalInt  =  right.getFirstChild();  break;  }	  switch(right.getType())    {    Node    rvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  orphaned  case	92	None	replace
498	[BUG]  [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	n.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  not  a  statement	60	None	replace
499	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  >  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	60	None	replace
500	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	60	None	replace
501	[BUG]  [BUGGY]  switch(left.getType())  ==  switch(right.getType())  {  [CE]  '{'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  ==  switch(right.getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  ==  switch(right.getType())  {	  switch(right.getType())    {    switch(right.getType())    {    	non-compiled	[CE]  '{'  expected	91	None	replace
502	[BUG]  [BUGGY]  switch  (right.getType()  <  Token.LSH)  {  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (right.getType()  <  Token.LSH)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (right.getType()  <  Token.LSH)  {	  switch    (n.getType()    <    Token.LSH)    {    	non-compiled	[CE]  incompatible  types	48	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  1)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getType()  +  1)  {	  switch(left.getType()    -    1)    {    	compilable	  [FE]  AssertionError  	70	2	replace
504	[BUG]  [BUGGY]  switch(left.getType()  +  1)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  +  1)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  +  1)  {	  switch(left.getType()    -    1)    {    	compilable	  [FE]  AssertionError  	70	2	replace
505	[BUG]  [BUGGY]  AssertionFailedError  <=  error(REACHABLE_BITWISE_OPERAND,  left);  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <=  error(REACHABLE_BITWISE_OPERAND,  left);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <=  error(REACHABLE_BITWISE_OPERAND,  left);	  switch(left.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  not  a  statement	73	None	replace
506	[BUG]  [BUGGY]  Switch(left.getFirstChild().getType())  {  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getFirstChild().getType())  {	  switch(right.getFirstChild().getType())    {    	non-compiled	[CE]  ';'  expected	46	None	replace
507	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  result  =  lvalInt  -  rvalInt;  break;  }	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	replace
508	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  break;  }	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	95	None	replace
509	[BUG]  [BUGGY]  switch(left.getType()  <  0xff)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  <  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  <  0xff)  {	  switch(left.getType()    &    0xff)    {    	non-compiled	[CE]  incompatible  types	68	None	replace
510	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  right.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	33	None	replace
511	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  right  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  right  =  left.getFirstChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	33	None	replace
512	[BUG]  [BUGGY]  Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  left.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	54	None	replace
513	[BUG]  [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	61	None	replace
514	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  <  <  rval;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  <  <  rval;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
515	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >>  rval;  break;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  >>  rval;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  >>  rval;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
516	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalAfter  <  rvalInt;  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalAfter  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalAfter  <  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
517	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	60	None	replace
518	[BUG]  [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	60	None	replace
519	[BUG]  [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }	  switch(right.getType())    {    Node    lvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	93	None	replace
520	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getNext();  break;  }	  switch(right.getType())    {    Node    right    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	32	None	replace
521	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  switch(left.getType()  -  1)  {  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  switch(left.getType()  -  1)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    switch(left.getType()  -  1)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
522	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
523	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  rvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
524	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  n  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    n  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
525	[BUG]  [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getLastChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  -  1)  {  Node  lvalInt  =  left.getLastChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    -    1)    {    Node  lvalInt  =  left.getLastChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	69	None	add
526	[BUG]  [BUGGY]  switch(right.getType()  &  DEVIDE_BY_0_ERROR)  {  [CE]  cannot  find  symbol  DEVIDE_BY_0_ERROR  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  DEVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  DEVIDE_BY_0_ERROR)  {	  switch(right.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  DEVIDE_BY_0_ERROR	77	None	replace
527	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getFirstChild();  break;  }	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	10	None	replace
528	[BUG]  [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType()  &  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  ';'  expected	86	None	replace
529	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()!=  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()!=  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()!=  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
530	[BUG]  [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  |  DIVIDE_BY_0_ERROR  &&  left.getFirstChild().getType()  ==  DIVIDE_BY_0_ERROR)  {	  switch    (n.getType()    |    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	17	None	replace
531	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  rvalInt  =  left.getLastChild();	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	96	None	replace
532	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	96	None	replace
533	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	58	None	replace
534	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  >  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	58	None	replace
535	[BUG]  [BUGGY]  Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  AssertionFailedError  <  Node>  left  =  right.getFirstChild();	  switch(right.getType())    {    AssertionFailedError    <    Node>    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	54	None	replace
536	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	15	None	replace
537	[BUG]  [BUGGY]  switch(left.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	12	None	replace
538	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalInt!=  rvalInt;  break;	  switch(left.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	12	None	replace
539	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getNext().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	add	switch(left.getFirstChild().getNext().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	26	2	replace
540	[BUG]  [BUGGY]  switch(left.getFirstChild().getNext().getType())  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getNext().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getNext().getType())  {	  switch(left.getFirstChild().getType())    {    	compilable	  [FE]  RuntimeException  	26	2	replace
541	[BUG]  [BUGGY]  switch(left.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {	  switch(left.getFirstChild().getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	26	None	replace
542	[BUG]  [BUGGY]  switch(left.getType()  &  DEVIDE_BY_0_ERROR)  {  [CE]  cannot  find  symbol  DEVIDE_BY_0_ERROR  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  DEVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  DEVIDE_BY_0_ERROR)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  DEVIDE_BY_0_ERROR	82	None	replace
543	[BUG]  [BUGGY]  switch(left.getType()  &  INDEX_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  INDEX_OUT_OF_RANGE)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  INDEX_OUT_OF_RANGE)  {	  switch(left.getType()    &    SHIFT_AMOUNT_OUT_OF_RANGE)    {    	non-compiled	[CE]  cannot  find  symbol  INDEX_OUT_OF_RANGE	82	None	replace
544	[BUG]  [BUGGY]  AssertionFailedError  <  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  AssertionFailedError  <  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	AssertionFailedError  <  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    return    n;    	non-compiled	[CE]  >  expected	51	None	replace
545	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NAME)  {  int  lvalInt  =  left.getType();  }  [CE]  orphaned  case  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.NAME)  {  int  lvalInt  =  left.getType();  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.NAME)  {  int  lvalInt  =  left.getType();  }	  switch(right.getType())    {    int    lvalInt    =    left.getType();    	non-compiled	[CE]  orphaned  case	37	None	replace
546	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
547	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.DIVIDE:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.DIVIDE:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.DIVIDE:  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
548	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
549	[BUG]  [BUGGY]  switch(left.getType())  {  case  Token.NUMBER:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  case  Token.NUMBER:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  case  Token.NUMBER:  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
550	[BUG]  [BUGGY]  change(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  change(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	change(left.getType())  {  lvalInt  <  <  rvalInt;  break;  }	  switch(left.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	13	None	replace
551	[BUG]  [BUGGY]  switch(right.getType()  |  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  |  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  |  DIVIDE_BY_0_ERROR)  {	  switch(right.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	72	None	replace
552	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()!=  Token.NUMBER)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
553	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.BLOCK)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.BLOCK)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()  ==  Token.BLOCK)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
554	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.BLOCK)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()!=  Token.BLOCK)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()!=  Token.BLOCK)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
555	[BUG]  [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  ||  left.getType()  ==  Token.NUMBER)  {	  switch(left.getType()    -    1)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	70	None	replace
556	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	59	None	replace
557	[BUG]  [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [CE]  >  expected  [FE]            ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	if(left.getType()  ==  Token.LSH)  {  Node  lvalInt  =  left.getFirstChild();  result  =  lvalInt  <  <  lvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getFirstChild();    result    =    lvalInt    <    <    lvalInt;    break;    	non-compiled	[CE]  >  expected	59	None	replace
558	[BUG]  [BUGGY]  switch(right.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  result  =  lvalInt  >>  rvalInt;  break;  }	  switch(right.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
559	[BUG]  [BUGGY]  switch(right.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  result  =  lvalInt  >=  rvalInt;  break;  }	  switch(right.getType())    {    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	34	None	replace
560	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  switch(left.getType()  &  0xfff)  {  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  switch(left.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    switch(left.getType()  &  0xfff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
561	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
562	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  n  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    n  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
563	[BUG]  [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xfff)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xfff)    {    Node  lvalInt  =  left.getFirstChild().getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	63	None	add
564	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	88	None	replace
565	[BUG]  [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  Node  lvalInt  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  Node  lvalInt  =  left.getLastChild();	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	88	None	replace
566	[BUG]  [BUGGY]  assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	assertionFailedError(left.getType())  {  AssertionFailedError  <=  error(FRACTIONAL_BITWISE_OPERAND,  right);	  switch(right.getType())    {    AssertionFailedError    <=    error(FRACTIONAL_BITWISE_OPERAND,    left);    	non-compiled	[CE]  ';'  expected	52	None	replace
567	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  right.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  right.getNext();  break;  }	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	16	None	replace
568	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  left.getNext();  break;  }	  switch(left.getType())    {    Node    left    =    left.getNext();    break;    	non-compiled	[CE]  ';'  expected	16	None	replace
569	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;  [CE]  orphaned  case  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  right  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  right  =  left.getFirstChild();  result  =  lvalInt  >=  rvalInt;  break;	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	53	None	replace
570	[BUG]  [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
571	[BUG]  [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType()  &  Token.LSH)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }	  switch    (n.getType()    &    Token.LSH)    {    error(FRACTIONAL_BITWISE_OPERAND,    right);    return    n;    	non-compiled	[CE]  case,  default,  or  '}'  expected	7	None	replace
572	[BUG]  [BUGGY]  switch(right.getType())  {  Node  right  =  left.getLastChild();  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  Node  right  =  left.getLastChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  Node  right  =  left.getLastChild();	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    	non-compiled	[CE]  case,  default,  or  '}'  expected	33	None	replace
573	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	95	None	replace
574	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getNext();  break;  }	  switch(left.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	95	None	replace
575	[BUG]  [BUGGY]  Node  rvalInt  =  left.removeFirst();  break;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  rvalInt  =  left.removeFirst();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  rvalInt  =  left.removeFirst();  break;	  Node    rvalInt    =    left.getNext();    break;    	non-compiled	[CE]  orphaned  case	43	None	replace
576	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  }	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	87	None	replace
577	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  lvalInt  =  left.getFirstChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	87	None	replace
578	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  lvalInt  =  right.getFirstChild();  break;	  switch(right.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	87	None	replace
579	[BUG]  [BUGGY]  switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(n.getType())  {  lvalInt  <  <  rvalInt;  break;  }	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	35	None	replace
580	[BUG]  [BUGGY]  switch(right.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  case  Token.SEMI:  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
581	[BUG]  [BUGGY]  switch(right.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  case  Token.CATCH:  lvalInt  <  <  rvalInt;  break;	  switch(right.getType())    {    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
582	[BUG]  [BUGGY]  switch(left.getType()  &  NUMBER_FOLD_NUMBER)  {  [CE]  cannot  find  symbol  NUMBER_FOLD_NUMBER  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  NUMBER_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  &  NUMBER_FOLD_NUMBER)  {	  switch(left.getType()    &    MAX_FOLD_NUMBER)    {    	non-compiled	[CE]  cannot  find  symbol  NUMBER_FOLD_NUMBER	83	None	replace
583	[BUG]  [BUGGY]  case  Token.SEMI:  result  =  lvalInt  ==  rvalInt;  break;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  case  Token.SEMI:  result  =  lvalInt  ==  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	case  Token.SEMI:  result  =  lvalInt  ==  rvalInt;  break;	  case    Token.SEMI:    result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	55	None	replace
584	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  right.getNext();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  right.getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  right.getNext();	  switch(left.getType())    {    Node    left    =    left.getNext();    	non-compiled	[CE]  ';'  expected	75	None	replace
585	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  >>  rvalInt;  break;  [CE]  orphaned  case  [FE]              AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  left.getFirstChild();  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  left.getFirstChild();  result  =  lvalInt  >>  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  orphaned  case	76	None	replace
586	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  left  =  n.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  left  =  n.getFirstChild();  result  =  lvalInt  <  <  rvalInt;  break;	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	76	None	replace
587	[BUG]  [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  left  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	76	None	replace
588	[BUG]  [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  right  =  left.getFirstChild();  break;  }	  switch(right.getType())    {    Node    right    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	31	None	replace
589	[BUG]  [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(left,  right),  lvalInt)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  NodeUtil.isLhs(left,  right),  lvalInt)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  NodeUtil.isLhs(left,  right),  lvalInt)  {	  switch    (n.getType()    &    NodeUtil.isLhs(left,    right))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
590	[BUG]  [BUGGY]  switch(left.getType()  >  0xff)  {  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  >  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()  >  0xff)  {	  switch(left.getType()    &    0xff)    {    	non-compiled	[CE]  incompatible  types	68	None	replace
591	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  switch(left.getType()  &  0xff)  {  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  switch(left.getType()  &  0xff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    switch(left.getType()  &  0xff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
592	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
593	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  n  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    n  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
594	[BUG]  [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xff)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xff)    {    Node  lvalInt  =  left.getFirstChild().getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	67	None	add
595	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  >  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  >  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  >  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	71	None	replace
596	[BUG]  [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  <  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  <  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (left.getType()  &  DIVIDE_BY_0_ERROR  ||  left.getType()  <  DIVIDE_BY_0_ERROR)  {	  switch    (left.getType()    &    DIVIDE_BY_0_ERROR)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	71	None	replace
597	[BUG]  [BUGGY]  switch(left.getFirstChild())  {  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild())  {	  switch(left.getType())    {    switch(left.getType())    {    	non-compiled	[CE]  incompatible  types	94	None	replace
598	[BUG]  [BUGGY]  switch(left.getType(),  MAX_FOLD_NUMBER)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType(),  MAX_FOLD_NUMBER)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType(),  MAX_FOLD_NUMBER)  {	  switch(left.getType(),    left)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
599	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getLastChild();  break;  }	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	14	None	replace
600	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	result  =  lvalDecimal  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	38	None	replace
601	[BUG]  [BUGGY]  switch  (n.getType()  &  MAX_FOLD_NUMBER_ERROR)  {  [CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch  (n.getType()  &  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch  (n.getType()  &  MAX_FOLD_NUMBER_ERROR)  {	  switch    (n.getType()    &    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_FOLD_NUMBER_ERROR	20	None	replace
602	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  rvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
603	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    Node  lvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
604	[BUG]  [BUGGY]  switch(left.getFirstChild().getType())  {  change(left.getFirstChild().getType())  {  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getFirstChild().getType())  {  change(left.getFirstChild().getType())  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getFirstChild().getType())    {    change(left.getFirstChild().getType())  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	25	None	add
605	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                ComparisonFailure      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getNext();  result  =  lvalInt  <  <  rvalInt;  break;  }	  switch    (n.getType()    &    Token.LSH)    {    Node    lvalInt    =    left.getNext();    result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	62	None	replace
606	[BUG]  [BUGGY]  lvalInt  <  <  3;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  lvalInt  <  <  3;  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	lvalInt  <  <  3;  break;	  lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
607	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  switch(left.getType()  &  0xFFFF)  {  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  switch(left.getType()  &  0xFFFF)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    switch(left.getType()  &  0xFFFF)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
608	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
609	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  n  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    n  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
610	[BUG]  [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [CE]  case,  default,  or  '}'  expected  [FE]          AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xFFFF)  {  Node  lvalInt  =  left.getFirstChild().getNext();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xFFFF)    {    Node  lvalInt  =  left.getFirstChild().getNext();	  	non-compiled	[CE]  case,  default,  or  '}'  expected	65	None	add
611	[BUG]  [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  lvalInt  =  left.getLastChild().getNext();  break;  }	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	98	None	replace
612	[BUG]  [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  }	  switch(left.getType())    {    Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	98	None	replace
613	[BUG]  [BUGGY]  switch(right.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType()  &  DIVIDE_BY_0_ERROR)  {	  switch(right.getFirstChild().getType())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	46	None	replace
614	[BUG]  [BUGGY]  switch(right.getFirstChild().getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType()  &  SHIFT_AMOUNT_OUT_OF_RANGE)  {	  switch(right.getFirstChild().getType())    {    	non-compiled	[CE]  cannot  find  symbol  SHIFT_AMOUNT_OUT_OF_RANGE	46	None	replace
615	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  Node  lvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    Node  lvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
616	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  n  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  n  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    n  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
617	[BUG]  [BUGGY]  switch(left.getType()  &  0xffff)  {  switch(left.getType()  &  0xfff)  {  [CE]  case,  default,  or  '}'  expected  [FE]        AssertionError    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(left.getType()  &  0xffff)  {  switch(left.getType()  &  0xfff)  {  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(left.getType()    &    0xffff)    {    switch(left.getType()  &  0xfff)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	29	None	add
618	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  left  =  right.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  left  =  right.getFirstChild();  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  left  =  right.getFirstChild();	  switch(left.getType())    {    Node    left    =    left.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
619	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]    RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  rvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
620	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]      RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  rvalInt  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
621	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rval  =  left.getFirstChild();  break;  [CE]  case,  default,  or  '}'  expected  [FE]        RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rval  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  rval  =  left.getFirstChild();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
622	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]          RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  lvalInt  =  left.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  lvalInt  =  left.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
623	[BUG]  [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  right.getFirstChild().getNext();  break;  [CE]  case,  default,  or  '}'  expected  [FE]            RuntimeException    [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getFirstChild().getType())  {  Node  rvalInt  =  right.getFirstChild().getNext();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getFirstChild().getType())    {    Node  rvalInt  =  right.getFirstChild().getNext();  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	45	None	add
624	[BUG]  [BUGGY]  Node  lvalInt  =  left.getFirstChild().getString();  break;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Node  lvalInt  =  left.getFirstChild().getString();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Node  lvalInt  =  left.getFirstChild().getString();  break;	  Node    lvalInt    =    left.getFirstChild().getNext();    break;    	non-compiled	[CE]  orphaned  case	81	None	replace
625	[BUG]  [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	Switch(left.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;	  switch(right.getType())    {    Node    rvalInt    =    left.getFirstChild();    break;    	non-compiled	[CE]  ';'  expected	89	None	replace
626	[BUG]  [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]                  AssertionError      [CONTEXT]      error(FRACTIONAL_BITWISE_OPERAND,  left);  return  n;  }  int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }      [BUGGY]  switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }  [BUGGY]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	687	687	1	replace	switch(right.getType())  {  Node  rvalInt  =  left.getFirstChild();  break;  }	  switch(right.getType())    {    Node    rvalInt    =    right.getFirstChild();    break;    	non-compiled	[CE]  case,  default,  or  '}'  expected	92	None	replace
