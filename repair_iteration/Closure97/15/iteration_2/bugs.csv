bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
2	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rvalInt;  break;  [CE]  >  expected  [FE]      ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
3	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [CE]  >  expected  [FE]        ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalDouble  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
4	[BUG]  [BUGGY]  result  =  lvalLs  <  <  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  1;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  1;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  result  =  lvalLs  <  <  4;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  4;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  4;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  result  =  lvalLs  <  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  2;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  2;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  result  =  lvalLs  +  rvalLs;  [CE]  cannot  find  symbol  lvalLs  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  +  rvalLs;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  +  rvalLs;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  cannot  find  symbol  lvalLs	12	None	replace
8	[BUG]  [BUGGY]  result  =  lvalLs  >=  rvalLs;  [CE]  cannot  find  symbol  lvalLs  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  >=  rvalLs;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  >=  rvalLs;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  cannot  find  symbol  lvalLs	12	None	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	add	result  =  lvalInt  >>  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
10	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [FE]  ComparisonFailure  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
11	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >=  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	4	None	replace
12	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt!=  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	4	None	replace
13	[BUG]  [BUGGY]  result  =  lval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lval  <  <  1;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lval  <  <  1;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  result  =  lval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lval  <  <  4;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lval  <  <  4;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  >  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  >  rvalInt;	  result    =    lvalLh    >>    >    rvalLh;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rvalLh;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  <  <  rvalLh;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  <  <  rvalLh;	  result    =    lvalLh    >>    >    rvalLh;    	non-compiled	[CE]  >  expected	11	None	replace
17	[BUG]  [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  >  rvalInt;	  result    =    lvalLh    >>    >    rvalLh;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
18	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalLh;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  >  rvalLh;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  >  rvalLh;	  result    =    lvalLh    >>    >    rvalLh;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	add	result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	compilable	  [FE]  ComparisonFailure  	3	2	replace
20	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  [FE]  ComparisonFailure  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	compilable	  [FE]  ComparisonFailure  	3	2	replace
21	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >=  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  incompatible  types	3	None	replace
22	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt!=  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt!=  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  incompatible  types	3	None	replace
23	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  [Delete]  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  ';'  expected	3	None	replace
24	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  ==  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  ==  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  incompatible  types	3	None	replace
25	[BUG]  [BUGGY]  result  =  lvalLvalInt  <  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLvalInt  <  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLvalInt  <  <  rvalInt;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  >  expected	3	None	replace
26	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt!=  >  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt!=  >  rvalInt;	  result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  Delete  [FE]                    AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  [Delete]  >  rvalInt;	  result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Delete	6	None	replace
28	[BUG]  [BUGGY]      result  =  lvalLow  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]      result  =  lvalLow  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	        result  =  lvalLow  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	7	None	add
29	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  <  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	1	None	replace
30	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  <  rvalInt;	  result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	9	None	replace
31	[BUG]  [BUGGY]  result  =  lvalLh  >=  >  rvalLh;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  >  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  >  rvalLh;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  result  =  lvalLh  <  <  rvalLh;  break;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  <  <  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  <  <  rvalLh;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  >  expected	14	None	replace
33	[BUG]  [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  >  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  >  rvalInt;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalLh;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  >  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  >  rvalLh;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
35	[BUG]  [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  rvalInt;  break;	  result    =    lvalLh    >>    >    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	15	None	replace
36	[BUG]  [BUGGY]  result  =  lvalLh  >>  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  <  rvalInt;  break;	  result    =    lvalLh    >>    >    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
37	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  >  rvalLh;	  result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]    ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  rvalInt;  break;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
40	[BUG]  [BUGGY]  result  =  lvalLh  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalLh  [FE]      ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  rvalInt;  break;	      	non-compiled	[CE]  cannot  find  symbol  lvalLh	8	None	replace
41	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rval;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  <  <  rval;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	1	None	replace
42	[BUG]  [BUGGY]  result  =  lvalInt  >>  rval;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rval;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  rval;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	1	None	replace
43	[BUG]  [BUGGY]  result  =  lvalLs  <  <  rvalInt;  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	1	None	replace
44	[BUG]  [BUGGY]  result  =  lvalLh  >=  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  rvalInt;	  result    =    lvalLh    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	10	None	replace
45	[BUG]  [BUGGY]  result  =  lvalLh!=  rvalInt;  [CE]  cannot  find  symbol  lvalLh  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  rvalInt;	  result    =    lvalLh    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	10	None	replace
46	[BUG]  [BUGGY]  result  =  lvalInt  >>  rval;  break;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rval;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  rval;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	5	None	replace
47	[BUG]  [BUGGY]  result  =  lvalLs  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	5	None	replace
48	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  <  <  rval;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	5	None	replace
49	[BUG]  [BUGGY]  result  =  lvalLh  >>  >  rvalLh  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  >  rvalLh  +  1;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  >  rvalLh  +  1;	  result    =    lvalLh    >=    >    rvalLh;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  break;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  <  rvalInt;  break;	  result    =    lvalInt    >=    >    rvalInt;    break;    	non-compiled	[CE]  >  expected	2	None	replace
51	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  break;	  result    =    lvalInt    >=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt!=  >  rvalInt;  break;	  result    =    lvalInt    >=    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  result  =  lvalInt  >=  <  rvalInt;  break;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >=  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >=  <  rvalInt;  break;	  result    =    lvalInt    >>    >    rvalInt;    break;    	non-compiled	[CE]  >  expected	4	None	replace
54	[BUG]  [BUGGY]  result  =  lvalLh  >>  <  rvalLh;  break;  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  <  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  <  rvalLh;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  >  expected	14	None	replace
55	[BUG]  [BUGGY]  result  =  lvalLh  >>  >  rvalLh  +  1;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  >  rvalLh  +  1;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  >  rvalLh  +  1;  break;	  result    =    lvalLh    >>    >    rvalLh;    break;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalInt  >>  >  rvalLh;  break;	  result    =    lvalLh    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  result  =  lvalLh  >=  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >=  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >=  <  rvalInt;  break;	  result    =    lvalLh    >>    >    rvalInt;    break;    	non-compiled	[CE]  >  expected	15	None	replace
58	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  >  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  >  rvalInt;  break;	  result    =    lvalLh    >>    >    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
59	[BUG]  [BUGGY]  result  =  lvalLs  >>  rvalLs;  [CE]  cannot  find  symbol  lvalLs  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  >>  rvalLs;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  >>  rvalLs;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  cannot  find  symbol  lvalLs	12	None	replace
60	[BUG]  [BUGGY]  result  =  lvalLs  <  <  rvalLs  +  1;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs  <  <  rvalLs  +  1;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs  <  <  rvalLs  +  1;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  >  expected	12	None	replace
61	[BUG]  [BUGGY]  result  =  lvalLs!=  rvalLs;  [CE]  cannot  find  symbol  lvalLs  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLs!=  rvalLs;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLs!=  rvalLs;	  result    =    lvalLs    <    <    rvalLs;    	non-compiled	[CE]  cannot  find  symbol  lvalLs	12	None	replace
62	[BUG]  [BUGGY]  result  =  lvalLh  >>  <  rvalLh;  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  >>  <  rvalLh;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  >>  <  rvalLh;	  result    =    lvalLh    >>    >    rvalLh;    	non-compiled	[CE]  >  expected	11	None	replace
63	[BUG]  [BUGGY]  result  =  lvalLh!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh!=  >  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh!=  >  rvalInt;	  result    =    lvalLh    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
64	[BUG]  [BUGGY]      result  =  lvalLow  <  <  rvalLh;  break;  [CE]  >  expected  [FE]    ComparisonFailure    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]      result  =  lvalLow  <  <  rvalLh;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	        result  =  lvalLow  <  <  rvalLh;  break;	  	non-compiled	[CE]  >  expected	7	None	add
65	[BUG]  [BUGGY]  result  =  lvalLocal  <  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLocal  <  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLocal  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	1	None	replace
66	[BUG]  [BUGGY]  result  =  lvalLow  <  <  rvalInt;  [CE]  >  expected  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLow  <  <  rvalInt;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLow  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	1	None	replace
67	[BUG]  [BUGGY]  result  =  lvalLh  [Delete]  >  rvalLh;  [CE]  cannot  find  symbol  lvalLh  [FE]          AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLh  [Delete]  >  rvalLh;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLh  [Delete]  >  rvalLh;	  result    =    lvalLh    >=    >    rvalLh;    	non-compiled	[CE]  cannot  find  symbol  lvalLh	13	None	replace
68	[BUG]  [BUGGY]  result  =  lvalLocal  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLocal  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLocal  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	5	None	replace
69	[BUG]  [BUGGY]  result  =  lvalLshort  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    int  rvalInt  =  (int)  rval;  if  (rvalInt  !=  rval)  {  error(FRACTIONAL_BITWISE_OPERAND,  right);  return  n;  }  switch  (n.getType())  {  case  Token.LSH:  result  =  lvalInt  <<  rvalInt;    [BUGGY]  result  =  lvalLshort  <  <  rvalInt;  break;  [BUGGY]    case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;  break;  default:  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	690	690	1	replace	result  =  lvalLshort  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	5	None	replace
