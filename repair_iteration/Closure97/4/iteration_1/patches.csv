bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
2	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
6	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
8	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
10	[BUG]  [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
11	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
12	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
13	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
14	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  >=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
15	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
16	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
17	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  TOken.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
18	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
19	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
20	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
21	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
22	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
23	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Node.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
24	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Integer.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
26	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
28	[BUG]  [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
30	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
32	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
34	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
35	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
36	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
37	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
38	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
39	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
40	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
41	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
42	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
43	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
44	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
45	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  &&  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
47	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
49	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
51	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
52	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  n.getNext();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
57	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
59	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
61	[BUG]  [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
63	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
65	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.FUNCTION  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
66	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
67	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()!=  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
68	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Integer.VAR  &&  right.getType()  ==  Integer.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
69	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (right.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
70	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
71	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
73	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
75	[BUG]  [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.FUNCTION  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
76	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
77	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
78	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
79	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
80	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
81	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
82	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
83	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.NUMBER  ||  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
84	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()!=  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
85	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
86	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if  (right.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
87	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
88	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
89	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
90	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
91	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
92	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()!=  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
93	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  >=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
95	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
97	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
98	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
99	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()!=  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
100	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (right.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
101	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
102	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
103	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Integer.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
104	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
105	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()!=  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
106	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(right.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
107	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  right.getType()!=  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
108	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  &&  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
109	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [FE]  ComparisonFailure  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.FUNCTION)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	15	2	replace
112	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
113	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	4	2	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
115	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
117	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
118	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    if(left.getType()  ==  Token.CRALL  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
120	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.STRING)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
121	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
122	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
123	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
124	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
125	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
126	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
127	[BUG]  [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.GETELEM  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
129	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
131	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.STRING)  {	  if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	15	1	replace
132	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
133	[BUG]  [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left!=  null  &&  right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
135	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
136	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  TOKEN  &&  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
138	[BUG]  [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  &&  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
140	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
142	[BUG]  [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	17	1	replace
143	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()    ==    Token.NUMBER    ||    left.getType()    ==    Token.NUMBER)    {    If(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	14	None	add
144	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    If(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
145	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
147	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.VAR  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
149	[BUG]  [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.VAR  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
151	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.VAR)  {	  if    (left.getType()    ==    Token.VAR    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
152	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
153	[BUG]  [BUGGY]  int  negNum  =  n.getIntValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  int  negNum  =  n.getIntValue();  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	int  negNum  =  n.getIntValue();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
154	[BUG]  [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  Integer  result  =  tryFoldShift(n,  left,  right);  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	Integer  result  =  tryFoldShift(n,  left,  right);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
155	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    if(right  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	8	None	add
156	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    if  (left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  	non-compiled	[CE]  ';'  expected	12	None	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
158	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if(left    ==    null    ||    left.getType()    ==    Token.NUMBER    ||    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	9	1	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
160	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  ||  right.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.STRING  ||  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	13	1	replace
163	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
164	[BUG]  [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(right.getType()  ==  Token.STRING  &&  left.getType()  ==  Token.NUMBER)  {	  if    (left.getType()    ==    Token.STRING    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  ComparisonFailure  	13	2	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
166	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER)  {	  if(n.getType()    ==    Token.NUMBER    &&    left.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
168	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.CALL  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
170	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.CALL)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
172	[BUG]  [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {    [BUGGY]  if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]    right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.SCRIPT  ||  right.getType()  ==  Token.NUMBER)  {	  if(left.getType()    ==    Token.CALL    &&    right.getType()    ==    Token.NUMBER)    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
