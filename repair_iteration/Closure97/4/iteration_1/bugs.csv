bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
2	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
3	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
4	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  &&  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
6	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left.getType()  ==  Token.VAR  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
7	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]    [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	  	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
9	[BUG]  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left  ==  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
11	[BUG]  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left!=  null  ||  left.getType()  ==  Token.NUMBER  ||  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
12	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
13	[BUG]  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if  (left.getType()  ==  Token.STRING  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
15	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(n.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
17	[BUG]  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.NUMBER  ||  left.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  AssertionFailedError  	7	1	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	add	if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
19	[BUG]  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [FE]  ComparisonFailure  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldShift(Node  n,  Node  left,  Node  right)  {  [BUGGY]  if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {  [BUGGY]  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();    if  (!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	653	654	1	replace	if(left.getType()  ==  Token.CALL  &&  right.getType()  ==  Token.NUMBER)  {	if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  	compilable	  [FE]  ComparisonFailure  	7	2	replace
